{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DataTag Helper Read Latest Documentation - Browse GitHub Code Repository How to Build Method 1: Use Remote Container Step 1: Clone into container If you have installed VSCode and Docker , just click and choose \"Clone repo in container volume\", it'll open a new container with building environments. Step 2: Build Building linux executable: pyinstaller -F --windowed build-win.spec Building Windows executable: wine pyinstaller -F --windowed build-win.spec Step 3: Generate API docs Hosing in local portray server Push to github pages portray on_github_pages We use portary to generate docs, and you can add Pymdown Extensions to extend Markdown format. For example, you can add \"pymdownx.arithmatex\" into extra_markdown_extensions list which under the section [tool.portray] of pyproject.toml to have the ability to parse LaTeX math equations. Step 4: test pre-commit hook before commit test for a file: pre-commit run --files ./DataTag_helper.py test for all files: pre-commit run --all-files If you want to commit without pre-commit checks, just run git commit -m \"some messages\" --no-verify Method 2: Manually Setup Environments Step 1: Install Anaconda https://www.anaconda.com/products/individual Step 2: Install dependencies Navigating to the directory of this repo. cd /workspace/DataTag_helper Create conda env conda create --name DataTag_helper python = 3 .6 conda activate DataTag_helper If conda install has permission error, excute: sudo chown 1000:1000 -R /opt/conda/ This will change the owner of conda folder. If conda activation failed, just execute: conda init bash to init bash env Install packages conda install wxpython conda install -c conda-forge gooey pip install -r project_requirements.txt pip install -r requirements.txt must first install wxpython before Gooey to avoid strange error Installation via pip fails needing pathlib2 \u00b7 Issue #474 \u00b7 chriskiehl/Gooey Step 3: Execute python DataTag_helper.py you should see the GUI window popup. Step 4: Install pyinstaller Gooey/Packaging-Gooey.md at master \u00b7 chriskiehl/Gooey Packing Gooey into a standalone executable is super straight forward thanks to PyInstaller. It is the only dependency you'll need and can be installed via the following. pip install pyinstaller == 3 .5 Step 5: Building linux excutable with .spec file From the command line, run pyinstaller -F --windowed build-win.spec -F tells PyInstaller to create a single bundled output file --windowed disables the terminal which would otherwise launch when you opened your app. And that's it. Inside of the dist/ directory, you'll find a beautiful stand-alone executable that you can distribute to your users. If you encounter an error: FileNotFoundError: [Errno 2] No such file or directory: 'objcopy': 'objcopy' you should install dependenies sudo apt update sudo apt install -y binutils libc6 see: FileNotFoundError: [Errno 2] No such file or directory: 'objcopy': 'objcopy' \u00b7 Issue #3815 \u00b7 pyinstaller/pyinstaller Step 6: Install wine add wine apt repository For Ubuntu - WineHQ Wiki : sudo dpkg --add-architecture i386 wget -O - https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add - sudo add-apt-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ bionic main' Install unmet dependence: faudio (only needed for unbuntu18.04, because higher version already has libfaudio0 in repository) sudo add-apt-repository ppa:cybermax-dexter/sdl2-backport sudo apt update For debian 10 : sudo dpkg --add-architecture i386 wget -qO - https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add - sudo apt-add-repository https://dl.winehq.org/wine-builds/debian/ wget -O- -q https://download.opensuse.org/repositories/Emulators:/Wine:/Debian/Debian_10/Release.key | sudo apt-key add - echo \"deb http://download.opensuse.org/repositories/Emulators:/Wine:/Debian/Debian_10 ./\" | sudo tee /etc/apt/sources.list.d/wine-obs.list update: sudo apt update Notes: check linux distribution: cat /etc/*-release see: https://www.cyberciti.biz/faq/find-linux-distribution-name-version-number/ If you encounter an error: sudo: apt-add-repository: command not found install sudo apt -y install software-properties-common Install latest wine How to Install Wine Devel 4.8 in Ubuntu 19.04 / 18.04 | UbuntuHandbook sudo apt install --install-recommends winehq-devel install python in wine python - compiling .py into windows AND mac executables on Ubuntu - Stack Overflow wine --version winecfg wget https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe wine python-3.6.8-amd64.exe headless install: install xvfb: sudo apt-get install --fix-missing -y xvfb cerate virtual frame buffer: Xvfb :0 -screen 0 1024x768x16 & execute python installer: DISPLAY=:0.0 wine python-3.6.8-amd64.exe /quiet InstallAllUsers=1 PrependPath=1 see: xorg - Run wine totally headless - Super User install wxpython, gooey, pyinstaller and other requirements wine pip install wxpython wine pip install gooey wine pip install -r project_requirements.txt wine pip install pyinstaller == 3 .5 activate upx compression (optional): Releases \u00b7 upx/upx wget https://github.com/upx/upx/releases/download/v3.96/upx-3.96-win64.zip unzip -j \"upx-3.96-win64.zip\" \"upx-3.96-win64/upx.exe\" -d \"./\" note: upx may cause dll corruption, you may want to disable UPX, see: Onefile builds not working on Windows 10, Error loading Python dll \u00b7 Issue #3600 \u00b7 pyinstaller/pyinstaller python - Error when creating executable file with pyinstaller - Stack Overflow python - DLL load failure with Python3 (32bit)+PyInstaller+UPX (32bit) under Windows 10 (64bit) - Stack Overflow Dependency Walker (depends.exe) Home Page Step 7: Building Windows Executable from Linux wine pyinstaller -F --windowed build-win.spec debug mode Using PyInstaller \u2014 PyInstaller 3.6 documentation wine pyinstaller -F --windowed build-win.spec -d bootloader Step 8: Running Windows Executable through wine wine ./dist/DataTag_helper.exe Run test Run test pytest Run test with print messages pytest -s How to test with cli? see: Build and Test a Command Line Interface with Poetry, Python's argparse, and pytest - DEV Community \ud83d\udc69\u200d\ud83d\udcbb\ud83d\udc68\u200d\ud83d\udcbb References Gooey chriskiehl/Gooey: Turn (almost) any Python command line program into a full GUI application with one line Gooey Options Gooey/Gooey-Options.md at master \u00b7 chriskiehl/Gooey examples chriskiehl/GooeyExamples: Example programs to Demonstrate Gooey's functionality mutually_exclusive_group Gooey/all_widgets_subparser.py at 66f154decb8cd7d140a702277d8c262c4d8194cc \u00b7 chriskiehl/Gooey python - How to define a mutually exclusive group of two positional arguments? - Stack Overflow Python argparse mutual exclusive group - Stack Overflow widget example FileChooser, DirChooser, FileSaver, MultiFileChooser, DateChooser, TimeChooser GooeyExamples/widget_demo.py at d0606a8d543babe1cff5db215d4d37e26888b490 \u00b7 chriskiehl/GooeyExamples dynamic update GooeyExamples/dynamic_updates.py at master \u00b7 chriskiehl/GooeyExamples","title":"Home"},{"location":"#datatag-helper","text":"Read Latest Documentation - Browse GitHub Code Repository","title":"DataTag Helper"},{"location":"#how-to-build","text":"","title":"How to Build"},{"location":"#method-1-use-remote-container","text":"","title":"Method 1: Use Remote Container"},{"location":"#step-1-clone-into-container","text":"If you have installed VSCode and Docker , just click and choose \"Clone repo in container volume\", it'll open a new container with building environments.","title":"Step 1: Clone into container"},{"location":"#step-2-build","text":"Building linux executable: pyinstaller -F --windowed build-win.spec Building Windows executable: wine pyinstaller -F --windowed build-win.spec","title":"Step 2: Build"},{"location":"#step-3-generate-api-docs","text":"Hosing in local portray server Push to github pages portray on_github_pages We use portary to generate docs, and you can add Pymdown Extensions to extend Markdown format. For example, you can add \"pymdownx.arithmatex\" into extra_markdown_extensions list which under the section [tool.portray] of pyproject.toml to have the ability to parse LaTeX math equations.","title":"Step 3: Generate API docs"},{"location":"#step-4-test-pre-commit-hook-before-commit","text":"test for a file: pre-commit run --files ./DataTag_helper.py test for all files: pre-commit run --all-files If you want to commit without pre-commit checks, just run git commit -m \"some messages\" --no-verify","title":"Step 4: test pre-commit hook before commit"},{"location":"#method-2-manually-setup-environments","text":"","title":"Method 2: Manually Setup Environments"},{"location":"#step-1-install-anaconda","text":"https://www.anaconda.com/products/individual","title":"Step 1: Install Anaconda"},{"location":"#step-2-install-dependencies","text":"Navigating to the directory of this repo. cd /workspace/DataTag_helper Create conda env conda create --name DataTag_helper python = 3 .6 conda activate DataTag_helper If conda install has permission error, excute: sudo chown 1000:1000 -R /opt/conda/ This will change the owner of conda folder. If conda activation failed, just execute: conda init bash to init bash env Install packages conda install wxpython conda install -c conda-forge gooey pip install -r project_requirements.txt pip install -r requirements.txt must first install wxpython before Gooey to avoid strange error Installation via pip fails needing pathlib2 \u00b7 Issue #474 \u00b7 chriskiehl/Gooey","title":"Step 2: Install dependencies"},{"location":"#step-3-execute","text":"python DataTag_helper.py you should see the GUI window popup.","title":"Step 3: Execute"},{"location":"#step-4-install-pyinstaller","text":"Gooey/Packaging-Gooey.md at master \u00b7 chriskiehl/Gooey Packing Gooey into a standalone executable is super straight forward thanks to PyInstaller. It is the only dependency you'll need and can be installed via the following. pip install pyinstaller == 3 .5","title":"Step 4: Install pyinstaller"},{"location":"#step-5-building-linux-excutable-with-spec-file","text":"From the command line, run pyinstaller -F --windowed build-win.spec -F tells PyInstaller to create a single bundled output file --windowed disables the terminal which would otherwise launch when you opened your app. And that's it. Inside of the dist/ directory, you'll find a beautiful stand-alone executable that you can distribute to your users. If you encounter an error: FileNotFoundError: [Errno 2] No such file or directory: 'objcopy': 'objcopy' you should install dependenies sudo apt update sudo apt install -y binutils libc6 see: FileNotFoundError: [Errno 2] No such file or directory: 'objcopy': 'objcopy' \u00b7 Issue #3815 \u00b7 pyinstaller/pyinstaller","title":"Step 5: Building linux excutable with .spec file"},{"location":"#step-6-install-wine","text":"add wine apt repository For Ubuntu - WineHQ Wiki : sudo dpkg --add-architecture i386 wget -O - https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add - sudo add-apt-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ bionic main' Install unmet dependence: faudio (only needed for unbuntu18.04, because higher version already has libfaudio0 in repository) sudo add-apt-repository ppa:cybermax-dexter/sdl2-backport sudo apt update For debian 10 : sudo dpkg --add-architecture i386 wget -qO - https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add - sudo apt-add-repository https://dl.winehq.org/wine-builds/debian/ wget -O- -q https://download.opensuse.org/repositories/Emulators:/Wine:/Debian/Debian_10/Release.key | sudo apt-key add - echo \"deb http://download.opensuse.org/repositories/Emulators:/Wine:/Debian/Debian_10 ./\" | sudo tee /etc/apt/sources.list.d/wine-obs.list update: sudo apt update Notes: check linux distribution: cat /etc/*-release see: https://www.cyberciti.biz/faq/find-linux-distribution-name-version-number/ If you encounter an error: sudo: apt-add-repository: command not found install sudo apt -y install software-properties-common Install latest wine How to Install Wine Devel 4.8 in Ubuntu 19.04 / 18.04 | UbuntuHandbook sudo apt install --install-recommends winehq-devel install python in wine python - compiling .py into windows AND mac executables on Ubuntu - Stack Overflow wine --version winecfg wget https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe wine python-3.6.8-amd64.exe headless install: install xvfb: sudo apt-get install --fix-missing -y xvfb cerate virtual frame buffer: Xvfb :0 -screen 0 1024x768x16 & execute python installer: DISPLAY=:0.0 wine python-3.6.8-amd64.exe /quiet InstallAllUsers=1 PrependPath=1 see: xorg - Run wine totally headless - Super User install wxpython, gooey, pyinstaller and other requirements wine pip install wxpython wine pip install gooey wine pip install -r project_requirements.txt wine pip install pyinstaller == 3 .5 activate upx compression (optional): Releases \u00b7 upx/upx wget https://github.com/upx/upx/releases/download/v3.96/upx-3.96-win64.zip unzip -j \"upx-3.96-win64.zip\" \"upx-3.96-win64/upx.exe\" -d \"./\" note: upx may cause dll corruption, you may want to disable UPX, see: Onefile builds not working on Windows 10, Error loading Python dll \u00b7 Issue #3600 \u00b7 pyinstaller/pyinstaller python - Error when creating executable file with pyinstaller - Stack Overflow python - DLL load failure with Python3 (32bit)+PyInstaller+UPX (32bit) under Windows 10 (64bit) - Stack Overflow Dependency Walker (depends.exe) Home Page","title":"Step 6: Install wine"},{"location":"#step-7-building-windows-executable-from-linux","text":"wine pyinstaller -F --windowed build-win.spec debug mode Using PyInstaller \u2014 PyInstaller 3.6 documentation wine pyinstaller -F --windowed build-win.spec -d bootloader","title":"Step 7: Building Windows Executable from Linux"},{"location":"#step-8-running-windows-executable-through-wine","text":"wine ./dist/DataTag_helper.exe","title":"Step 8: Running Windows Executable through wine"},{"location":"#run-test","text":"Run test pytest Run test with print messages pytest -s How to test with cli? see: Build and Test a Command Line Interface with Poetry, Python's argparse, and pytest - DEV Community \ud83d\udc69\u200d\ud83d\udcbb\ud83d\udc68\u200d\ud83d\udcbb","title":"Run test"},{"location":"#references","text":"","title":"References"},{"location":"#gooey","text":"chriskiehl/Gooey: Turn (almost) any Python command line program into a full GUI application with one line","title":"Gooey"},{"location":"#gooey-options","text":"Gooey/Gooey-Options.md at master \u00b7 chriskiehl/Gooey","title":"Gooey Options"},{"location":"#examples","text":"chriskiehl/GooeyExamples: Example programs to Demonstrate Gooey's functionality","title":"examples"},{"location":"#mutually_exclusive_group","text":"Gooey/all_widgets_subparser.py at 66f154decb8cd7d140a702277d8c262c4d8194cc \u00b7 chriskiehl/Gooey python - How to define a mutually exclusive group of two positional arguments? - Stack Overflow Python argparse mutual exclusive group - Stack Overflow","title":"mutually_exclusive_group"},{"location":"#widget-example","text":"FileChooser, DirChooser, FileSaver, MultiFileChooser, DateChooser, TimeChooser GooeyExamples/widget_demo.py at d0606a8d543babe1cff5db215d4d37e26888b490 \u00b7 chriskiehl/GooeyExamples","title":"widget example"},{"location":"#dynamic-update","text":"GooeyExamples/dynamic_updates.py at master \u00b7 chriskiehl/GooeyExamples","title":"dynamic update"},{"location":"CHANGELOG/","text":"changelog v0.8.6 exported title in json file use relative path v0.8.5 Set default selection to the first option, and move input dir that contains .txt to the first option. Rename title to DataTag Helper (\u6a19\u8a3b\u8f49\u6a94\u5c0f\u5e6b\u624b) v0.8.4 Move SqliteDict into main(), only when using GUI will call it. This is to avoid connecting to the sqlite when test CLI. v0.8.3 Rename to DataTag_helper v0.8.2 fix \"Missing optional dependency 'xlrd'.\" error, jsut use openpyxl. see: https://github.com/pandas-dev/pandas/issues/38424 called monkey patch for gooey gui components only when before entering GUI mode (to avoid non-gui import generate \"module not found\" error) v0.8.1 second labeled json cleaner support input Multiple first labeled file v0.8.0 add second_upload function add second labeled json cleaner and converter v0.7.2 add SerialID column in contents tab v0.7.1 fix numpy issue remove xlrd fix KeyError issue v0.7.0 \u65b0\u589e\u6279\u6b21\u8655\u7406txt\u6a94\u529f\u80fd \u6ce8\u610f\uff1a\u7b2c\u4e00\u5c64\u7684txt\u6703\u81ea\u52d5\u5ffd\u7565\uff0c\u53ea\u6703\u52a0\u5165\u7b2c\u4e8c\u5c64\u4ee5\u4e0b\u7684txt \u5df2\u6a19\u8a3b\u8cc7\u6599\u8f49\u63db\u8f38\u51fa\u4e4b excel\u6a94\u65b0\u589e\u591a\u7a2e\u8996\u5716\uff1a a. \u4ee5\u6a19\u8a3b\u8005\u70ba\u55ae\u4f4d\uff0c\u4e00\u6b21\u5448\u73fe\u591a\u4f4d\u6a19\u8457\u8005\u4e4b\u9078\u9805\u53ca\u53e5\u5b50\u6a19\u8a3b\u7d50\u679c b. \u4ee5\u9078\u9805\u70ba\u55ae\u4f4d\uff0c\u6bd4\u8f03\u591a\u4f4d\u6a19\u8a3b\u8005\u4e4b\u7d50\u679c c. \u4ee5\u53e5\u5b50\u70ba\u55ae\u4f4d\uff0c\u6bd4\u8f03\u4e0d\u540c\u6a19\u8a3b\u8005\u7d50\u679c d. \u4ee5\u53e5\u5b50\u7de8\u865f\u70ba\u55ae\u4f4d\uff0c\u6bd4\u8f03\u4e0d\u540c\u6a19\u8a3b\u8005\u7d50\u679c e. \u5c07\u53e5\u5b50\u6309\u985e\u5225\u53ca\u7de8\u865f\u6c34\u5e73\u5c55\u958b\u5448\u73fe f. \u5c07\u53e5\u5b50\u6309\u985e\u5225\u6c34\u5e73\u5c55\u958b\u5448\u73fe \u672a\u6a19\u8a3b excel \u6a94\u8f49\u63db\u6210json \u6642\uff0c\u8f38\u51fa TextID mapping \u539f\u672c\u7684 TextID \u662f\u5f9e excel \u4e2d\u7684 Content \u5168\u6587\u8a08\u7b97md5 hash\u5f97\u5230\uff0c \u4f46\u662f\u56e0\u70baexcel\u4e2d\u53ef\u80fd\u5b58\u5728\u975e\u6cd5\u5b57\u5143\u53ca\u8868\u60c5\u7b26\u865f\uff0c \u5f8c\u4f86\u8f38\u51fa\u7684\u6587\u7ae0\u6703\u7d93\u904e\u79fb\u9664\u975e\u6cd5\u5b57\u5143\u53ca\u5c07\u8868\u60c5\u7b26\u865f\u8f49\u6210\u6587\u5b57\u7684\u8655\u7406\uff0c \u56e0\u6b64\u6709\u53ef\u80fd\u7121\u6cd5\u9084\u539f\u6210\u539f\u59cb\u7684\u5168\u6587\uff0c\u9020\u6210\u7121\u6cd5\u8a08\u7b97\u5f97\u5230\u539f\u59cb\u7684TextID\u3002 \u6240\u4ee5\u53e6\u5916\u8a08\u7b97\u4e00\u500bTextID \u662f\u900f\u904e\u5c07\u5168\u6587\u79fb\u9664\u975e\u6cd5\u5b57\u5143\u53ca\u8868\u60c5\u7b26\u865f\u5f8c\u518d\u8a08\u7b97md5\uff0c \u4e26\u4e14\u8f38\u51fa\u8655\u7406\u5f8c\u7684TextID \u8207\u539f\u59cbTextID \u7684\u5c0d\u61c9\u8868\uff0c \u5982\u6b64\u7576\u6587\u7ae0\u540c\u4e00\u7bc7\u6587\u7ae0\u7d93\u904e\u8655\u7406\u5f8c\uff0c\u56e0\u539f\u59cb TextID\u4e0d\u540c\u800c\u5c0d\u4e0d\u4e0a\u6642\uff0c \u53ef\u900f\u904e TextID mapping \u6bd4\u8f03\u8655\u7406\u5f8c\u7684TextID\uff0c \u61c9\u8a72\u5c31\u80fd\u5c0d\u56de\u540c\u4e00\u7bc7\u6587\u7ae0\u3002 v0.6.1 Symptom1: \u4fee\u5fa9 Windows \u4e0b\u5408\u4f75\u6a94\u6848\u51fa\u73fe openpyxl.utils.exceptions.IllegalCharacterError Rootcause: The previous generated excel file contains illegal character _x0008_, which is an OOXML escape character[1]. Solution: remove these illegal characters before write to excel 2 . Symptom2: \u4fee\u5fa9\u7576 json \u6a94\u4e2d\u6709 _xHHHH_ \u9019\u985e\u5b57\u4e32(\u4ee5\u7d14\u6587\u5b57\u5f62\u5f0f\u51fa\u73fe)\u6642\uff0c\u8f38\u51fa\u7684 excel \u6a94\u6703\u81ea\u52d5\u8f49\u63db\u6210 _xHHHH_ \u7684 unicode \u5b57\u5143(\u50c5\u5728 Windows \u4e0b\u767c\u751f\uff0c\u5728 linux \u4e0b\u6703\u5c07\u7d14\u6587\u5b57\u7684\u5e95\u7dda(underscore, _) \u518d\u8df3\u812b\u4e00\u6b21\uff0c\u8f49\u63db\u6210 _x005F_x0008_ [1] \u5132\u5b58\u5230 excel) Rootcause: maybe openpyxl bug? Solution: this is a workaround. when dataframe read from json file by read_json(), look for _xHHHH_ pattern in this dataframe, and unescape it[3] before write to excel. References [1]: VTBString Class (DocumentFormat.OpenXml.VariantTypes) | Microsoft Docs [ISO/IEC 29500-1 1st Edition] bstr (Basic String) This element defines a binary basic string variant type, which can store any valid Unicode character. Unicode characters that cannot be directly represented in XML as defined by the XML 1.0 specification, shall be escaped using the Unicode numerical character representation escape character format _xHHHH_, where H represents a hexadecimal character in the character's value. [ Example : The Unicode character 8 is not permitted in an XML 1.0 document, so it shall be escaped as _x0008_. end example ] To store the literal form of an escape sequence, the initial underscore shall itself be escaped (i.e. stored as _x005F_). [ Example : The string literal _x0008_ would be stored as _x005F_x0008_ . end example ] The possible values for this element are defined by the W3C XML Schema string datatype. \u8fdb\u5165python\u547d\u4ee4\u884c\u6a21\u5f0f\uff0c\u8f93\u5165\u5982\u4e0b\uff1a >>> import sys >>> help ( 'openpyxl' ) \u53ef\u5f97openpyxl\u6a21\u5757\u7684\u8def\u5f84\u5982\u4e0b /usr/local/lib/python2.7/site-packages/openpyxl \uff0c\u67e5\u770b\u8be5\u76ee\u5f55\u4e0b\u7684cell\u5b50\u76ee\u5f55\u4e2d\u7684cell.py\u6587\u4ef6\uff0c\u5b9a\u4f4d\u5230\u5177\u4f53\u9519\u8bef\u4ee3\u7801\u4e3a\uff1a def check_string ( self , value ): \"\"\"Check string coding, length, and line break character\"\"\" if value is None : return # convert to unicode string if not isinstance ( value , unicode ): value = unicode ( value , self . encoding ) value = unicode ( value ) # string must never be longer than 32,767 characters # truncate if necessary value = value [: 32767 ] if next ( ILLEGAL_CHARACTERS_RE . finditer ( value ), None ): raise IllegalCharacterError return value \u5176\u4e2d ILLEGAL_CHARACTERS_RE \u7684\u5b9a\u4e49\u5728\u6587\u4ef6\u7684\u5f00\u5934\uff0c\u5982\u4e0b\uff1a ILLEGAL_CHARACTERS_RE = re . compile ( r '[\\000-\\010]|[\\013-\\014]|[\\016-\\037]' ) \u8fd9\u91cc\u9762\u7684\u975e\u6cd5\u5b57\u7b26\u90fd\u662f\u516b\u8fdb\u5236\uff0c\u53ef\u4ee5\u5230\u5bf9\u5e94\u7684ASCII\u8868\u4e2d\u67e5\u770b\uff0c\u7684\u786e\u90fd\u662f\u4e0d\u5e38\u89c1\u7684\u4e0d\u53ef\u663e\u793a\u5b57\u7b26\uff0c\u4f8b\u5982\u9000\u683c\uff0c\u54cd\u94c3\u7b49\uff0c\u5728\u6b64\u5904\u88ab\u5b9a\u4e49\u4e3aexcel\u4e2d\u7684\u975e\u6cd5\u5b57\u7b26\u3002\\ \u89e3\u51b3\u4e0a\u8ff0\u9519\u8bef\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u5982\u4e0b\uff1a\\ 1\uff0c\u65e2\u7136\u68c0\u6d4b\u5230excel\u4e2d\u5b58\u5728 [\\000-\\010]|[\\013-\\014]|[\\016-\\037] \u8fd9\u4e9b\u975e\u6cd5\u7684\u5b57\u7b26\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u6cd5\u5b57\u7b26\u66ff\u6362\u6389\u5373\u53ef\uff0c\u5728\u91cd\u65b0\u5199\u5165excel\u5373\u53ef\u3002\u5982\u4e0b\uff1a text = ILLEGAL_CHARACTERS_RE . sub ( r '' , text ) [3]: openpyxl.utils.escape \u2014 openpyxl 3.0.5 documentation def unescape ( value ): r \"\"\" Convert escaped strings to ASCII: _x000a_ == \\n \"\"\" ESCAPED_REGEX = re . compile ( \"_x([0-9A-Fa-f] {4} )_\" ) def _sub ( match ): \"\"\" Callback to unescape chars \"\"\" return chr ( int ( match . group ( 1 ), 16 )) if \"_x\" in value : value = ESCAPED_REGEX . sub ( _sub , value ) return value v0.6 \u65b0\u589e\u5408\u4f75\u6a94\u6848\u529f\u80fd v0.5 \u65b0\u589e train/test \u5207\u5272\u529f\u80fd v0.4.1 \u4fee\u6b63\u7576\u67d0\u500b\u6b04\u4f4d\u6f0f\u6a19\u6642\uff0c\u6703\u7522\u751ferror\u800c\u505c\u6b62\u8f38\u51fa \u89e3\u6cd5\uff1a\u5c07\u6f0f\u6a19\u7684\u6b04\u4f4d\u586b\u5165nan\uff0c\u65b9\u4fbf\u5176\u4ed6\u4eba\u4f7f\u7528\u8f38\u51fa\u5f8c\u7684\u6a94\u6848\u505a\u6aa2\u67e5 v0.4 \u65b0\u589e\u539f\u6587\u6b04\u4f4d(\u79fb\u9664tag \u6a19\u7c64) \u591a\u9078\u9078\u9805\u76f4\u63a5\u4ee5\u6587\u5b57\u683c\u5f0f\u7528\u9017\u865f\u5206\u9694\u5132\u5b58\u5728\u540c\u4e00\u683c\u4e2d \u53e5\u5b50\u8207\u5176\u6a19\u8a3b\u6524\u5e73\u6210\u5169\u6b04(Sent_Label, Sentence)\uff0c\u6c92\u6709\u53e5\u5b50\u6a19\u8a3b\u7684TextID \u5247\u6b64\u5169\u6b04\u7559\u7a7a\u767d v0.3 \u5c07\u5df2\u6a19\u8a3b\u6a94\u6848json \u6a94\u4e0b\u8f09\u56de\u4f86\u5f8c\uff0c\u8f49\u63db\u6210excel\u6a94 \u8f49\u63db\u5f8c\u7684 excel \u5167\u5bb9\u5206\u4e09\u9801\uff1a\u7b2c\u4e00\u9801\u662fcontents\uff0c\u5305\u542b\u4f5c\u8005\uff0c\u6a19\u984c\u3001\u5167\u6587\u3001\u6a19\u8a3b\u8005\u7b49\uff1b\u7b2c\u4e8c\u9801\u662fdocument label\uff0c\u4e5f\u5c31\u662f\u985e\u5225\u6a19\u8a3b\uff1b\u7b2c\u4e09\u9801\u662fsentence label \u53e5\u5b50\u6a19\u8a3b\uff0c\u56e0\u70ba\u53e5\u5b50\u6709\u5f88\u591a\u985e\uff0c\u6bcf\u985e\u6578\u91cf\u4e0d\u4e00\uff0c\u6211\u662f\u5c07\u4e4b\u6a6b\u5411\u5c55\u958b\u6210\u4e0d\u540c\u6b04","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"changelog"},{"location":"CHANGELOG/#v086","text":"exported title in json file use relative path","title":"v0.8.6"},{"location":"CHANGELOG/#v085","text":"Set default selection to the first option, and move input dir that contains .txt to the first option. Rename title to DataTag Helper (\u6a19\u8a3b\u8f49\u6a94\u5c0f\u5e6b\u624b)","title":"v0.8.5"},{"location":"CHANGELOG/#v084","text":"Move SqliteDict into main(), only when using GUI will call it. This is to avoid connecting to the sqlite when test CLI.","title":"v0.8.4"},{"location":"CHANGELOG/#v083","text":"Rename to DataTag_helper","title":"v0.8.3"},{"location":"CHANGELOG/#v082","text":"fix \"Missing optional dependency 'xlrd'.\" error, jsut use openpyxl. see: https://github.com/pandas-dev/pandas/issues/38424 called monkey patch for gooey gui components only when before entering GUI mode (to avoid non-gui import generate \"module not found\" error)","title":"v0.8.2"},{"location":"CHANGELOG/#v081","text":"second labeled json cleaner support input Multiple first labeled file","title":"v0.8.1"},{"location":"CHANGELOG/#v080","text":"add second_upload function add second labeled json cleaner and converter","title":"v0.8.0"},{"location":"CHANGELOG/#v072","text":"add SerialID column in contents tab","title":"v0.7.2"},{"location":"CHANGELOG/#v071","text":"fix numpy issue remove xlrd fix KeyError issue","title":"v0.7.1"},{"location":"CHANGELOG/#v070","text":"\u65b0\u589e\u6279\u6b21\u8655\u7406txt\u6a94\u529f\u80fd \u6ce8\u610f\uff1a\u7b2c\u4e00\u5c64\u7684txt\u6703\u81ea\u52d5\u5ffd\u7565\uff0c\u53ea\u6703\u52a0\u5165\u7b2c\u4e8c\u5c64\u4ee5\u4e0b\u7684txt \u5df2\u6a19\u8a3b\u8cc7\u6599\u8f49\u63db\u8f38\u51fa\u4e4b excel\u6a94\u65b0\u589e\u591a\u7a2e\u8996\u5716\uff1a a. \u4ee5\u6a19\u8a3b\u8005\u70ba\u55ae\u4f4d\uff0c\u4e00\u6b21\u5448\u73fe\u591a\u4f4d\u6a19\u8457\u8005\u4e4b\u9078\u9805\u53ca\u53e5\u5b50\u6a19\u8a3b\u7d50\u679c b. \u4ee5\u9078\u9805\u70ba\u55ae\u4f4d\uff0c\u6bd4\u8f03\u591a\u4f4d\u6a19\u8a3b\u8005\u4e4b\u7d50\u679c c. \u4ee5\u53e5\u5b50\u70ba\u55ae\u4f4d\uff0c\u6bd4\u8f03\u4e0d\u540c\u6a19\u8a3b\u8005\u7d50\u679c d. \u4ee5\u53e5\u5b50\u7de8\u865f\u70ba\u55ae\u4f4d\uff0c\u6bd4\u8f03\u4e0d\u540c\u6a19\u8a3b\u8005\u7d50\u679c e. \u5c07\u53e5\u5b50\u6309\u985e\u5225\u53ca\u7de8\u865f\u6c34\u5e73\u5c55\u958b\u5448\u73fe f. \u5c07\u53e5\u5b50\u6309\u985e\u5225\u6c34\u5e73\u5c55\u958b\u5448\u73fe \u672a\u6a19\u8a3b excel \u6a94\u8f49\u63db\u6210json \u6642\uff0c\u8f38\u51fa TextID mapping \u539f\u672c\u7684 TextID \u662f\u5f9e excel \u4e2d\u7684 Content \u5168\u6587\u8a08\u7b97md5 hash\u5f97\u5230\uff0c \u4f46\u662f\u56e0\u70baexcel\u4e2d\u53ef\u80fd\u5b58\u5728\u975e\u6cd5\u5b57\u5143\u53ca\u8868\u60c5\u7b26\u865f\uff0c \u5f8c\u4f86\u8f38\u51fa\u7684\u6587\u7ae0\u6703\u7d93\u904e\u79fb\u9664\u975e\u6cd5\u5b57\u5143\u53ca\u5c07\u8868\u60c5\u7b26\u865f\u8f49\u6210\u6587\u5b57\u7684\u8655\u7406\uff0c \u56e0\u6b64\u6709\u53ef\u80fd\u7121\u6cd5\u9084\u539f\u6210\u539f\u59cb\u7684\u5168\u6587\uff0c\u9020\u6210\u7121\u6cd5\u8a08\u7b97\u5f97\u5230\u539f\u59cb\u7684TextID\u3002 \u6240\u4ee5\u53e6\u5916\u8a08\u7b97\u4e00\u500bTextID \u662f\u900f\u904e\u5c07\u5168\u6587\u79fb\u9664\u975e\u6cd5\u5b57\u5143\u53ca\u8868\u60c5\u7b26\u865f\u5f8c\u518d\u8a08\u7b97md5\uff0c \u4e26\u4e14\u8f38\u51fa\u8655\u7406\u5f8c\u7684TextID \u8207\u539f\u59cbTextID \u7684\u5c0d\u61c9\u8868\uff0c \u5982\u6b64\u7576\u6587\u7ae0\u540c\u4e00\u7bc7\u6587\u7ae0\u7d93\u904e\u8655\u7406\u5f8c\uff0c\u56e0\u539f\u59cb TextID\u4e0d\u540c\u800c\u5c0d\u4e0d\u4e0a\u6642\uff0c \u53ef\u900f\u904e TextID mapping \u6bd4\u8f03\u8655\u7406\u5f8c\u7684TextID\uff0c \u61c9\u8a72\u5c31\u80fd\u5c0d\u56de\u540c\u4e00\u7bc7\u6587\u7ae0\u3002","title":"v0.7.0"},{"location":"CHANGELOG/#v061","text":"Symptom1: \u4fee\u5fa9 Windows \u4e0b\u5408\u4f75\u6a94\u6848\u51fa\u73fe openpyxl.utils.exceptions.IllegalCharacterError Rootcause: The previous generated excel file contains illegal character _x0008_, which is an OOXML escape character[1]. Solution: remove these illegal characters before write to excel 2 . Symptom2: \u4fee\u5fa9\u7576 json \u6a94\u4e2d\u6709 _xHHHH_ \u9019\u985e\u5b57\u4e32(\u4ee5\u7d14\u6587\u5b57\u5f62\u5f0f\u51fa\u73fe)\u6642\uff0c\u8f38\u51fa\u7684 excel \u6a94\u6703\u81ea\u52d5\u8f49\u63db\u6210 _xHHHH_ \u7684 unicode \u5b57\u5143(\u50c5\u5728 Windows \u4e0b\u767c\u751f\uff0c\u5728 linux \u4e0b\u6703\u5c07\u7d14\u6587\u5b57\u7684\u5e95\u7dda(underscore, _) \u518d\u8df3\u812b\u4e00\u6b21\uff0c\u8f49\u63db\u6210 _x005F_x0008_ [1] \u5132\u5b58\u5230 excel) Rootcause: maybe openpyxl bug? Solution: this is a workaround. when dataframe read from json file by read_json(), look for _xHHHH_ pattern in this dataframe, and unescape it[3] before write to excel. References [1]: VTBString Class (DocumentFormat.OpenXml.VariantTypes) | Microsoft Docs [ISO/IEC 29500-1 1st Edition] bstr (Basic String) This element defines a binary basic string variant type, which can store any valid Unicode character. Unicode characters that cannot be directly represented in XML as defined by the XML 1.0 specification, shall be escaped using the Unicode numerical character representation escape character format _xHHHH_, where H represents a hexadecimal character in the character's value. [ Example : The Unicode character 8 is not permitted in an XML 1.0 document, so it shall be escaped as _x0008_. end example ] To store the literal form of an escape sequence, the initial underscore shall itself be escaped (i.e. stored as _x005F_). [ Example : The string literal _x0008_ would be stored as _x005F_x0008_ . end example ] The possible values for this element are defined by the W3C XML Schema string datatype. \u8fdb\u5165python\u547d\u4ee4\u884c\u6a21\u5f0f\uff0c\u8f93\u5165\u5982\u4e0b\uff1a >>> import sys >>> help ( 'openpyxl' ) \u53ef\u5f97openpyxl\u6a21\u5757\u7684\u8def\u5f84\u5982\u4e0b /usr/local/lib/python2.7/site-packages/openpyxl \uff0c\u67e5\u770b\u8be5\u76ee\u5f55\u4e0b\u7684cell\u5b50\u76ee\u5f55\u4e2d\u7684cell.py\u6587\u4ef6\uff0c\u5b9a\u4f4d\u5230\u5177\u4f53\u9519\u8bef\u4ee3\u7801\u4e3a\uff1a def check_string ( self , value ): \"\"\"Check string coding, length, and line break character\"\"\" if value is None : return # convert to unicode string if not isinstance ( value , unicode ): value = unicode ( value , self . encoding ) value = unicode ( value ) # string must never be longer than 32,767 characters # truncate if necessary value = value [: 32767 ] if next ( ILLEGAL_CHARACTERS_RE . finditer ( value ), None ): raise IllegalCharacterError return value \u5176\u4e2d ILLEGAL_CHARACTERS_RE \u7684\u5b9a\u4e49\u5728\u6587\u4ef6\u7684\u5f00\u5934\uff0c\u5982\u4e0b\uff1a ILLEGAL_CHARACTERS_RE = re . compile ( r '[\\000-\\010]|[\\013-\\014]|[\\016-\\037]' ) \u8fd9\u91cc\u9762\u7684\u975e\u6cd5\u5b57\u7b26\u90fd\u662f\u516b\u8fdb\u5236\uff0c\u53ef\u4ee5\u5230\u5bf9\u5e94\u7684ASCII\u8868\u4e2d\u67e5\u770b\uff0c\u7684\u786e\u90fd\u662f\u4e0d\u5e38\u89c1\u7684\u4e0d\u53ef\u663e\u793a\u5b57\u7b26\uff0c\u4f8b\u5982\u9000\u683c\uff0c\u54cd\u94c3\u7b49\uff0c\u5728\u6b64\u5904\u88ab\u5b9a\u4e49\u4e3aexcel\u4e2d\u7684\u975e\u6cd5\u5b57\u7b26\u3002\\ \u89e3\u51b3\u4e0a\u8ff0\u9519\u8bef\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u5982\u4e0b\uff1a\\ 1\uff0c\u65e2\u7136\u68c0\u6d4b\u5230excel\u4e2d\u5b58\u5728 [\\000-\\010]|[\\013-\\014]|[\\016-\\037] \u8fd9\u4e9b\u975e\u6cd5\u7684\u5b57\u7b26\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u975e\u6cd5\u5b57\u7b26\u66ff\u6362\u6389\u5373\u53ef\uff0c\u5728\u91cd\u65b0\u5199\u5165excel\u5373\u53ef\u3002\u5982\u4e0b\uff1a text = ILLEGAL_CHARACTERS_RE . sub ( r '' , text ) [3]: openpyxl.utils.escape \u2014 openpyxl 3.0.5 documentation def unescape ( value ): r \"\"\" Convert escaped strings to ASCII: _x000a_ == \\n \"\"\" ESCAPED_REGEX = re . compile ( \"_x([0-9A-Fa-f] {4} )_\" ) def _sub ( match ): \"\"\" Callback to unescape chars \"\"\" return chr ( int ( match . group ( 1 ), 16 )) if \"_x\" in value : value = ESCAPED_REGEX . sub ( _sub , value ) return value","title":"v0.6.1"},{"location":"CHANGELOG/#v06","text":"\u65b0\u589e\u5408\u4f75\u6a94\u6848\u529f\u80fd","title":"v0.6"},{"location":"CHANGELOG/#v05","text":"\u65b0\u589e train/test \u5207\u5272\u529f\u80fd","title":"v0.5"},{"location":"CHANGELOG/#v041","text":"\u4fee\u6b63\u7576\u67d0\u500b\u6b04\u4f4d\u6f0f\u6a19\u6642\uff0c\u6703\u7522\u751ferror\u800c\u505c\u6b62\u8f38\u51fa \u89e3\u6cd5\uff1a\u5c07\u6f0f\u6a19\u7684\u6b04\u4f4d\u586b\u5165nan\uff0c\u65b9\u4fbf\u5176\u4ed6\u4eba\u4f7f\u7528\u8f38\u51fa\u5f8c\u7684\u6a94\u6848\u505a\u6aa2\u67e5","title":"v0.4.1"},{"location":"CHANGELOG/#v04","text":"\u65b0\u589e\u539f\u6587\u6b04\u4f4d(\u79fb\u9664tag \u6a19\u7c64) \u591a\u9078\u9078\u9805\u76f4\u63a5\u4ee5\u6587\u5b57\u683c\u5f0f\u7528\u9017\u865f\u5206\u9694\u5132\u5b58\u5728\u540c\u4e00\u683c\u4e2d \u53e5\u5b50\u8207\u5176\u6a19\u8a3b\u6524\u5e73\u6210\u5169\u6b04(Sent_Label, Sentence)\uff0c\u6c92\u6709\u53e5\u5b50\u6a19\u8a3b\u7684TextID \u5247\u6b64\u5169\u6b04\u7559\u7a7a\u767d","title":"v0.4"},{"location":"CHANGELOG/#v03","text":"\u5c07\u5df2\u6a19\u8a3b\u6a94\u6848json \u6a94\u4e0b\u8f09\u56de\u4f86\u5f8c\uff0c\u8f49\u63db\u6210excel\u6a94 \u8f49\u63db\u5f8c\u7684 excel \u5167\u5bb9\u5206\u4e09\u9801\uff1a\u7b2c\u4e00\u9801\u662fcontents\uff0c\u5305\u542b\u4f5c\u8005\uff0c\u6a19\u984c\u3001\u5167\u6587\u3001\u6a19\u8a3b\u8005\u7b49\uff1b\u7b2c\u4e8c\u9801\u662fdocument label\uff0c\u4e5f\u5c31\u662f\u985e\u5225\u6a19\u8a3b\uff1b\u7b2c\u4e09\u9801\u662fsentence label \u53e5\u5b50\u6a19\u8a3b\uff0c\u56e0\u70ba\u53e5\u5b50\u6709\u5f88\u591a\u985e\uff0c\u6bcf\u985e\u6578\u91cf\u4e0d\u4e00\uff0c\u6211\u662f\u5c07\u4e4b\u6a6b\u5411\u5c55\u958b\u6210\u4e0d\u540c\u6b04","title":"v0.3"},{"location":"TROUBLESHOOTING/","text":"Troubleshooting PyInstaller setuptools 45.0.0 may cause PyInstaller 3.3 packaged executable fail to launch see: setuptools 45.0.0 may cause PyInstaller 3.3 packaged executable fail to launch \u00b7 Issue #1963 \u00b7 pypa/setuptools Fixed by adding a hidden import: a = Analysis ( ... , hiddenimports = [ 'pkg_resources.py2_warn' ], ... ) INTERNAL ERROR: cannot create temporary directory! maybe the problem of pyinstaller under wine... PyInstaller 3.6 breaks WINE compatibility when using onefile \u00b7 Issue #4628 \u00b7 pyinstaller/pyinstaller Just downgrade to pyinstaller 3.5 anything works fine, no matter on Wine or on Windows. How do you resolve 'hidden imports not found!' warnings in pyinstaller for scipy? python - How do you resolve 'hidden imports not found!' warnings in pyinstaller for scipy? - Stack Overflow You need to go into the hook-scipy.py (or create one) and have it look like this: from PyInstaller.utils.hooks import collect_submodules from PyInstaller.utils.hooks import collect_data_files hiddenimports = collect_submodules ( 'scipy' ) datas = collect_data_files ( 'scipy' ) then go into the hook-sklearn.metrics.cluster.py file and modify it to look like this: from PyInstaller.utils.hooks import collect_data_files hiddenimports = [ 'sklearn.utils.sparsetools._graph_validation' , 'sklearn.utils.sparsetools._graph_tools' , 'sklearn.utils.lgamma' , 'sklearn.utils.weight_vector' ] datas = collect_data_files ( 'sklearn' ) you can specify hooks file dir used in --additional-hooks-dir in the spec file's hookspath -- allenyllee Gooey Required arguments shown as optional Required arguments shown as optional \u00b7 Issue #447 \u00b7 chriskiehl/Gooey Here is code to reproduce: from gooey import Gooey , GooeyParser @Gooey def main (): p = GooeyParser () p . add_argument ( '-s' , required = True , widget = 'FileChooser' ) p . add_argument ( '-l' , widget = 'DirChooser' ) p . parse_args () if __name__ == '__main__' : main () It still exists on 1.0.3-release as well. However, note that the arguments are not treated as optional; it's only the title \"optional argument\" which bothers you. As a workaround, you can create a single argument_group (optionally name it.) like this: from gooey import Gooey , GooeyParser @Gooey def main (): p = GooeyParser () g = p . add_argument_group () g . add_argument ( '-s' , required = True , widget = 'FileChooser' ) g . add_argument ( '-l' , widget = 'DirChooser' ) p . parse_args () if __name__ == '__main__' : main () Required non-positional fields show as optional \u00b7 Issue #368 \u00b7 chriskiehl/Gooey Support non-boolean mutually exclusive options \u00b7 Issue #208 \u00b7 chriskiehl/Gooey Docker setup How to activate a Conda environment in your Dockerfile see: Activating a Conda environment in your Dockerfile The solution I use is to add # Make RUN commands use the new environment: SHELL [ \"conda\" , \"run\" , \"-n\" , \"myenv\" , \"/bin/bash\" , \"-c\" ] after conda create and before any conda install and at the end of dockerfile, add # Initialize conda in bash config fiiles: RUN conda init bash RUN echo \"conda activate DataTag_helper\" >> ~/.bashrc this will setup automatic conda activate myenv every time when you have login shell. How to use xvfb to execute command headlessly in dockerfile see: xvfb\u7684\u5b89\u88c5\u3001\u914d\u7f6e\u3001\u8fd0\u884c\uff08Linux\uff09_Nobody_Wang\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_xvfb I use below code to headlessly run python installer under the wine: xvfb-run --server-args = \"-screen 0, 1024x768x24\" wine python-3.6.8-amd64.exe /quiet InstallAllUsers = 1 PrependPath = 1","title":"Troubleshooting"},{"location":"TROUBLESHOOTING/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"TROUBLESHOOTING/#pyinstaller","text":"","title":"PyInstaller"},{"location":"TROUBLESHOOTING/#setuptools-4500-may-cause-pyinstaller-33-packaged-executable-fail-to-launch","text":"see: setuptools 45.0.0 may cause PyInstaller 3.3 packaged executable fail to launch \u00b7 Issue #1963 \u00b7 pypa/setuptools Fixed by adding a hidden import: a = Analysis ( ... , hiddenimports = [ 'pkg_resources.py2_warn' ], ... )","title":"setuptools 45.0.0 may cause PyInstaller 3.3 packaged executable fail to launch"},{"location":"TROUBLESHOOTING/#internal-error-cannot-create-temporary-directory","text":"maybe the problem of pyinstaller under wine... PyInstaller 3.6 breaks WINE compatibility when using onefile \u00b7 Issue #4628 \u00b7 pyinstaller/pyinstaller Just downgrade to pyinstaller 3.5 anything works fine, no matter on Wine or on Windows.","title":"INTERNAL ERROR: cannot create temporary directory!"},{"location":"TROUBLESHOOTING/#how-do-you-resolve-hidden-imports-not-found-warnings-in-pyinstaller-for-scipy","text":"python - How do you resolve 'hidden imports not found!' warnings in pyinstaller for scipy? - Stack Overflow You need to go into the hook-scipy.py (or create one) and have it look like this: from PyInstaller.utils.hooks import collect_submodules from PyInstaller.utils.hooks import collect_data_files hiddenimports = collect_submodules ( 'scipy' ) datas = collect_data_files ( 'scipy' ) then go into the hook-sklearn.metrics.cluster.py file and modify it to look like this: from PyInstaller.utils.hooks import collect_data_files hiddenimports = [ 'sklearn.utils.sparsetools._graph_validation' , 'sklearn.utils.sparsetools._graph_tools' , 'sklearn.utils.lgamma' , 'sklearn.utils.weight_vector' ] datas = collect_data_files ( 'sklearn' ) you can specify hooks file dir used in --additional-hooks-dir in the spec file's hookspath -- allenyllee","title":"How do you resolve 'hidden imports not found!' warnings in pyinstaller for scipy?"},{"location":"TROUBLESHOOTING/#gooey","text":"","title":"Gooey"},{"location":"TROUBLESHOOTING/#required-arguments-shown-as-optional","text":"Required arguments shown as optional \u00b7 Issue #447 \u00b7 chriskiehl/Gooey Here is code to reproduce: from gooey import Gooey , GooeyParser @Gooey def main (): p = GooeyParser () p . add_argument ( '-s' , required = True , widget = 'FileChooser' ) p . add_argument ( '-l' , widget = 'DirChooser' ) p . parse_args () if __name__ == '__main__' : main () It still exists on 1.0.3-release as well. However, note that the arguments are not treated as optional; it's only the title \"optional argument\" which bothers you. As a workaround, you can create a single argument_group (optionally name it.) like this: from gooey import Gooey , GooeyParser @Gooey def main (): p = GooeyParser () g = p . add_argument_group () g . add_argument ( '-s' , required = True , widget = 'FileChooser' ) g . add_argument ( '-l' , widget = 'DirChooser' ) p . parse_args () if __name__ == '__main__' : main () Required non-positional fields show as optional \u00b7 Issue #368 \u00b7 chriskiehl/Gooey Support non-boolean mutually exclusive options \u00b7 Issue #208 \u00b7 chriskiehl/Gooey","title":"Required arguments shown as optional"},{"location":"TROUBLESHOOTING/#docker-setup","text":"","title":"Docker setup"},{"location":"TROUBLESHOOTING/#how-to-activate-a-conda-environment-in-your-dockerfile","text":"see: Activating a Conda environment in your Dockerfile The solution I use is to add # Make RUN commands use the new environment: SHELL [ \"conda\" , \"run\" , \"-n\" , \"myenv\" , \"/bin/bash\" , \"-c\" ] after conda create and before any conda install and at the end of dockerfile, add # Initialize conda in bash config fiiles: RUN conda init bash RUN echo \"conda activate DataTag_helper\" >> ~/.bashrc this will setup automatic conda activate myenv every time when you have login shell.","title":"How to activate a Conda environment in your Dockerfile"},{"location":"TROUBLESHOOTING/#how-to-use-xvfb-to-execute-command-headlessly-in-dockerfile","text":"see: xvfb\u7684\u5b89\u88c5\u3001\u914d\u7f6e\u3001\u8fd0\u884c\uff08Linux\uff09_Nobody_Wang\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_xvfb I use below code to headlessly run python installer under the wine: xvfb-run --server-args = \"-screen 0, 1024x768x24\" wine python-3.6.8-amd64.exe /quiet InstallAllUsers = 1 PrependPath = 1","title":"How to use xvfb to execute command headlessly in dockerfile"},{"location":"docs/quick_start/api/","text":"","title":"API"},{"location":"docs/quick_start/cli/","text":"","title":"CLI"},{"location":"docs/quick_start/configuration/","text":"","title":"Configuration"},{"location":"docs/quick_start/installation/","text":"","title":"Installation"},{"location":"reference/DataTag_helper/","text":"Module DataTag_helper None None View Sourceusr/bin/env python3 # -*- coding:utf-8 -*- ### # File: /lib/AIClerk_helper.py # Project: suidice-text-detection # Created Date: Monday, May 4th 2020, 3:06:41 pm # Author: Allenyl(allen7575@gmail.com>) # ----- # Last Modified: Thursday, January 1st 1970, 12:00:00 am # Modified By: Allenyl(allen7575@gmail.com) # ----- # Copyright 2018 - 2020 Allenyl Copyright, Allenyl Company # ----- # license: # All shall be well and all shall be well and all manner of things shall be well. # We're doomed! # ------------------------------------ # HISTORY: # Date By Comments # ---------- --- --------------------------------------------------------- ### ## Non-ASCII output hangs execution in PyInstaller packaged app \u00b7 Issue #520 \u00b7 chriskiehl/Gooey ## https://github.com/chriskiehl/Gooey/issues/520 import codecs import copy import hashlib import json import os import platform import re import sys from collections import Counter , OrderedDict , defaultdict from functools import reduce from pathlib import Path # from sklearn.utils import shuffle import emoji import numpy as np import pandas as pd from chardet.universaldetector import UniversalDetector # import argparse from gooey import Gooey , GooeyParser from openpyxl.styles import Font from sklearn.model_selection import StratifiedShuffleSplit # from lib.AIClerk_helper import to_AI_clerk_batch_upload_json if sys . stdout . encoding != \"UTF-8\" : sys . stdout = codecs . getwriter ( \"utf-8\" )( sys . stdout . buffer , \"strict\" ) if sys . stderr . encoding != \"UTF-8\" : sys . stderr = codecs . getwriter ( \"utf-8\" )( sys . stderr . buffer , \"strict\" ) # use sqlite db to share data between gui and cli # because gui will excute this file with cli args to finish its work, # it needs a way to know what data is change in gui screen. from sqlitedict import SqliteDict MY_DB_FILE = \"./my_db.sqlite\" # mydict = SqliteDict(MY_DB_FILE, autocommit=True) # try: # mydict[\"global_choies\"] # except KeyError: # mydict[\"global_choies\"] = [] # share args across different event callbacks global_args = defaultdict ( list ) def patch_gooey_gui_component ( mydict ): \"\"\"Monkey patch gooey's gui components, like: Dropdown, FileChooser, GooeyApplication,...etc. To avoid `ImportError: libXxf86vm.so.1` while import, we enclose patch code into a function, and call it when we are going into GUI mode. Returns: [type]: [description] \"\"\" import wx # from gooey.gui.lang.i18n import _ ###### ## [Feature request: Allow general callbacks for validation \u00b7 Issue #293 \u00b7 chriskiehl/Gooey] ## (https://github.com/chriskiehl/Gooey/issues/293) # from gooey.gui.components.widgets.bases import TextContainer # oldGetValue = TextContainer.getValue # # def newGetValue(self): # result = oldGetValue(self) # userValidator = self._options['validator']['callback'] # message = self._options['validator']['message'] # value = self.getWidgetValue() # validates = userValidator(value) # result['test'] = False # result['error'] = 'test' # return result # # TextContainer.getValue = newGetValue ###### # [Gooey/dropdown.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/dropdown.py) from gooey.gui.components.widgets.dropdown import Dropdown Dropdown_oldGetWidget = Dropdown . getWidget # from gooey.gui import formatters # def newFormatOutput(self, metadata, value): # print(\"debug2\") # print(\"metadata\", metadata) # print(\"value\", value) # return formatters.dropdown(metadata, value) # def newSetValue(self, value): # ## +1 to offset the default placeholder value # index = self._meta['choices'].index(value) + 1 # print(\"debug\", self._meta['choices']) # self.widget.SetSelection(index) # def newGetWidgetValue(self): # value = self.widget.GetValue() # # filter out the extra default option that's # # appended during creation # print(value) # if value == _('select_option'): # return None # return value def Dropdown_newGetWidget ( self , parent , * args , ** options ): widget = Dropdown_oldGetWidget ( self , parent , * args , ** options ) # [wxPython ComboBox & Choice\u7c7b - WxPython\u6559\u7a0b\u2122] # (https://www.yiibai.com/wxpython/wx_combobox_choice_class.html) # [wx.ComboBox \u2014 wxPython Phoenix 4.1.1a1 documentation] # (https://wxpython.org/Phoenix/docs/html/wx.ComboBox.html) widget . Bind ( wx . EVT_COMBOBOX_DROPDOWN , self . OnCombo ) return widget def Dropdown_newOnCombo ( self , event ): def get_choices ( input_file ): try : # specify engine use 'openpyxl' to avoid not found xlrd error new_choices = list ( pd . read_excel ( input_file , sheet_name = \"document_label\" , index_col = 0 , nrows = 0 , engine = \"openpyxl\" , ) ) message = \"\" self . setErrorString ( message ) self . showErrorString ( False ) # force refresh parent screen # python - Update/Refresh Dynamically\u2013Created WxPython Widgets - Stack Overflow # https://stackoverflow.com/questions/10368948/update-refresh-dynamically-created-wxpython-widgets self . GetParent () . Layout () except Exception as e : # message = \"No sheet named 'document_label'\" # show actual exception message for easier debug message = repr ( e ) # print(message) self . setErrorString ( message ) self . showErrorString ( True ) # force refresh parent screen # python - Update/Refresh Dynamically\u2013Created WxPython Widgets - Stack Overflow # https://stackoverflow.com/questions/10368948/update-refresh-dynamically-created-wxpython-widgets self . GetParent () . Layout () new_choices = [] return new_choices current_input_file = global_args [ \"input_file\" ] try : self . previous_input_file except Exception : self . previous_input_file = \"\" if self . previous_input_file != current_input_file : self . new_choices = get_choices ( current_input_file ) self . previous_input_file = current_input_file # save self.new_choices into sqlite db for later access mydict [ \"global_choies\" ] = self . new_choices # [python - Dynamically change the choices in a wx.ComboBox() - Stack Overflow] # (https://stackoverflow.com/questions/682923/dynamically-change-the-choices-in-a-wx-combobox) self . setOptions ( self . new_choices ) Dropdown . getWidget = Dropdown_newGetWidget Dropdown . OnCombo = Dropdown_newOnCombo # Dropdown.setValue = newSetValue # Dropdown.getWidgetValue = newGetWidgetValue # Dropdown.formatOutput = newFormatOutput # [Gooey/choosers.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/choosers.py) # [Gooey/chooser.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/core/chooser.py#L65) # [Gooey/chooser.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/core/chooser.py#L13) # [Gooey/text_input.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/core/text_input.py#L7) # [Gooey/bases.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/bases.py#L170) from gooey.gui.components.widgets.core.chooser import FileChooser FileChooser_old_init = FileChooser . __init__ ## monkey patch __init__ def FileChooser_new_init ( self , parent , * args , ** kwargs ): FileChooser_old_init ( self , parent , * args , ** kwargs ) # bind event wx.EVT_TEXT to trigger self.OnFileChooser when text change # [wx.TextCtrl \u2014 wxPython Phoenix 4.1.1a1 documentation] # (https://wxpython.org/Phoenix/docs/html/wx.TextCtrl.html) # [wxPython - TextCtrl Class - Tutorialspoint] # (https://www.tutorialspoint.com/wxpython/wx_textctrl_class.htm) self . widget . Bind ( wx . EVT_TEXT , self . OnFileChooser ) ## monkey patch OnFileChooser def FileChooser_newOnFileChooser ( self , event ): # read text area value to global_args global_args [ \"input_file\" ] = self . widget . getValue () # print(global_args) FileChooser . __init__ = FileChooser_new_init FileChooser . OnFileChooser = FileChooser_newOnFileChooser # [Gooey/application.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/containers/application.py#L29) from gooey.gui.containers.application import GooeyApplication ## monkey patch onClose def newOnClose ( self , * args , ** kwargs ): \"\"\"Cleanup the top level WxFrame and shutdown the process\"\"\" self . Destroy () # print(\"onClose\") # remove db file when close # [sqlite - Python PermissionError: [WinError 32] The process cannot access the file..... but my file is closed - Stack Overflow] # (https://stackoverflow.com/questions/59482990/python-permissionerror-winerror-32-the-process-cannot-access-the-file-bu) mydict . close () os . remove ( MY_DB_FILE ) sys . exit () GooeyApplication . onClose = newOnClose # navigation option must be upper cased 'TABBED', instead of 'Tabbed' @Gooey ( program_name = \"DataTag Helper (\u6a19\u8a3b\u8f49\u6a94\u5c0f\u5e6b\u624b) v0.8.6\" , navigation = \"TABBED\" , tabbed_groups = False , default_size = ( 525 , 670 ), ) def parse_args ( mydict , args = None ): if args is None : args = sys . argv [ 1 :] # parser = argparse.ArgumentParser() parser = GooeyParser () subs = parser . add_subparsers ( help = \"commands\" , dest = \"command\" ) ### for original file sub_parser1 = subs . add_parser ( \"original\" , prog = \"\u672a\u6a19\u8a3b\u539f\u59cb\u6a94\u6848\" , help = \"\u672a\u6a19\u8a3b\u539f\u59cb\u6a94\u6848\" ) sub_parser1_1 = sub_parser1 . add_argument_group ( \"input file(s)\" , \"choose unlabeled file(s)\" , gooey_options = { \"show_border\" : True , \"show_underline\" : True , \"columns\" : 1 }, ) # add default selection option # https://github.com/chriskiehl/Gooey/issues/590#issue-650474511 mutex_sub_parser1 = sub_parser1_1 . add_mutually_exclusive_group ( required = True , gooey_options = { \"show_border\" : True , \"show_underline\" : True , \"columns\" : 1 , 'initial_selection' : 0 }, ) #### input txt files mutex_sub_parser1 . add_argument ( \"-d\" , \"--input-dir\" , help = \"dir that contains input files(.txt)\" , dest = \"input_dir\" , default = None , widget = \"DirChooser\" , ) #### input excel files mutex_sub_parser1 . add_argument ( \"-i\" , \"--input_file\" , help = \"input filename (excel)\" , dest = \"input_file\" , default = None , widget = \"FileChooser\" , ) sub_parser1_2 = sub_parser1 . add_argument_group ( \"options\" , \"only works for input excel file\" , gooey_options = { \"show_border\" : True , \"show_underline\" : True , \"columns\" : 2 }, ) sub_parser1_2 . add_argument ( \"--emojilize\" , help = \"turn text to emoji (uncheck to reverse)\" , dest = \"emojilize\" , action = \"store_true\" , ) sub_parser1_2 . set_defaults ( emojilize = False ) sub_parser1_2 . add_argument ( \"--to-excel\" , help = \"output excel file (uncheck to output json)\" , dest = \"to_excel\" , action = \"store_true\" , ) sub_parser1_2 . set_defaults ( to_excel = False ) ### for labeled file sub_parser2 = subs . add_parser ( \"labeled\" , prog = \"\u5df2\u6a19\u8a3b\u6a94\u6848\" , help = \"\u5df2\u6a19\u8a3b\u6a94\u6848\" ) sub_parser2 = sub_parser2 . add_argument_group ( \"labeled file to excel\" , \"choose the labeled file which want to be convert to Excel file(s)\" , gooey_options = { \"show_border\" : True , \"show_underline\" : True , \"columns\" : 1 }, ) sub_parser2 . add_argument ( \"-i\" , \"--input_file\" , help = \"input filename (json)\" , dest = \"input_file\" , default = None , widget = \"FileChooser\" , ) ### for labeled file want to second upload sub_parser2_1 = subs . add_parser ( \"second_upload\" , prog = \"\u6a19\u8a3b\u4e8c\u6b21\u4e0a\u50b3\" , help = \"\u5df2\u6a19\u8a3b\u6a94\u6848\u4e8c\u6b21\u4e0a\u50b3\" ) sub_parser2_1 = sub_parser2_1 . add_argument_group ( \"second upload\" , \"choose the labeled file which want to be second upload (for double check purpose)\" , gooey_options = { \"show_border\" : True , \"show_underline\" : True , \"columns\" : 1 }, ) sub_parser2_1 . add_argument ( \"-i\" , \"--input_file\" , help = \"input filename (json)\" , dest = \"input_file\" , default = None , widget = \"FileChooser\" , ) ### for second labeled file convert sub_parser2_2 = subs . add_parser ( \"second_labeled\" , prog = \"\u4e8c\u6b21\u6a19\u8a3b\u8f49\u63db\" , help = \"\u4e8c\u6b21\u6a19\u8a3b\u8f49\u63db\" ) sub_parser2_2 = sub_parser2_2 . add_argument_group ( \"second labeled convertion\" , \"choose the first and second labeled files which wants to be converted to final json\" , gooey_options = { \"show_border\" : True , \"show_underline\" : True , \"columns\" : 1 }, ) sub_parser2_2 . add_argument ( \"-i1\" , \"--input_file_1\" , nargs = \"*\" , help = \"choose multiple files (first labeled json)\" , dest = \"input_file_1\" , default = None , widget = \"MultiFileChooser\" , ) sub_parser2_2 . add_argument ( \"-i2\" , \"--input_file_2\" , help = \"input filename (second labeled json)\" , dest = \"input_file_2\" , default = None , widget = \"FileChooser\" , ) ### concat files sub_parser3 = subs . add_parser ( \"concat\" , prog = \"\u5408\u4f75\u6a94\u6848\" , help = \"\u5408\u4f75\u6a94\u6848\" ) sub_parser3 = sub_parser3 . add_argument_group ( \"\" ) sub_parser3 . add_argument ( \"-i\" , \"--input_file\" , help = \"input filenames (excel)\" , dest = \"input_files\" , default = None , widget = \"MultiFileChooser\" , ) ### for random tran/test split sub_parser4 = subs . add_parser ( \"split\" , prog = \"\u5206\u5272\u6a94\u6848\" , help = \"\u5206\u5272\u6a94\u6848\" ) sub_parser4 = sub_parser4 . add_argument_group ( \"\" ) sub_parser4 . add_argument ( \"-i\" , \"--input_file\" , help = \"input filename (excel)\" , dest = \"input_file\" , default = None , widget = \"FileChooser\" , ) sub_parser4 . add_argument ( \"-y\" , \"--y_column\" , help = \"y column\" , dest = \"y_col\" , default = None , widget = \"Dropdown\" , choices = mydict [ \"global_choies\" ], ) # parser.add_argument('--type', '-t', choices=getLob()) # args, unknown = parser.parse_known_args() args = parser . parse_args ( args ) return args def to_AI_clerk_batch_upload_json ( dataframe , save_path ): def to_article_dict ( x ): return { \"Title\" : x . Title . tolist ()[ 0 ], \"Content\" : x . Content . tolist ()[ 0 ], \"Author\" : x . Author . tolist ()[ 0 ], \"Time\" : x . Time . tolist ()[ 0 ], } print ( \"number of entries: {} \" . format ( len ( dataframe ))) dup_id = dataframe . duplicated ([ \"TextID\" ], keep = False ) print ( \"duplicated entries: {} \" . format ( len ( dataframe [ dup_id ]))) print ( dataframe [ dup_id ]) samples_dict = dataframe . groupby ([ \"TextID\" ]) . apply ( to_article_dict ) . to_dict () print ( \"keep first, drop duplicated!\" ) content_length_lower_threshold = 100 long_id = dataframe [ \"Content\" ] . apply ( lambda x : True if len ( x ) < content_length_lower_threshold else False ) print ( \"number of entries which Content shorter then {} words: {} \" . format ( content_length_lower_threshold , len ( dataframe [ long_id ]) ) ) print ( \"no drop, just show information.\" ) sample_articles = defaultdict ( defaultdict ) sample_articles [ \"Articles\" ] . update ( samples_dict ) print ( \"number of remaining entries: {} \" . format ( len ( sample_articles [ \"Articles\" ]))) # output articles.json with open ( save_path , \"w\" , encoding = \"utf-8\" ) as outfile : json . dump ( sample_articles , outfile , ensure_ascii = False , indent = 4 ) # read ouputed samples to test # with open('./suicide_text_sample.json', 'r') as outfile: # temp_dict = json.load(outfile) # try: # display(temp_dict) # except: # pass def get_TextID ( df ): return df . apply ( lambda x : hashlib . md5 ( x [ 0 ] . encode ( \"utf-8\" )) . hexdigest ()[: 10 ], axis = 1 ) # ### \u6e05\u7406\u8cc7\u6599\u683c\u5f0f def clean_data ( df ): empty_entries = df [ \"Content\" ] . isnull () print ( \"number of empty content entries: {} \" . format ( len ( df [ empty_entries ]))) df_cleaned = df [ ~ empty_entries ] . copy () if len ( df [ empty_entries ]): print ( \"drop empty!\" ) drop_columns = df_cleaned . columns . str . contains ( \"Unnamed\" ) # print(any(df_cleaned.columns.str.contains(\"^ID$\"))) # if not any(df_cleaned.columns.str.contains(\"^TextID$\")): leave_columns = df_cleaned . columns [ ~ drop_columns ] . tolist () # df_cleaned['ID'] = df_cleaned[[\"Content\"]].apply(lambda x: hashlib.md5(x[0].encode('utf-8')).hexdigest()[:10],axis=1) df_cleaned = df_cleaned [ leave_columns ] # print(df_cleaned.head()) df_cleaned = df_cleaned . sort_values ( \"TextID\" ) . reset_index ( drop = True ) df_cleaned [ \"Author\" ] = df_cleaned . apply ( lambda x : x . Poster + \"/\" + x . Gender , axis = 1 ) df_cleaned [ \"Time\" ] = df_cleaned . apply ( lambda x : str ( x . Date ) + \"/\" + str ( x . Time ), axis = 1 ) return df_cleaned def emoji_to_text ( df ): df_deemojilized = df . copy () ## \u8f49\u63db emoji \u683c\u5f0f\u6210 :emoji: ## python - How to replace emoji to word in a text? - Stack Overflow ## https://stackoverflow.com/questions/57580288/how-to-replace-emoji-to-word-in-a-text df_deemojilized [ \"Content\" ] = df [[ \"Content\" ]] . apply ( lambda x : emoji . demojize ( x [ 0 ]), axis = 1 ) df_deemojilized [ \"Title\" ] = df [[ \"Title\" ]] . apply ( lambda x : emoji . demojize ( x [ 0 ]), axis = 1 ) return df_deemojilized def text_to_emoji ( df ): df_emojilized = df . copy () ## \u5c07:emoji: \u63db\u56de unicode character df_emojilized [ \"Content\" ] = df [[ \"Content\" ]] . apply ( lambda x : emoji . emojize ( x [ 0 ]), axis = 1 ) df_emojilized [ \"Title\" ] = df [[ \"Title\" ]] . apply ( lambda x : emoji . emojize ( x [ 0 ]), axis = 1 ) return df_emojilized def reorder_column ( columns_list , selected_column_name , insert_before_column_name = None ): \"\"\" columns_list: the list of columns to be reordered selected_column_name: the column name which wants to be inserted to the point before column `insert_before_column_name` insert_before_column_name: the column name which act as fix point relative to the `selected_column_name` \"\"\" columns_list = copy . copy ( columns_list ) selected_index = columns_list . index ( selected_column_name ) selected_item = columns_list . pop ( selected_index ) # drop selected column when insert_before_column_name is infinity if insert_before_column_name is np . inf : return columns_list # print(insert_before_column_name is float('inf')) # insert to the end of column list when insert_before_column_name is None if insert_before_column_name is None : insert_point_index = len ( columns_list ) else : insert_point_index = columns_list . index ( insert_before_column_name ) columns_list . insert ( insert_point_index , selected_item ) return columns_list def extract_dict ( df , id_column_list , dict_column ): df_tmp = df [ id_column_list + [ dict_column ]] . set_index ( id_column_list ) df_tmp = pd . DataFrame ( df_tmp . apply ( lambda x : { \"empty\" : \"nan\" } if len ( x [ 0 ]) == 0 else x [ 0 ], axis = 1 ) ) df_tmp = df_tmp . apply ( lambda x : pd . DataFrame . from_dict ( x [ 0 ], orient = \"index\" ) . stack (), axis = 1 ) df_tmp = df_tmp . reset_index ( level = id_column_list ) return df_tmp # these illegal characters is represented by octal escape # [Regular Expressions Reference: Special and Non-Printable Characters] # (https://www.regular-expressions.info/refcharacters.html) # [(1\u6761\u6d88\u606f)openpyxl.utils.exceptions.IllegalCharacterError \u9519\u8bef\u539f\u56e0\u5206\u6790\u53ca\u89e3\u51b3\u529e\u6cd5_\u6751\u4e2d\u5c11\u5e74\u7684\u4e13\u680f-CSDN\u535a\u5ba2] # (https://blog.csdn.net/javajiawei/article/details/97147219) ILLEGAL_CHARACTERS_RE = re . compile ( r \"[\\000-\\010]|[\\013-\\014]|[\\016-\\037]\" ) # [openpyxl.utils.escape \u2014 openpyxl 3.0.5 documentation] # (https://openpyxl.readthedocs.io/en/stable/_modules/openpyxl/utils/escape.html) ESCAPED_REGEX = re . compile ( \"_x([0-9A-Fa-f] {4} )_\" ) def unescape_OOXML ( string ): def remove_character ( char ): print ( \"removed illegal char!\" ) return r \"\" def _sub ( match ): \"\"\" Callback to unescape chars \"\"\" char = chr ( int ( match . group ( 1 ), 16 )) # [Convert regular Python string to raw string - Stack Overflow] # (https://stackoverflow.com/questions/4415259/convert-regular-python-string-to-raw-string) # [python - Pythonic way to do base conversion - Stack Overflow] # (https://stackoverflow.com/questions/28824874/pythonic-way-to-do-base-conversion) print ( \"found char {} , which int in octal number is: {} \" . format ( char . encode ( \"unicode_escape\" ), oct ( ord ( char )) ) ) # remove carriage return if char == \" \\r \" : print ( \"removed!\" ) char = \"\" else : # remove illegal characters char = ILLEGAL_CHARACTERS_RE . sub ( remove_character , char ) return char string = ESCAPED_REGEX . sub ( _sub , string ) return string ## [pandas - How to remove illegal characters so a dataframe can write to Excel - Stack Overflow] ## (https://stackoverflow.com/questions/42306755/how-to-remove-illegal-characters-so-a-dataframe-can-write-to-excel) def remove_illegal_characters ( dataframe ): # dataframe = dataframe.applymap(lambda x: x.encode('unicode_escape').decode('utf-8') if isinstance(x, str) else x) dataframe = dataframe . applymap ( lambda x : ILLEGAL_CHARACTERS_RE . sub ( r \"\" , x ) if isinstance ( x , str ) else x ) return dataframe def to_excel_AI_clerk_labeled_data ( dataframe , save_path ): ## unescape OOXML string dataframe = dataframe . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) ## remove illegal characters dataframe = remove_illegal_characters ( dataframe ) df1 = ( dataframe . T . sort_values ([ \"TextID\" , \"Annotator\" ]) . rename_axis ( \"SerialID\" ) . reset_index () ) df1 = df1 [ sorted ( df1 . columns )] columns_list = list ( df1 . columns ) print ( columns_list ) columns_list = reorder_column ( columns_list , \"TextID\" , \"Annotator\" ) columns_list = reorder_column ( columns_list , \"SerialID\" , \"TextID\" ) columns_list = reorder_column ( columns_list , \"Title\" , \"Content\" ) columns_list = reorder_column ( columns_list , \"Author\" , \"Title\" ) columns_list = reorder_column ( columns_list , \"TextTime\" , \"Comment\" ) print ( columns_list ) df2 = df1 [ columns_list ] ########### extract document label ############# df_document_label = extract_dict ( df2 , [ \"TextID\" , \"Annotator\" ], \"Summary\" ) ## reduce multi-selection option into string def multi_selection_to_string ( option_columns ): # print(option_columns) option_columns_list = list ( filter ( lambda y : pd . notnull ( y ), option_columns )) # check if option_columns_list is empty or [''] if len ( option_columns_list ) == 0 : result = np . nan elif len ( option_columns_list ) == 1 and option_columns_list [ 0 ] == \"\" : result = np . nan else : result = reduce ( lambda a , b : a + \", \" + b , option_columns_list ) if result == \"\" : # print(list(option_columns)) # print(len(option_columns_list)) result = np . nan return result ### use ordered set to keep columns order od = OrderedDict ( df_document_label . columns . to_flat_index ()) option_columns_list = list ( od . keys ()) df_document_label_tmp = pd . DataFrame ( columns = option_columns_list ) df_document_label_tmp [ \"TextID\" ] = df_document_label [ \"TextID\" ] df_document_label_tmp [ \"Annotator\" ] = df_document_label [ \"Annotator\" ] option_columns_list . remove ( \"TextID\" ) option_columns_list . remove ( \"Annotator\" ) ### flatten all option columns for option_column in option_columns_list : df_document_label_tmp [ option_column ] = df_document_label [ option_column ] . apply ( lambda x : multi_selection_to_string ( x ), axis = 1 ) df_document_label = pd . merge ( df2 [[ \"TextID\" , \"Annotator\" ]], df_document_label_tmp , how = \"left\" , on = [ \"TextID\" , \"Annotator\" ], ) ########## create doc label compare view ########## df_doc_label_cmp = pd . pivot_table ( df_document_label , values = option_columns_list , index = [ \"TextID\" ], columns = [ \"Annotator\" ], aggfunc = lambda x : x . iloc [ 0 ], ) df_doc_label_cmp = df_doc_label_cmp . reset_index () ########## extract sentence label ############ df_sentence_label_tmp = extract_dict ( df2 , [ \"TextID\" , \"Annotator\" ], \"TermTab\" ) sentence_label_index_dict = OrderedDict ( df_sentence_label_tmp . columns . to_flat_index () ) sent_label_column_list = list ( sentence_label_index_dict . keys ()) # print(sent_label_column_list) sent_label_column_list . remove ( \"TextID\" ) sent_label_column_list . remove ( \"Annotator\" ) ## drop unused level of multi index to avoid KeyError df_sentence_label_tmp = df_sentence_label_tmp . droplevel ( 1 , axis = 1 ) df_sentence_label_tmp = df_sentence_label_tmp . melt ( id_vars = [ \"TextID\" , \"Annotator\" ], value_vars = sent_label_column_list , var_name = \"Sent_Label\" , value_name = \"Sentence\" , ) df_sentence_label_tmp = df_sentence_label_tmp . dropna () df_sentence_label_tmp [ \"Sent_Label\" ] = df_sentence_label_tmp [ \"Sent_Label\" ] . apply ( lambda x : x . split ( \"_\" )[ 0 ] ) df_sentence_label_tmp . reset_index ( drop = True , inplace = True ) df_sentence_label = pd . merge ( df_document_label , df_sentence_label_tmp , how = \"left\" , on = [ \"TextID\" , \"Annotator\" ] ) df_sentence_label = df_sentence_label . sort_values ( [ \"TextID\" , \"Annotator\" , \"Sent_Label\" ] ) ######### create sent label cmp long view ######## # this will group sentence by 'TextID', 'Annotator' and 'Sent_Label' df_sentence_sector = df_sentence_label_tmp . groupby ( [ \"TextID\" , \"Annotator\" , \"Sent_Label\" ] ) # because there may be many sentences belong to one Sent_Label, # when arragate, save these sentence into a list df_sent_label_cmp_long_tmp = df_sentence_sector . agg ( lambda x : [ y for y in x ]) # this will separate each sentence into columns, # so if there are 21 sentence, column's name will be a list of 0-20 df_sent_label_cmp_long_tmp = df_sent_label_cmp_long_tmp [ \"Sentence\" ] . apply ( lambda x : pd . Series ( x ) ) # add new column level: Sentence column_level_list = [[ \"Sentence\" ], df_sent_label_cmp_long_tmp . columns ] df_sent_label_cmp_long_tmp . columns = pd . MultiIndex . from_product ( column_level_list , names = [ \"\" , \"Sent_num\" ] ) # stack 'Sent_num' column as row index df_sent_label_cmp_long_tmp = df_sent_label_cmp_long_tmp . stack () # reset_index will turn all row index into columns df_sent_label_cmp_long_tmp = df_sent_label_cmp_long_tmp . reset_index () # set multilevel index with this order: 'TextID', 'Annotator', 'Sent_Label', 'Sent_num' df_sent_label_cmp_long_tmp = df_sent_label_cmp_long_tmp . set_index ( [ \"TextID\" , \"Annotator\" , \"Sent_Label\" , \"Sent_num\" ] ) def merge ( x , y ): if isinstance ( x , list ): new_x = x + y else : new_x = \"error\" return new_x # use 'TextID', 'Sent_Label', 'Sent_num' as index, # and turn 'Annotator''s value into columns, eg. # if there were four possible values of Annotator: A,B,C,D # then use A,B,C,B as new column names, pivot under value column 'Sentence' # in case there are multiple items with same index, aggfunc will be used. # it will pass a pd.Series object into aggfunc, # we cae use reduce to return sum over the series, # if each item in series is a list object, # we can define a merge function to sum these list up into one list. df_sent_label_cmp_long = pd . pivot_table ( df_sent_label_cmp_long_tmp , values = [ \"Sentence\" ], index = [ \"TextID\" , \"Sent_Label\" , \"Sent_num\" ], columns = [ \"Annotator\" ], aggfunc = lambda x : reduce ( merge , x ), ) # add additional level in the multiindex: 'Sent' # for sent_doc_cmp use col_index_names = list ( df_sent_label_cmp_long . columns . names ) df_sent_label_cmp_long . columns = pd . MultiIndex . from_tuples ( map ( lambda x : ( x [ 0 ], \"Sent\" , x [ 1 ]), df_sent_label_cmp_long . columns ), names = [ col_index_names [ 0 ], \"\" , col_index_names [ 1 ]], ) ######### create sentence label wide view ########## df_sentence_label_wide = df_sent_label_cmp_long . unstack () . unstack () df_sentence_label_wide . columns = df_sentence_label_wide . columns . swaplevel ( 3 , 4 ) df_sentence_label_wide . sort_index ( axis = 1 , level = 3 , inplace = True ) df_sentence_label_wide . columns = pd . MultiIndex . from_tuples ( map ( lambda x : ( x [ 2 ], str ( x [ 3 ]) + \"_\" + \" {:0>2d} \" . format ( x [ 4 ])), df_sentence_label_wide . columns , ) ) df_sentence_label_wide = df_sentence_label_wide . stack ( level = 0 ) df_sentence_label_wide . index = df_sentence_label_wide . index . rename ( [ \"TextID\" , \"Annotator\" ] ) df_sentence_label_wide = df_sentence_label_wide . reset_index () df_sentence_label_wide = pd . merge ( df_document_label , df_sentence_label_wide , how = \"left\" , on = [ \"TextID\" , \"Annotator\" ], ) empty_cols_exclude_first = df_sentence_label_wide . columns [ df_sentence_label_wide . columns . str . contains ( \"empty_(?:[0][1-9]|[1-9][0-9])\" ) ] df_sentence_label_wide = df_sentence_label_wide . drop ( empty_cols_exclude_first , axis = 1 ) ######### create sent label cmp wide views ########## df_sent_label_cmp_wide = df_sent_label_cmp_long . unstack () df_sent_label_cmp_wide . columns = df_sent_label_cmp_wide . columns . swaplevel ( 2 , 3 ) df_sent_label_cmp_wide . sort_index ( axis = 1 , level = 2 , inplace = True ) ######## create sent_doc_cmp views ######### df_doc_tmp = df_doc_label_cmp . set_index ( \"TextID\" ) df_doc_tmp = pd . concat ({ \"Doc_Label\" : df_doc_tmp }, names = [ \"label_kind\" ], axis = 1 ) df_sent_tmp = df_sent_label_cmp_long . reset_index () # to prevent warning: PerformanceWarning: dropping on a non-lexsorted multi-index without a level parameter may impact performance. # need to sort multi-index # see: [python - What exactly is the lexsort_depth of a multi-index Dataframe? - Stack Overflow](https://stackoverflow.com/questions/27116739/what-exactly-is-the-lexsort-depth-of-a-multi-index-dataframe) df_sent_tmp . sort_index ( axis = 1 , level = 0 , inplace = True ) df_sent_doc_cmp_tmp = pd . merge ( df_doc_tmp , df_sent_tmp , how = \"left\" , on = [ \"TextID\" ]) df_sent_doc_cmp_tmp . columns = df_sent_doc_cmp_tmp . columns . swaplevel ( 1 , 2 ) df_sent_doc_cmp_tmp . columns = df_sent_doc_cmp_tmp . columns . swaplevel ( 0 , 1 ) df_sent_doc_cmp_tmp . sort_index ( axis = 1 , level = 0 , inplace = True ) sent_doc_cols = list ( df_sent_doc_cmp_tmp . columns ) new_sent_doc_cols = reorder_column ( sent_doc_cols , ( \"\" , \"TextID\" , \"\" ), ( \"\" , \"Sent_Label\" , \"\" ) ) df_sent_doc_cmp = df_sent_doc_cmp_tmp [ new_sent_doc_cols ] df_sent_doc_cmp = df_sent_doc_cmp . set_index ( [( \"\" , \"TextID\" , \"\" ), ( \"\" , \"Sent_Label\" , \"\" ), ( \"\" , \"Sent_num\" , \"\" )] ) df_sent_doc_cmp . index = df_sent_doc_cmp . index . rename ( [ \"TextID\" , \"Sent_Label\" , \"Sent_num\" ] ) ########## extract content ########## drop_columns_list = reorder_column ( columns_list , \"Summary\" , np . inf ) drop_columns_list = reorder_column ( drop_columns_list , \"TermTab\" , np . inf ) print ( drop_columns_list ) ## explicit copy to avoid SettingWithCopyWarning warning df_content = df2 [ drop_columns_list ] . copy () ## remove tags in content df_content [ \"Content(remove_tag)\" ] = df_content [ \"Content\" ] . apply ( lambda x : re . sub ( r \"(\uff1c(\uff0f)?\uff0a(.+?)_\\d{1,2}\uff0a\uff1e)\" , \"\" , x ) ) # write to excel with pd . ExcelWriter ( save_path , options = { \"strings_to_urls\" : False }, engine = \"openpyxl\" ) as writer : df_sent_doc_cmp . to_excel ( writer , sheet_name = \"sent_doc_cmp\" , index = True ) df_doc_label_cmp . to_excel ( writer , sheet_name = \"doc_label_cmp\" , index = True ) df_sent_label_cmp_long . to_excel ( writer , sheet_name = \"sent_label_cmp(long)\" , index = True ) df_sent_label_cmp_wide . to_excel ( writer , sheet_name = \"sent_label_cmp(wide)\" , index = True ) df_sentence_label_wide . to_excel ( writer , sheet_name = \"sentence_label(wide)\" , index = False ) df_content . to_excel ( writer , sheet_name = \"contents\" , index = False ) df_document_label . to_excel ( writer , sheet_name = \"document_label\" , index = False ) df_sentence_label . to_excel ( writer , sheet_name = \"sentence_label\" , index = False ) for ws in writer . sheets . values (): \"\"\" fix column headers and row headers no font name issue need to use engine='openpyxl' \"\"\" # row_level = df_sent_doc_cmp.index.nlevels # print(row_level) for row in ws . iter_rows ( min_row = 1 , max_row = 1 ): \"\"\" walk through each cell of first row to assign font name \"\"\" for cell in row : # print(cell) font_params = cell . font . __dict__ if font_params [ \"name\" ] is None : font_params [ \"name\" ] = \"Calibri\" cell . font = Font ( ** font_params ) return ( df_content , df_document_label , df_sentence_label , df_sentence_label_wide , df_doc_label_cmp , df_sent_label_cmp_long , df_sent_label_cmp_wide , df_sent_doc_cmp , ) def split_train_test_to_target ( X , y , target ): sss = StratifiedShuffleSplit ( n_splits = 5 , test_size = 0.2 , random_state = 1234 ) for index , ( train_index , test_index ) in enumerate ( sss . split ( X , y )): # print(\"TRAIN:\", train_index, \"TEST:\", test_index) X_train , X_test = X . iloc [ train_index ], X . iloc [ test_index ] y_train , y_test = y . iloc [ train_index ], y . iloc [ test_index ] print ( \"split {} \" . format ( index )) print ( \"train:\" , Counter ( y_train )) print ( \"test:\" , Counter ( y_test )) df_train = pd . DataFrame ({ \"TextID\" : X_train }) . reset_index ( drop = True ) df_test = pd . DataFrame ({ \"TextID\" : X_test }) . reset_index ( drop = True ) df_target_train = pd . merge ( df_train , target , how = \"left\" , on = [ \"TextID\" ]) df_target_test = pd . merge ( df_test , target , how = \"left\" , on = [ \"TextID\" ]) filename = \"train_test_split.xlsx\" # if file does not exist write header if index != 0 and os . path . isfile ( filename ): mode = \"a\" else : mode = \"w\" with pd . ExcelWriter ( filename , options = { \"strings_to_urls\" : False }, mode = mode , engine = \"openpyxl\" ) as writer : df_target_train . to_excel ( writer , sheet_name = \"train {:02} \" . format ( index ), index = False ) df_target_test . to_excel ( writer , sheet_name = \"test {:02} \" . format ( index ), index = False ) def concat_files ( files_list ): print ( files_list ) df_content = pd . read_excel ( files_list [ 0 ], sheet_name = \"contents\" , engine = \"openpyxl\" ) df_document_label = pd . read_excel ( files_list [ 0 ], sheet_name = \"document_label\" , engine = \"openpyxl\" ) df_sentence_label = pd . read_excel ( files_list [ 0 ], sheet_name = \"sentence_label\" , engine = \"openpyxl\" ) for filepath in files_list [ 1 :]: df_content = df_content . append ( pd . read_excel ( filepath , sheet_name = \"contents\" , engine = \"openpyxl\" ) ) df_document_label = df_document_label . append ( pd . read_excel ( filepath , sheet_name = \"document_label\" , engine = \"openpyxl\" ) ) df_sentence_label = df_sentence_label . append ( pd . read_excel ( filepath , sheet_name = \"sentence_label\" , engine = \"openpyxl\" ) ) ## sort data by TextID df_content = df_content . sort_values ( by = [ \"TextID\" ]) df_document_label = df_document_label . sort_values ( by = [ \"TextID\" ]) df_sentence_label = df_sentence_label . sort_values ( by = [ \"TextID\" ]) ## unescape OOXML string df_content = df_content . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) df_document_label = df_document_label . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) df_sentence_label = df_sentence_label . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) # write to excel ## remove illegal characters df_content = remove_illegal_characters ( df_content ) df_document_label = remove_illegal_characters ( df_document_label ) df_sentence_label = remove_illegal_characters ( df_sentence_label ) with pd . ExcelWriter ( \"all_data.xlsx\" , options = { \"strings_to_urls\" : False }, engine = \"openpyxl\" ) as writer : df_content . to_excel ( writer , sheet_name = \"contents\" , index = False ) df_document_label . to_excel ( writer , sheet_name = \"document_label\" , index = False ) df_sentence_label . to_excel ( writer , sheet_name = \"sentence_label\" , index = False ) return df_content , df_document_label , df_sentence_label def main ( args = None ): # Build and Test a Command Line Interface with Poetry, Python's argparse, and pytest - DEV Community \ud83d\udc69\u200d\ud83d\udcbb\ud83d\udc68\u200d\ud83d\udcbb # https://dev.to/bowmanjd/build-and-test-a-command-line-interface-with-poetry-python-s-argparse-and-pytest-4gab if args : mydict_test = { \"global_choies\" :[]} ## How to strip decorators from a function in Python - Stack Overflow ## https://stackoverflow.com/questions/1166118/how-to-strip-decorators-from-a-function-in-python args = parse_args . __closure__ [ 0 ] . cell_contents ( mydict = mydict_test , args = args ) # check if user pass any argument, if yes, use command line, otherwise use gooey ## python - Argparse: Check if any arguments have been passed - Stack Overflow ## https://stackoverflow.com/questions/10698468/argparse-check-if-any-arguments-have-been-passed else : mydict = SqliteDict ( MY_DB_FILE , autocommit = True ) try : mydict [ \"global_choies\" ] except KeyError : mydict [ \"global_choies\" ] = [] if len ( sys . argv ) > 1 : ## How to strip decorators from a function in Python - Stack Overflow ## https://stackoverflow.com/questions/1166118/how-to-strip-decorators-from-a-function-in-python args = parse_args . __closure__ [ 0 ] . cell_contents ( mydict = mydict ) else : # patch gooey component only when before entering GUI mode patch_gooey_gui_component ( mydict = mydict ) args = parse_args ( mydict = mydict ) # print(args.command) # try: # common_filename = Path(args.input_file) # # common_filename = \"\".join(args.input_file.split(\".\")[:-1]) # # print(common_filename) # except: # pass if args . command == \"original\" : if args . input_file : common_filename = Path ( args . input_file ) df = pd . read_excel ( args . input_file , engine = \"openpyxl\" ) df [ \"TextID\" ] = get_TextID ( df [[ \"Content\" ]]) if args . emojilize : # df = clean_data(df) df = text_to_emoji ( df ) new_filename = common_filename . with_name ( common_filename . stem + \"_emojilized\" ) print ( args . input_file . split ( \".\" )) else : new_filename = common_filename . with_name ( common_filename . stem + \"_demojilized\" ) # print(args.input_file.split(\".\")[:-1]) # df = clean_data(df) df = emoji_to_text ( df ) ## unescape OOXML string df = df . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) ## remove illegal characters df = remove_illegal_characters ( df ) ######## calculate processed TextID ######## ## remove emoji text for calculate TextID delimiters = ( \":\" , \":\" ) pattern = re . compile ( u \"( %s [a-zA-Z0-9 \\\\ + \\\\ -_&.\u00f4\u2019\u00c5\u00e9\u00e3\u00ed\u00e7()!#*]+ %s )\" % delimiters ) df_remove_emoji_text = df . applymap ( lambda x : pattern . sub ( \"\" , x ) if isinstance ( x , str ) else x ) ## replace strange characters for calculate TextID pattern2 = re . compile ( u \" \\\\\\\\\\\\\\\\ %\" ) df_remove_emoji_text = df_remove_emoji_text . applymap ( lambda x : pattern2 . sub ( \"%\" , x ) if isinstance ( x , str ) else x ) df [ \"TextID(processed)\" ] = get_TextID ( df_remove_emoji_text [[ \"Content\" ]]) if args . to_excel : output_filename = new_filename . with_suffix ( \".xlsx\" ) with pd . ExcelWriter ( output_filename , options = { \"strings_to_urls\" : False }, engine = \"openpyxl\" , ) as writer : df . to_excel ( writer , index = False ) else : output_filename = new_filename . with_suffix ( \".json\" ) # ### \u8f38\u51fa\u5de5\u7814\u9662\u6587\u7ae0 json\u6a94 df = clean_data ( df ) to_AI_clerk_batch_upload_json ( df , output_filename ) id_mapping_filename = common_filename . with_name ( common_filename . stem + \"_TextID_mapping\" ) . with_suffix ( \".xlsx\" ) with pd . ExcelWriter ( id_mapping_filename , options = { \"strings_to_urls\" : False }, engine = \"openpyxl\" , ) as writer : reserved_columns = df . columns . str . contains ( \"^TextID.*\" ) reserved_columns = df . columns [ reserved_columns ] . tolist () df [ reserved_columns ] . to_excel ( writer , index = False ) elif args . input_dir : common_path = Path ( args . input_dir ) print ( \"input path:\" , common_path ) filename_pattern = \"*/**/*.txt\" save_path = ( Path ( common_path ) . with_name ( Path ( common_path ) . stem ) . with_suffix ( \".json\" ) ) print ( \"output path:\" , save_path ) glob_path = Path ( common_path ) filepathes = glob_path . glob ( filename_pattern ) articles_dict = defaultdict ( dict ) for filepath in filepathes : content_dict = {} content_dict [ \"Title\" ] = str ( filepath . relative_to ( common_path )) content_dict [ \"Content\" ] = \"\" content_dict [ \"Author\" ] = \"\" content_dict [ \"Time\" ] = \"\" # guess encoding # Is there a Python library function which attempts to guess the character-encoding of some bytes? - Stack Overflow # https://stackoverflow.com/questions/269060/is-there-a-python-library-function-which-attempts-to-guess-the-character-encodin # Usage \u2014 chardet 5.0.0dev0 documentation # https://chardet.readthedocs.io/en/latest/usage.html detector = UniversalDetector () detector . reset () for line in open ( filepath , \"rb\" ): detector . feed ( line ) if detector . done : break detector . close () # print(detector.result) with open ( filepath , \"r\" , encoding = detector . result [ \"encoding\" ]) as f : content_dict [ \"Content\" ] = f . read () text_id = hashlib . md5 ( content_dict [ \"Content\" ] . encode ( \"utf-8\" ) ) . hexdigest ()[: 10 ] articles_dict [ \"Articles\" ] . update ({ text_id : content_dict }) # read into dataframe will automatically sort by index dataframe = pd . DataFrame . from_dict ( articles_dict ) # because articles_dict['Articles'] use text_id as key to update, # if there were duplicate text_id, it'll replace by later items. # so no need to check duplicate. ### # dataframe.reset_index(inplace=True) # dup_id = dataframe.duplicated(['index'], keep=False) # print(\"duplicated entries: {}\".format(len(dataframe[dup_id]))) # print(dataframe[dup_id]) # dataframe = dataframe.groupby(['index']).apply(lambda x: x.iloc[0]) # print(\"keep first, drop duplicated!\") # dataframe.set_index('index', inplace=True) with open ( save_path , \"w\" , encoding = \"utf-8\" ) as outfile : json . dump ( dataframe . to_dict (), outfile , ensure_ascii = False , indent = 4 ) elif args . command == \"labeled\" : common_filename = Path ( args . input_file ) df = pd . read_json ( args . input_file ) ### \u8f38\u51fa\u6a19\u8a18\u8cc7\u6599excel\u6a94 output_filename = common_filename . with_suffix ( \".xlsx\" ) to_excel_AI_clerk_labeled_data ( df , output_filename ) elif args . command == \"second_upload\" : ## \u4e8c\u6b21\u4e0a\u50b3\u6642\uff0c\u7531\u65bc\u5de5\u7814\u9662\u7cfb\u7d71\u7684\u9650\u5236\uff0c\u6703\u628a\u4ed6\u5011\u5167\u90e8\u7684 SerialID \u7576\u6210\u662f TextID ## \u56e0\u6b64\uff0c\u9019\u4e00\u6b65\u7684\u4f5c\u7528\u5c31\u662f\u5c07 TextID \u8907\u88fd\u5230\u539f\u672c SerialID \u7684\u6b04\u4f4d\uff0c ## \u518d\u6b21\u4e0a\u50b3\u5f8c\u4e0b\u8f09\u56de\u4f86\u624d\u6703\u662f\u6b63\u78ba\u7684 TextID common_filename = Path ( args . input_file ) # df = pd.read_json(args.input_file) with open ( common_filename , \"r\" , encoding = \"utf-8\" ) as f : data = json . load ( f ) data2 = {} for key , value in data . items (): # pprint(data[key]) data2 . update ({ data [ key ][ \"TextID\" ]: data [ key ]}) save_path = ( Path ( common_filename ) . with_name ( common_filename . stem + \"_second_upload\" ) . with_suffix ( \".json\" ) ) with open ( save_path , \"w\" , encoding = \"utf-8\" ) as outfile : json . dump ( data2 , outfile , ensure_ascii = False , indent = 4 ) elif args . command == \"second_labeled\" : ## \u4e8c\u6b21\u6a19\u8a3b\u7d50\u679c\u4e0b\u8f09\u5f8c\uff0c\u6703\u767c\u73fe\u6a94\u6848\u5927\u5c0f\u662f\u4e00\u6b21\u6a19\u8a3b\u7684\u5169\u500d\u5927\uff0c ## \u9019\u662f\u56e0\u70ba\u4e8c\u6b21\u6a19\u8a3b\u4e0b\u8f09\u56de\u4f86\u7684\u6a94\u6848\u9084\u5305\u542b\u4e00\u6b21\u6a19\u8a3b\u7684\u6a94\u6848\uff0c ## \u90a3\u4e9b\u6c92\u6709 Annotator \u7684\u8cc7\u6599\uff0c\u5373\u70ba\u4e00\u6b21\u6a19\u8a3b\u7684\u8cc7\u6599\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e1f\u68c4 ## \u53ea\u8981\u7559\u4e0b\u6709 Annotator \u7684\u8cc7\u6599\uff0c\u4e26\u4e14 assign \u6b63\u78ba\u7684 TextID \u4e0a\u53bb # print(args.input_file_1) # print(args.input_file_2) common_filename_1 = [ Path ( path ) for path in args . input_file_1 ] common_filename_2 = Path ( args . input_file_2 ) # df = pd.read_json(args.input_file) data1 = {} for path in common_filename_1 : with open ( path , \"r\" , encoding = \"utf-8\" ) as f : data1 . update ( json . load ( f )) with open ( common_filename_2 , \"r\" , encoding = \"utf-8\" ) as f : data2 = json . load ( f ) data3 = {} for key , value in data2 . items (): if value [ \"Annotator\" ] == \"\" : continue value [ \"TextID\" ] = data1 [ value [ \"TextID\" ]][ \"TextID\" ] data3 . update ({ key : value }) save_path = ( Path ( common_filename_2 ) . with_name ( common_filename_2 . stem + \"_second_labeled\" ) . with_suffix ( \".json\" ) ) with open ( save_path , \"w\" , encoding = \"utf-8\" ) as outfile : json . dump ( data3 , outfile , ensure_ascii = False , indent = 4 ) elif args . command == \"concat\" : os_type = platform . system () if os_type == \"Windows\" : files_list = args . input_files . split ( \";\" ) else : files_list = args . input_files . split ( \":\" ) concat_files ( files_list ) elif args . command == \"split\" : # df_content = pd.read_excel(args.input_file, sheet_name='contents', engine='openpyxl') df_document = pd . read_excel ( args . input_file , sheet_name = \"document_label\" , engine = \"openpyxl\" ) df_sentence = pd . read_excel ( args . input_file , sheet_name = \"sentence_label\" , engine = \"openpyxl\" ) ## unescape OOXML string # df_content = df_content.applymap(lambda x: unescape_OOXML(x) if isinstance(x, str) else x) df_document = df_document . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) df_sentence = df_sentence . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) ## remove illegal characters # df_content = remove_illegal_characters(df_content) df_document = remove_illegal_characters ( df_document ) df_sentence = remove_illegal_characters ( df_sentence ) X = df_document [ \"TextID\" ] y = df_document [ args . y_col ] target = df_sentence split_train_test_to_target ( X , y , target ) if __name__ == \"__main__\" : main () Variables ESCAPED_REGEX ILLEGAL_CHARACTERS_RE MY_DB_FILE global_args Functions clean_data def clean_data ( df ) View Source def clean_data ( df ) : empty_entries = df [ \"Content\" ] . isnull () print ( \"number of empty content entries: {}\" . format ( len ( df [ empty_entries ] ))) df_cleaned = df [ ~empty_entries ] . copy () if len ( df [ empty_entries ] ) : print ( \"drop empty!\" ) drop_columns = df_cleaned . columns . str . contains ( \"Unnamed\" ) # print ( any ( df_cleaned . columns . str . contains ( \"^ID$\" ))) # if not any ( df_cleaned . columns . str . contains ( \"^TextID$\" )) : leave_columns = df_cleaned . columns [ ~drop_columns ] . tolist () # df_cleaned [ 'ID' ] = df_cleaned [ [\"Content\" ] ] . apply ( lambda x : hashlib . md5 ( x [ 0 ] . encode ( 'utf-8' )). hexdigest () [ :10 ] , axis = 1 ) df_cleaned = df_cleaned [ leave_columns ] # print ( df_cleaned . head ()) df_cleaned = df_cleaned . sort_values ( \"TextID\" ). reset_index ( drop = True ) df_cleaned [ \"Author\" ] = df_cleaned . apply ( lambda x : x . Poster + \"/\" + x . Gender , axis = 1 ) df_cleaned [ \"Time\" ] = df_cleaned . apply ( lambda x : str ( x . Date ) + \"/\" + str ( x . Time ), axis = 1 ) return df_cleaned concat_files def concat_files ( files_list ) View Source def concat_files ( files_list ) : print ( files_list ) df_content = pd . read_excel ( files_list [ 0 ], sheet_name = \" contents \" , engine = \" openpyxl \" ) df_document_label = pd . read_excel ( files_list [ 0 ], sheet_name = \" document_label \" , engine = \" openpyxl \" ) df_sentence_label = pd . read_excel ( files_list [ 0 ], sheet_name = \" sentence_label \" , engine = \" openpyxl \" ) for filepath in files_list [ 1 :]: df_content = df_content . append ( pd . read_excel ( filepath , sheet_name = \" contents \" , engine = \" openpyxl \" ) ) df_document_label = df_document_label . append ( pd . read_excel ( filepath , sheet_name = \" document_label \" , engine = \" openpyxl \" ) ) df_sentence_label = df_sentence_label . append ( pd . read_excel ( filepath , sheet_name = \" sentence_label \" , engine = \" openpyxl \" ) ) ## sort data by TextID df_content = df_content . sort_values ( by = [ \" TextID \" ] ) df_document_label = df_document_label . sort_values ( by = [ \" TextID \" ] ) df_sentence_label = df_sentence_label . sort_values ( by = [ \" TextID \" ] ) ## unescape OOXML string df_content = df_content . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) df_document_label = df_document_label . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) df_sentence_label = df_sentence_label . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) # write to excel ## remove illegal characters df_content = remove_illegal_characters ( df_content ) df_document_label = remove_illegal_characters ( df_document_label ) df_sentence_label = remove_illegal_characters ( df_sentence_label ) with pd . ExcelWriter ( \" all_data.xlsx \" , options = { \" strings_to_urls \" : False }, engine = \" openpyxl \" ) as writer : df_content . to_excel ( writer , sheet_name = \" contents \" , index = False ) df_document_label . to_excel ( writer , sheet_name = \" document_label \" , index = False ) df_sentence_label . to_excel ( writer , sheet_name = \" sentence_label \" , index = False ) return df_content , df_document_label , df_sentence_label emoji_to_text def emoji_to_text ( df ) View Source def emoji_to_text ( df ) : df_deemojilized = df . copy () ## \u8f49\u63db emoji \u683c\u5f0f\u6210 : emoji : ## python - How to replace emoji to word in a text ? - Stack Overflow ## https : // stackoverflow . com / questions / 57580288 / how - to - replace - emoji - to - word - in - a - text df_deemojilized [ \" Content \" ] = df [[ \" Content \" ]]. apply ( lambda x : emoji . demojize ( x [ 0 ] ) , axis = 1 ) df_deemojilized [ \" Title \" ] = df [[ \" Title \" ]]. apply ( lambda x : emoji . demojize ( x [ 0 ] ) , axis = 1 ) return df_deemojilized extract_dict def extract_dict ( df , id_column_list , dict_column ) View Source def extract_dict ( df , id_column_list , dict_column ) : df_tmp = df [ id_column_list + [dict_column ] ] . set_index ( id_column_list ) df_tmp = pd . DataFrame ( df_tmp . apply ( lambda x : { \"empty\" : \"nan\" } if len ( x [ 0 ] ) == 0 else x [ 0 ] , axis = 1 ) ) df_tmp = df_tmp . apply ( lambda x : pd . DataFrame . from_dict ( x [ 0 ] , orient = \"index\" ). stack (), axis = 1 ) df_tmp = df_tmp . reset_index ( level = id_column_list ) return df_tmp get_TextID def get_TextID ( df ) View Source def get_TextID ( df ) : return df . apply ( lambda x : hashlib . md5 ( x [ 0 ]. encode ( \" utf-8 \" )) . hexdigest () [: 10 ], axis = 1 ) main def main ( args = None ) View Source def main ( args = None ) : # Build and Test a Command Line Interface with Poetry , Python 's argparse, and pytest - DEV Community \ud83d\udc69\u200d\ud83d\udcbb\ud83d\udc68\u200d\ud83d\udcbb # https://dev.to/bowmanjd/build-and-test-a-command-line-interface-with-poetry-python-s-argparse-and-pytest-4gab if args: mydict_test = {\"global_choies\":[]} ## How to strip decorators from a function in Python - Stack Overflow ## https://stackoverflow.com/questions/1166118/how-to-strip-decorators-from-a-function-in-python args = parse_args.__closure__[0].cell_contents(mydict=mydict_test, args=args) # check if user pass any argument, if yes, use command line, otherwise use gooey ## python - Argparse: Check if any arguments have been passed - Stack Overflow ## https://stackoverflow.com/questions/10698468/argparse-check-if-any-arguments-have-been-passed else: mydict = SqliteDict(MY_DB_FILE, autocommit=True) try: mydict[\"global_choies\"] except KeyError: mydict[\"global_choies\"] = [] if len(sys.argv) > 1: ## How to strip decorators from a function in Python - Stack Overflow ## https://stackoverflow.com/questions/1166118/how-to-strip-decorators-from-a-function-in-python args = parse_args.__closure__[0].cell_contents(mydict=mydict) else: # patch gooey component only when before entering GUI mode patch_gooey_gui_component(mydict=mydict) args = parse_args(mydict=mydict) # print(args.command) # try: # common_filename = Path(args.input_file) # # common_filename = \"\".join(args.input_file.split(\".\")[:-1]) # # print(common_filename) # except: # pass if args.command == \"original\": if args.input_file: common_filename = Path(args.input_file) df = pd.read_excel(args.input_file, engine=\"openpyxl\") df[\"TextID\"] = get_TextID(df[[\"Content\"]]) if args.emojilize: # df = clean_data(df) df = text_to_emoji(df) new_filename = common_filename.with_name( common_filename.stem + \"_emojilized\" ) print(args.input_file.split(\".\")) else: new_filename = common_filename.with_name( common_filename.stem + \"_demojilized\" ) # print(args.input_file.split(\".\")[:-1]) # df = clean_data(df) df = emoji_to_text(df) ## unescape OOXML string df = df.applymap(lambda x: unescape_OOXML(x) if isinstance(x, str) else x) ## remove illegal characters df = remove_illegal_characters(df) ######## calculate processed TextID ######## ## remove emoji text for calculate TextID delimiters = (\":\", \":\") pattern = re.compile( u\"(%s[a-zA-Z0-9\\\\+\\\\-_&.\u00f4\u2019\u00c5\u00e9\u00e3\u00ed\u00e7()!#*]+%s)\" % delimiters ) df_remove_emoji_text = df.applymap( lambda x: pattern.sub(\"\", x) if isinstance(x, str) else x ) ## replace strange characters for calculate TextID pattern2 = re.compile(u\"\\\\\\\\\\\\\\\\%\") df_remove_emoji_text = df_remove_emoji_text.applymap( lambda x: pattern2.sub(\"%\", x) if isinstance(x, str) else x ) df[\"TextID(processed)\"] = get_TextID(df_remove_emoji_text[[\"Content\"]]) if args.to_excel: output_filename = new_filename.with_suffix(\".xlsx\") with pd.ExcelWriter( output_filename, options={\"strings_to_urls\": False}, engine=\"openpyxl\", ) as writer: df.to_excel(writer, index=False) else: output_filename = new_filename.with_suffix(\".json\") # ### \u8f38\u51fa\u5de5\u7814\u9662\u6587\u7ae0 json\u6a94 df = clean_data(df) to_AI_clerk_batch_upload_json(df, output_filename) id_mapping_filename = common_filename.with_name( common_filename.stem + \"_TextID_mapping\" ).with_suffix(\".xlsx\") with pd.ExcelWriter( id_mapping_filename, options={\"strings_to_urls\": False}, engine=\"openpyxl\", ) as writer: reserved_columns = df.columns.str.contains(\"^TextID.*\") reserved_columns = df.columns[reserved_columns].tolist() df[reserved_columns].to_excel(writer, index=False) elif args.input_dir: common_path = Path(args.input_dir) print(\"input path:\", common_path) filename_pattern = \"*/**/*.txt\" save_path = ( Path(common_path).with_name(Path(common_path).stem).with_suffix(\".json\") ) print(\"output path:\", save_path) glob_path = Path(common_path) filepathes = glob_path.glob(filename_pattern) articles_dict = defaultdict(dict) for filepath in filepathes: content_dict = {} content_dict[\"Title\"] = str(filepath.relative_to(common_path)) content_dict[\"Content\"] = \"\" content_dict[\"Author\"] = \"\" content_dict[\"Time\"] = \"\" # guess encoding # Is there a Python library function which attempts to guess the character-encoding of some bytes? - Stack Overflow # https://stackoverflow.com/questions/269060/is-there-a-python-library-function-which-attempts-to-guess-the-character-encodin # Usage \u2014 chardet 5.0.0dev0 documentation # https://chardet.readthedocs.io/en/latest/usage.html detector = UniversalDetector() detector.reset() for line in open(filepath, \"rb\"): detector.feed(line) if detector.done: break detector.close() # print(detector.result) with open(filepath, \"r\", encoding=detector.result[\"encoding\"]) as f: content_dict[\"Content\"] = f.read() text_id = hashlib.md5( content_dict[\"Content\"].encode(\"utf-8\") ).hexdigest()[:10] articles_dict[\"Articles\"].update({text_id: content_dict}) # read into dataframe will automatically sort by index dataframe = pd.DataFrame.from_dict(articles_dict) # because articles_dict[' Articles '] use text_id as key to update, # if there were duplicate text_id, it'll replace by later items . # so no need to check duplicate . ### # dataframe . reset_index ( inplace = True ) # dup_id = dataframe . duplicated ([ 'index' ], keep = False ) # print ( \"duplicated entries: {}\" . format ( len ( dataframe [ dup_id ]))) # print ( dataframe [ dup_id ]) # dataframe = dataframe . groupby ([ 'index' ]). apply ( lambda x : x . iloc [ 0 ]) # print ( \"keep first, drop duplicated!\" ) # dataframe . set_index ( 'index' , inplace = True ) with open ( save_path , \"w\" , encoding= \"utf-8\" ) as outfile : json . dump ( dataframe . to_dict (), outfile , ensure_ascii = False , indent = 4 ) elif args . command == \"labeled\" : common_filename = Path ( args . input_file ) df = pd . read_json ( args . input_file ) ### \u8f38\u51fa\u6a19\u8a18\u8cc7\u6599excel\u6a94 output_filename = common_filename . with_suffix ( \".xlsx\" ) to_excel_AI_clerk_labeled_data ( df , output_filename ) elif args . command == \"second_upload\" : ## \u4e8c\u6b21\u4e0a\u50b3\u6642\uff0c\u7531\u65bc\u5de5\u7814\u9662\u7cfb\u7d71\u7684\u9650\u5236\uff0c\u6703\u628a\u4ed6\u5011\u5167\u90e8\u7684 SerialID \u7576\u6210\u662f TextID ## \u56e0\u6b64\uff0c\u9019\u4e00\u6b65\u7684\u4f5c\u7528\u5c31\u662f\u5c07 TextID \u8907\u88fd\u5230\u539f\u672c SerialID \u7684\u6b04\u4f4d\uff0c ## \u518d\u6b21\u4e0a\u50b3\u5f8c\u4e0b\u8f09\u56de\u4f86\u624d\u6703\u662f\u6b63\u78ba\u7684 TextID common_filename = Path ( args . input_file ) # df = pd . read_json ( args . input_file ) with open ( common_filename , \"r\" , encoding= \"utf-8\" ) as f : data = json . load ( f ) data2 = {} for key , value in data . items () : # pprint ( data [ key ]) data2 . update ({ data [ key ][ \"TextID\" ] : data [ key ]}) save_path = ( Path ( common_filename ) . with_name ( common_filename . stem + \"_second_upload\" ) . with_suffix ( \".json\" ) ) with open ( save_path , \"w\" , encoding= \"utf-8\" ) as outfile : json . dump ( data2 , outfile , ensure_ascii = False , indent = 4 ) elif args . command == \"second_labeled\" : ## \u4e8c\u6b21\u6a19\u8a3b\u7d50\u679c\u4e0b\u8f09\u5f8c\uff0c\u6703\u767c\u73fe\u6a94\u6848\u5927\u5c0f\u662f\u4e00\u6b21\u6a19\u8a3b\u7684\u5169\u500d\u5927\uff0c ## \u9019\u662f\u56e0\u70ba\u4e8c\u6b21\u6a19\u8a3b\u4e0b\u8f09\u56de\u4f86\u7684\u6a94\u6848\u9084\u5305\u542b\u4e00\u6b21\u6a19\u8a3b\u7684\u6a94\u6848\uff0c ## \u90a3\u4e9b\u6c92\u6709 Annotator \u7684\u8cc7\u6599\uff0c\u5373\u70ba\u4e00\u6b21\u6a19\u8a3b\u7684\u8cc7\u6599\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e1f\u68c4 ## \u53ea\u8981\u7559\u4e0b\u6709 Annotator \u7684\u8cc7\u6599\uff0c\u4e26\u4e14 assign \u6b63\u78ba\u7684 TextID \u4e0a\u53bb # print ( args . input_file_1 ) # print ( args . input_file_2 ) common_filename_1 = [ Path ( path ) for path in args . input_file_1 ] common_filename_2 = Path ( args . input_file_2 ) # df = pd . read_json ( args . input_file ) data1 = {} for path in common_filename_1: with open ( path , \"r\" , encoding= \"utf-8\" ) as f : data1 . update ( json . load ( f )) with open ( common_filename_2 , \"r\" , encoding= \"utf-8\" ) as f : data2 = json . load ( f ) data3 = {} for key , value in data2 . items () : if value [ \"Annotator\" ] == \"\" : continue value [ \"TextID\" ] = data1 [ value [ \"TextID\" ]][ \"TextID\" ] data3 . update ({ key : value }) save_path = ( Path ( common_filename_2 ) . with_name ( common_filename_2 . stem + \"_second_labeled\" ) . with_suffix ( \".json\" ) ) with open ( save_path , \"w\" , encoding= \"utf-8\" ) as outfile : json . dump ( data3 , outfile , ensure_ascii = False , indent = 4 ) elif args . command == \"concat\" : os_type = platform . system () if os_type == \"Windows\" : files_list = args . input_files . split ( \";\" ) else : files_list = args . input_files . split ( \":\" ) concat_files ( files_list ) elif args . command == \"split\" : # df_content = pd . read_excel ( args . input_file , sheet_name='contents' , engine='openpyxl' ) df_document = pd . read_excel ( args . input_file , sheet_name= \"document_label\" , engine= \"openpyxl\" ) df_sentence = pd . read_excel ( args . input_file , sheet_name= \"sentence_label\" , engine= \"openpyxl\" ) ## unescape OOXML string # df_content = df_content . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) df_document = df_document . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) df_sentence = df_sentence . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) ## remove illegal characters # df_content = remove_illegal_characters ( df_content ) df_document = remove_illegal_characters ( df_document ) df_sentence = remove_illegal_characters ( df_sentence ) X = df_document [ \"TextID\" ] y = df_document [ args . y_col ] target = df_sentence split_train_test_to_target ( X , y , target ) patch_gooey_gui_component def patch_gooey_gui_component ( mydict ) Monkey patch gooey's gui components, like: Dropdown, FileChooser, GooeyApplication,...etc. To avoid ImportError: libXxf86vm.so.1 while import, we enclose patch code into a function, and call it when we are going into GUI mode. Returns: Type Description [type] [description] View Source def patch_gooey_gui_component ( mydict ): \"\"\"Monkey patch gooey's gui components, like: Dropdown, FileChooser, GooeyApplication,...etc. To avoid `ImportError: libXxf86vm.so.1` while import, we enclose patch code into a function, and call it when we are going into GUI mode. Returns: [type]: [description] \"\"\" import wx # from gooey.gui.lang.i18n import _ ###### ## [Feature request: Allow general callbacks for validation \u00b7 Issue #293 \u00b7 chriskiehl/Gooey] ## (https://github.com/chriskiehl/Gooey/issues/293) # from gooey.gui.components.widgets.bases import TextContainer # oldGetValue = TextContainer.getValue # # def newGetValue(self): # result = oldGetValue(self) # userValidator = self._options['validator']['callback'] # message = self._options['validator']['message'] # value = self.getWidgetValue() # validates = userValidator(value) # result['test'] = False # result['error'] = 'test' # return result # # TextContainer.getValue = newGetValue ###### # [Gooey/dropdown.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/dropdown.py) from gooey.gui.components.widgets.dropdown import Dropdown Dropdown_oldGetWidget = Dropdown . getWidget # from gooey.gui import formatters # def newFormatOutput(self, metadata, value): # print(\"debug2\") # print(\"metadata\", metadata) # print(\"value\", value) # return formatters.dropdown(metadata, value) # def newSetValue(self, value): # ## +1 to offset the default placeholder value # index = self._meta['choices'].index(value) + 1 # print(\"debug\", self._meta['choices']) # self.widget.SetSelection(index) # def newGetWidgetValue(self): # value = self.widget.GetValue() # # filter out the extra default option that's # # appended during creation # print(value) # if value == _('select_option'): # return None # return value def Dropdown_newGetWidget ( self , parent , * args , ** options ): widget = Dropdown_oldGetWidget ( self , parent , * args , ** options ) # [wxPython ComboBox & Choice\u7c7b - WxPython\u6559\u7a0b\u2122] # (https://www.yiibai.com/wxpython/wx_combobox_choice_class.html) # [wx.ComboBox \u2014 wxPython Phoenix 4.1.1a1 documentation] # (https://wxpython.org/Phoenix/docs/html/wx.ComboBox.html) widget . Bind ( wx . EVT_COMBOBOX_DROPDOWN , self . OnCombo ) return widget def Dropdown_newOnCombo ( self , event ): def get_choices ( input_file ): try : # specify engine use 'openpyxl' to avoid not found xlrd error new_choices = list ( pd . read_excel ( input_file , sheet_name = \"document_label\" , index_col = 0 , nrows = 0 , engine = \"openpyxl\" , ) ) message = \"\" self . setErrorString ( message ) self . showErrorString ( False ) # force refresh parent screen # python - Update/Refresh Dynamically\u2013Created WxPython Widgets - Stack Overflow # https://stackoverflow.com/questions/10368948/update-refresh-dynamically-created-wxpython-widgets self . GetParent () . Layout () except Exception as e : # message = \"No sheet named 'document_label'\" # show actual exception message for easier debug message = repr ( e ) # print(message) self . setErrorString ( message ) self . showErrorString ( True ) # force refresh parent screen # python - Update/Refresh Dynamically\u2013Created WxPython Widgets - Stack Overflow # https://stackoverflow.com/questions/10368948/update-refresh-dynamically-created-wxpython-widgets self . GetParent () . Layout () new_choices = [] return new_choices current_input_file = global_args [ \"input_file\" ] try : self . previous_input_file except Exception : self . previous_input_file = \"\" if self . previous_input_file != current_input_file : self . new_choices = get_choices ( current_input_file ) self . previous_input_file = current_input_file # save self.new_choices into sqlite db for later access mydict [ \"global_choies\" ] = self . new_choices # [python - Dynamically change the choices in a wx.ComboBox() - Stack Overflow] # (https://stackoverflow.com/questions/682923/dynamically-change-the-choices-in-a-wx-combobox) self . setOptions ( self . new_choices ) Dropdown . getWidget = Dropdown_newGetWidget Dropdown . OnCombo = Dropdown_newOnCombo # Dropdown.setValue = newSetValue # Dropdown.getWidgetValue = newGetWidgetValue # Dropdown.formatOutput = newFormatOutput # [Gooey/choosers.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/choosers.py) # [Gooey/chooser.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/core/chooser.py#L65) # [Gooey/chooser.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/core/chooser.py#L13) # [Gooey/text_input.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/core/text_input.py#L7) # [Gooey/bases.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/bases.py#L170) from gooey.gui.components.widgets.core.chooser import FileChooser FileChooser_old_init = FileChooser . __init__ ## monkey patch __init__ def FileChooser_new_init ( self , parent , * args , ** kwargs ): FileChooser_old_init ( self , parent , * args , ** kwargs ) # bind event wx.EVT_TEXT to trigger self.OnFileChooser when text change # [wx.TextCtrl \u2014 wxPython Phoenix 4.1.1a1 documentation] # (https://wxpython.org/Phoenix/docs/html/wx.TextCtrl.html) # [wxPython - TextCtrl Class - Tutorialspoint] # (https://www.tutorialspoint.com/wxpython/wx_textctrl_class.htm) self . widget . Bind ( wx . EVT_TEXT , self . OnFileChooser ) ## monkey patch OnFileChooser def FileChooser_newOnFileChooser ( self , event ): # read text area value to global_args global_args [ \"input_file\" ] = self . widget . getValue () # print(global_args) FileChooser . __init__ = FileChooser_new_init FileChooser . OnFileChooser = FileChooser_newOnFileChooser # [Gooey/application.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/containers/application.py#L29) from gooey.gui.containers.application import GooeyApplication ## monkey patch onClose def newOnClose ( self , * args , ** kwargs ): \"\"\"Cleanup the top level WxFrame and shutdown the process\"\"\" self . Destroy () # print(\"onClose\") # remove db file when close # [sqlite - Python PermissionError: [WinError 32] The process cannot access the file..... but my file is closed - Stack Overflow] # (https://stackoverflow.com/questions/59482990/python-permissionerror-winerror-32-the-process-cannot-access-the-file-bu) mydict . close () os . remove ( MY_DB_FILE ) sys . exit () GooeyApplication . onClose = newOnClose remove_illegal_characters def remove_illegal_characters ( dataframe ) View Source def remove_illegal_characters ( dataframe ) : # dataframe = dataframe . applymap ( lambda x : x . encode ( ' unicode_escape ' ) . decode ( ' utf-8 ' ) if isinstance ( x , str ) else x ) dataframe = dataframe . applymap ( lambda x : ILLEGAL_CHARACTERS_RE . sub ( r \"\" , x ) if isinstance ( x , str ) else x ) return dataframe reorder_column def reorder_column ( columns_list , selected_column_name , insert_before_column_name = None ) columns_list: the list of columns to be reordered selected_column_name: the column name which wants to be inserted to the point before column insert_before_column_name insert_before_column_name: the column name which act as fix point relative to the selected_column_name View Source def reorder_column ( columns_list , selected_column_name , insert_before_column_name = None ) : \" \"\" columns_list: the list of columns to be reordered selected_column_name: the column name which wants to be inserted to the point before column `insert_before_column_name` insert_before_column_name: the column name which act as fix point relative to the `selected_column_name` \"\" \" columns_list = copy . copy ( columns_list ) selected_index = columns_list . index ( selected_column_name ) selected_item = columns_list . pop ( selected_index ) # drop selected column when insert_before_column_name is infinity if insert_before_column_name is np . inf : return columns_list # print(insert_before_column_name is float('inf')) # insert to the end of column list when insert_before_column_name is None if insert_before_column_name is None : insert_point_index = len ( columns_list ) else : insert_point_index = columns_list . index ( insert_before_column_name ) columns_list . insert ( insert_point_index , selected_item ) return columns_list split_train_test_to_target def split_train_test_to_target ( X , y , target ) View Source def split_train_test_to_target ( X , y , target ) : sss = StratifiedShuffleSplit ( n_splits = 5 , test_size = 0.2 , random_state = 1234 ) for index , ( train_index , test_index ) in enumerate ( sss . split ( X , y )) : # print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X . iloc [ train_index ] , X . iloc [ test_index ] y_train , y_test = y . iloc [ train_index ] , y . iloc [ test_index ] print ( \"split {}\" . format ( index )) print ( \"train:\" , Counter ( y_train )) print ( \"test:\" , Counter ( y_test )) df_train = pd . DataFrame ( { \"TextID\" : X_train } ). reset_index ( drop = True ) df_test = pd . DataFrame ( { \"TextID\" : X_test } ). reset_index ( drop = True ) df_target_train = pd . merge ( df_train , target , how = \"left\" , on =[ \"TextID\" ] ) df_target_test = pd . merge ( df_test , target , how = \"left\" , on =[ \"TextID\" ] ) filename = \"train_test_split.xlsx\" # if file does not exist write header if index != 0 and os . path . isfile ( filename ) : mode = \"a\" else : mode = \"w\" with pd . ExcelWriter ( filename , options = { \"strings_to_urls\" : False } , mode = mode , engine = \"openpyxl\" ) as writer : df_target_train . to_excel ( writer , sheet_name = \"train{:02}\" . format ( index ), index = False ) df_target_test . to_excel ( writer , sheet_name = \"test{:02}\" . format ( index ), index = False ) text_to_emoji def text_to_emoji ( df ) View Source def text_to_emoji ( df ) : df_emojilized = df . copy () ## \u5c07: emoji : \u63db\u56de unicode character df_emojilized [ \" Content \" ] = df [[ \" Content \" ]]. apply ( lambda x : emoji . emojize ( x [ 0 ] ) , axis = 1 ) df_emojilized [ \" Title \" ] = df [[ \" Title \" ]]. apply ( lambda x : emoji . emojize ( x [ 0 ] ) , axis = 1 ) return df_emojilized to_AI_clerk_batch_upload_json def to_AI_clerk_batch_upload_json ( dataframe , save_path ) View Source def to_AI_clerk_batch_upload_json ( dataframe , save_path ) : def to_article_dict ( x ) : return { \"Title\" : x . Title . tolist () [ 0 ] , \"Content\" : x . Content . tolist () [ 0 ] , \"Author\" : x . Author . tolist () [ 0 ] , \"Time\" : x . Time . tolist () [ 0 ] , } print ( \"number of entries: {}\" . format ( len ( dataframe ))) dup_id = dataframe . duplicated ( [ \"TextID\" ] , keep = False ) print ( \"duplicated entries: {}\" . format ( len ( dataframe [ dup_id ] ))) print ( dataframe [ dup_id ] ) samples_dict = dataframe . groupby ( [ \"TextID\" ] ). apply ( to_article_dict ). to_dict () print ( \"keep first, drop duplicated!\" ) content_length_lower_threshold = 100 long_id = dataframe [ \"Content\" ] . apply ( lambda x : True if len ( x ) < content_length_lower_threshold else False ) print ( \"number of entries which Content shorter then {} words: {}\" . format ( content_length_lower_threshold , len ( dataframe [ long_id ] ) ) ) print ( \"no drop, just show information.\" ) sample_articles = defaultdict ( defaultdict ) sample_articles [ \"Articles\" ] . update ( samples_dict ) print ( \"number of remaining entries: {}\" . format ( len ( sample_articles [ \"Articles\" ] ))) # output articles . json with open ( save_path , \"w\" , encoding = \"utf-8\" ) as outfile : json . dump ( sample_articles , outfile , ensure_ascii = False , indent = 4 ) to_excel_AI_clerk_labeled_data def to_excel_AI_clerk_labeled_data ( dataframe , save_path ) View Source def to_excel_AI_clerk_labeled_data ( dataframe , save_path ): ## unescape OOXML string dataframe = dataframe . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) ## remove illegal characters dataframe = remove_illegal_characters ( dataframe ) df1 = ( dataframe . T . sort_values ([ \"TextID\" , \"Annotator\" ]) . rename_axis ( \"SerialID\" ) . reset_index () ) df1 = df1 [ sorted ( df1 . columns )] columns_list = list ( df1 . columns ) print ( columns_list ) columns_list = reorder_column ( columns_list , \"TextID\" , \"Annotator\" ) columns_list = reorder_column ( columns_list , \"SerialID\" , \"TextID\" ) columns_list = reorder_column ( columns_list , \"Title\" , \"Content\" ) columns_list = reorder_column ( columns_list , \"Author\" , \"Title\" ) columns_list = reorder_column ( columns_list , \"TextTime\" , \"Comment\" ) print ( columns_list ) df2 = df1 [ columns_list ] ########### extract document label ############# df_document_label = extract_dict ( df2 , [ \"TextID\" , \"Annotator\" ], \"Summary\" ) ## reduce multi-selection option into string def multi_selection_to_string ( option_columns ): # print(option_columns) option_columns_list = list ( filter ( lambda y : pd . notnull ( y ), option_columns )) # check if option_columns_list is empty or [''] if len ( option_columns_list ) == 0 : result = np . nan elif len ( option_columns_list ) == 1 and option_columns_list [ 0 ] == \"\" : result = np . nan else : result = reduce ( lambda a , b : a + \", \" + b , option_columns_list ) if result == \"\" : # print(list(option_columns)) # print(len(option_columns_list)) result = np . nan return result ### use ordered set to keep columns order od = OrderedDict ( df_document_label . columns . to_flat_index ()) option_columns_list = list ( od . keys ()) df_document_label_tmp = pd . DataFrame ( columns = option_columns_list ) df_document_label_tmp [ \"TextID\" ] = df_document_label [ \"TextID\" ] df_document_label_tmp [ \"Annotator\" ] = df_document_label [ \"Annotator\" ] option_columns_list . remove ( \"TextID\" ) option_columns_list . remove ( \"Annotator\" ) ### flatten all option columns for option_column in option_columns_list : df_document_label_tmp [ option_column ] = df_document_label [ option_column ] . apply ( lambda x : multi_selection_to_string ( x ), axis = 1 ) df_document_label = pd . merge ( df2 [[ \"TextID\" , \"Annotator\" ]], df_document_label_tmp , how = \"left\" , on = [ \"TextID\" , \"Annotator\" ], ) ########## create doc label compare view ########## df_doc_label_cmp = pd . pivot_table ( df_document_label , values = option_columns_list , index = [ \"TextID\" ], columns = [ \"Annotator\" ], aggfunc = lambda x : x . iloc [ 0 ], ) df_doc_label_cmp = df_doc_label_cmp . reset_index () ########## extract sentence label ############ df_sentence_label_tmp = extract_dict ( df2 , [ \"TextID\" , \"Annotator\" ], \"TermTab\" ) sentence_label_index_dict = OrderedDict ( df_sentence_label_tmp . columns . to_flat_index () ) sent_label_column_list = list ( sentence_label_index_dict . keys ()) # print(sent_label_column_list) sent_label_column_list . remove ( \"TextID\" ) sent_label_column_list . remove ( \"Annotator\" ) ## drop unused level of multi index to avoid KeyError df_sentence_label_tmp = df_sentence_label_tmp . droplevel ( 1 , axis = 1 ) df_sentence_label_tmp = df_sentence_label_tmp . melt ( id_vars = [ \"TextID\" , \"Annotator\" ], value_vars = sent_label_column_list , var_name = \"Sent_Label\" , value_name = \"Sentence\" , ) df_sentence_label_tmp = df_sentence_label_tmp . dropna () df_sentence_label_tmp [ \"Sent_Label\" ] = df_sentence_label_tmp [ \"Sent_Label\" ] . apply ( lambda x : x . split ( \"_\" )[ 0 ] ) df_sentence_label_tmp . reset_index ( drop = True , inplace = True ) df_sentence_label = pd . merge ( df_document_label , df_sentence_label_tmp , how = \"left\" , on = [ \"TextID\" , \"Annotator\" ] ) df_sentence_label = df_sentence_label . sort_values ( [ \"TextID\" , \"Annotator\" , \"Sent_Label\" ] ) ######### create sent label cmp long view ######## # this will group sentence by 'TextID', 'Annotator' and 'Sent_Label' df_sentence_sector = df_sentence_label_tmp . groupby ( [ \"TextID\" , \"Annotator\" , \"Sent_Label\" ] ) # because there may be many sentences belong to one Sent_Label, # when arragate, save these sentence into a list df_sent_label_cmp_long_tmp = df_sentence_sector . agg ( lambda x : [ y for y in x ]) # this will separate each sentence into columns, # so if there are 21 sentence, column's name will be a list of 0-20 df_sent_label_cmp_long_tmp = df_sent_label_cmp_long_tmp [ \"Sentence\" ] . apply ( lambda x : pd . Series ( x ) ) # add new column level: Sentence column_level_list = [[ \"Sentence\" ], df_sent_label_cmp_long_tmp . columns ] df_sent_label_cmp_long_tmp . columns = pd . MultiIndex . from_product ( column_level_list , names = [ \"\" , \"Sent_num\" ] ) # stack 'Sent_num' column as row index df_sent_label_cmp_long_tmp = df_sent_label_cmp_long_tmp . stack () # reset_index will turn all row index into columns df_sent_label_cmp_long_tmp = df_sent_label_cmp_long_tmp . reset_index () # set multilevel index with this order: 'TextID', 'Annotator', 'Sent_Label', 'Sent_num' df_sent_label_cmp_long_tmp = df_sent_label_cmp_long_tmp . set_index ( [ \"TextID\" , \"Annotator\" , \"Sent_Label\" , \"Sent_num\" ] ) def merge ( x , y ): if isinstance ( x , list ): new_x = x + y else : new_x = \"error\" return new_x # use 'TextID', 'Sent_Label', 'Sent_num' as index, # and turn 'Annotator''s value into columns, eg. # if there were four possible values of Annotator: A,B,C,D # then use A,B,C,B as new column names, pivot under value column 'Sentence' # in case there are multiple items with same index, aggfunc will be used. # it will pass a pd.Series object into aggfunc, # we cae use reduce to return sum over the series, # if each item in series is a list object, # we can define a merge function to sum these list up into one list. df_sent_label_cmp_long = pd . pivot_table ( df_sent_label_cmp_long_tmp , values = [ \"Sentence\" ], index = [ \"TextID\" , \"Sent_Label\" , \"Sent_num\" ], columns = [ \"Annotator\" ], aggfunc = lambda x : reduce ( merge , x ), ) # add additional level in the multiindex: 'Sent' # for sent_doc_cmp use col_index_names = list ( df_sent_label_cmp_long . columns . names ) df_sent_label_cmp_long . columns = pd . MultiIndex . from_tuples ( map ( lambda x : ( x [ 0 ], \"Sent\" , x [ 1 ]), df_sent_label_cmp_long . columns ), names = [ col_index_names [ 0 ], \"\" , col_index_names [ 1 ]], ) ######### create sentence label wide view ########## df_sentence_label_wide = df_sent_label_cmp_long . unstack () . unstack () df_sentence_label_wide . columns = df_sentence_label_wide . columns . swaplevel ( 3 , 4 ) df_sentence_label_wide . sort_index ( axis = 1 , level = 3 , inplace = True ) df_sentence_label_wide . columns = pd . MultiIndex . from_tuples ( map ( lambda x : ( x [ 2 ], str ( x [ 3 ]) + \"_\" + \"{:0>2d}\" . format ( x [ 4 ])), df_sentence_label_wide . columns , ) ) df_sentence_label_wide = df_sentence_label_wide . stack ( level = 0 ) df_sentence_label_wide . index = df_sentence_label_wide . index . rename ( [ \"TextID\" , \"Annotator\" ] ) df_sentence_label_wide = df_sentence_label_wide . reset_index () df_sentence_label_wide = pd . merge ( df_document_label , df_sentence_label_wide , how = \"left\" , on = [ \"TextID\" , \"Annotator\" ], ) empty_cols_exclude_first = df_sentence_label_wide . columns [ df_sentence_label_wide . columns . str . contains ( \"empty_(?:[0][1-9]|[1-9][0-9])\" ) ] df_sentence_label_wide = df_sentence_label_wide . drop ( empty_cols_exclude_first , axis = 1 ) ######### create sent label cmp wide views ########## df_sent_label_cmp_wide = df_sent_label_cmp_long . unstack () df_sent_label_cmp_wide . columns = df_sent_label_cmp_wide . columns . swaplevel ( 2 , 3 ) df_sent_label_cmp_wide . sort_index ( axis = 1 , level = 2 , inplace = True ) ######## create sent_doc_cmp views ######### df_doc_tmp = df_doc_label_cmp . set_index ( \"TextID\" ) df_doc_tmp = pd . concat ({ \"Doc_Label\" : df_doc_tmp }, names = [ \"label_kind\" ], axis = 1 ) df_sent_tmp = df_sent_label_cmp_long . reset_index () # to prevent warning: PerformanceWarning: dropping on a non-lexsorted multi-index without a level parameter may impact performance. # need to sort multi-index # see: [python - What exactly is the lexsort_depth of a multi-index Dataframe? - Stack Overflow](https://stackoverflow.com/questions/27116739/what-exactly-is-the-lexsort-depth-of-a-multi-index-dataframe) df_sent_tmp . sort_index ( axis = 1 , level = 0 , inplace = True ) df_sent_doc_cmp_tmp = pd . merge ( df_doc_tmp , df_sent_tmp , how = \"left\" , on = [ \"TextID\" ]) df_sent_doc_cmp_tmp . columns = df_sent_doc_cmp_tmp . columns . swaplevel ( 1 , 2 ) df_sent_doc_cmp_tmp . columns = df_sent_doc_cmp_tmp . columns . swaplevel ( 0 , 1 ) df_sent_doc_cmp_tmp . sort_index ( axis = 1 , level = 0 , inplace = True ) sent_doc_cols = list ( df_sent_doc_cmp_tmp . columns ) new_sent_doc_cols = reorder_column ( sent_doc_cols , ( \"\" , \"TextID\" , \"\" ), ( \"\" , \"Sent_Label\" , \"\" ) ) df_sent_doc_cmp = df_sent_doc_cmp_tmp [ new_sent_doc_cols ] df_sent_doc_cmp = df_sent_doc_cmp . set_index ( [( \"\" , \"TextID\" , \"\" ), ( \"\" , \"Sent_Label\" , \"\" ), ( \"\" , \"Sent_num\" , \"\" )] ) df_sent_doc_cmp . index = df_sent_doc_cmp . index . rename ( [ \"TextID\" , \"Sent_Label\" , \"Sent_num\" ] ) ########## extract content ########## drop_columns_list = reorder_column ( columns_list , \"Summary\" , np . inf ) drop_columns_list = reorder_column ( drop_columns_list , \"TermTab\" , np . inf ) print ( drop_columns_list ) ## explicit copy to avoid SettingWithCopyWarning warning df_content = df2 [ drop_columns_list ] . copy () ## remove tags in content df_content [ \"Content(remove_tag)\" ] = df_content [ \"Content\" ] . apply ( lambda x : re . sub ( r \"(\uff1c(\uff0f)?\uff0a(.+?)_\\d{1,2}\uff0a\uff1e)\" , \"\" , x ) ) # write to excel with pd . ExcelWriter ( save_path , options = { \"strings_to_urls\" : False }, engine = \"openpyxl\" ) as writer : df_sent_doc_cmp . to_excel ( writer , sheet_name = \"sent_doc_cmp\" , index = True ) df_doc_label_cmp . to_excel ( writer , sheet_name = \"doc_label_cmp\" , index = True ) df_sent_label_cmp_long . to_excel ( writer , sheet_name = \"sent_label_cmp(long)\" , index = True ) df_sent_label_cmp_wide . to_excel ( writer , sheet_name = \"sent_label_cmp(wide)\" , index = True ) df_sentence_label_wide . to_excel ( writer , sheet_name = \"sentence_label(wide)\" , index = False ) df_content . to_excel ( writer , sheet_name = \"contents\" , index = False ) df_document_label . to_excel ( writer , sheet_name = \"document_label\" , index = False ) df_sentence_label . to_excel ( writer , sheet_name = \"sentence_label\" , index = False ) for ws in writer . sheets . values (): \"\"\" fix column headers and row headers no font name issue need to use engine='openpyxl' \"\"\" # row_level = df_sent_doc_cmp.index.nlevels # print(row_level) for row in ws . iter_rows ( min_row = 1 , max_row = 1 ): \"\"\" walk through each cell of first row to assign font name \"\"\" for cell in row : # print(cell) font_params = cell . font . __dict__ if font_params [ \"name\" ] is None : font_params [ \"name\" ] = \"Calibri\" cell . font = Font ( ** font_params ) return ( df_content , df_document_label , df_sentence_label , df_sentence_label_wide , df_doc_label_cmp , df_sent_label_cmp_long , df_sent_label_cmp_wide , df_sent_doc_cmp , ) unescape_OOXML def unescape_OOXML ( string ) View Source def unescape_OOXML ( string ) : def remove_character ( char ) : print ( \"removed illegal char!\" ) return r \"\" def _sub ( match ) : \"\"\" Callback to unescape chars \"\"\" char = chr ( int ( match . group ( 1 ), 16 )) # [ Convert regular Python string to raw string - Stack Overflow ] # ( https: //stackoverflow.com/questions/4415259/convert-regular-python-string-to-raw-string) # [ python - Pythonic way to do base conversion - Stack Overflow ] # ( https: //stackoverflow.com/questions/28824874/pythonic-way-to-do-base-conversion) print ( \"found char {}, which int in octal number is: {}\" . format ( char . encode ( \"unicode_escape\" ), oct ( ord ( char )) ) ) # remove carriage return if char == \" \\r \" : print ( \"removed!\" ) char = \"\" else : # remove illegal characters char = ILLEGAL_CHARACTERS_RE . sub ( remove_character , char ) return char string = ESCAPED_REGEX . sub ( _sub , string ) return string","title":"Datatag Helper"},{"location":"reference/DataTag_helper/#module-datatag_helper","text":"None None View Sourceusr/bin/env python3 # -*- coding:utf-8 -*- ### # File: /lib/AIClerk_helper.py # Project: suidice-text-detection # Created Date: Monday, May 4th 2020, 3:06:41 pm # Author: Allenyl(allen7575@gmail.com>) # ----- # Last Modified: Thursday, January 1st 1970, 12:00:00 am # Modified By: Allenyl(allen7575@gmail.com) # ----- # Copyright 2018 - 2020 Allenyl Copyright, Allenyl Company # ----- # license: # All shall be well and all shall be well and all manner of things shall be well. # We're doomed! # ------------------------------------ # HISTORY: # Date By Comments # ---------- --- --------------------------------------------------------- ### ## Non-ASCII output hangs execution in PyInstaller packaged app \u00b7 Issue #520 \u00b7 chriskiehl/Gooey ## https://github.com/chriskiehl/Gooey/issues/520 import codecs import copy import hashlib import json import os import platform import re import sys from collections import Counter , OrderedDict , defaultdict from functools import reduce from pathlib import Path # from sklearn.utils import shuffle import emoji import numpy as np import pandas as pd from chardet.universaldetector import UniversalDetector # import argparse from gooey import Gooey , GooeyParser from openpyxl.styles import Font from sklearn.model_selection import StratifiedShuffleSplit # from lib.AIClerk_helper import to_AI_clerk_batch_upload_json if sys . stdout . encoding != \"UTF-8\" : sys . stdout = codecs . getwriter ( \"utf-8\" )( sys . stdout . buffer , \"strict\" ) if sys . stderr . encoding != \"UTF-8\" : sys . stderr = codecs . getwriter ( \"utf-8\" )( sys . stderr . buffer , \"strict\" ) # use sqlite db to share data between gui and cli # because gui will excute this file with cli args to finish its work, # it needs a way to know what data is change in gui screen. from sqlitedict import SqliteDict MY_DB_FILE = \"./my_db.sqlite\" # mydict = SqliteDict(MY_DB_FILE, autocommit=True) # try: # mydict[\"global_choies\"] # except KeyError: # mydict[\"global_choies\"] = [] # share args across different event callbacks global_args = defaultdict ( list ) def patch_gooey_gui_component ( mydict ): \"\"\"Monkey patch gooey's gui components, like: Dropdown, FileChooser, GooeyApplication,...etc. To avoid `ImportError: libXxf86vm.so.1` while import, we enclose patch code into a function, and call it when we are going into GUI mode. Returns: [type]: [description] \"\"\" import wx # from gooey.gui.lang.i18n import _ ###### ## [Feature request: Allow general callbacks for validation \u00b7 Issue #293 \u00b7 chriskiehl/Gooey] ## (https://github.com/chriskiehl/Gooey/issues/293) # from gooey.gui.components.widgets.bases import TextContainer # oldGetValue = TextContainer.getValue # # def newGetValue(self): # result = oldGetValue(self) # userValidator = self._options['validator']['callback'] # message = self._options['validator']['message'] # value = self.getWidgetValue() # validates = userValidator(value) # result['test'] = False # result['error'] = 'test' # return result # # TextContainer.getValue = newGetValue ###### # [Gooey/dropdown.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/dropdown.py) from gooey.gui.components.widgets.dropdown import Dropdown Dropdown_oldGetWidget = Dropdown . getWidget # from gooey.gui import formatters # def newFormatOutput(self, metadata, value): # print(\"debug2\") # print(\"metadata\", metadata) # print(\"value\", value) # return formatters.dropdown(metadata, value) # def newSetValue(self, value): # ## +1 to offset the default placeholder value # index = self._meta['choices'].index(value) + 1 # print(\"debug\", self._meta['choices']) # self.widget.SetSelection(index) # def newGetWidgetValue(self): # value = self.widget.GetValue() # # filter out the extra default option that's # # appended during creation # print(value) # if value == _('select_option'): # return None # return value def Dropdown_newGetWidget ( self , parent , * args , ** options ): widget = Dropdown_oldGetWidget ( self , parent , * args , ** options ) # [wxPython ComboBox & Choice\u7c7b - WxPython\u6559\u7a0b\u2122] # (https://www.yiibai.com/wxpython/wx_combobox_choice_class.html) # [wx.ComboBox \u2014 wxPython Phoenix 4.1.1a1 documentation] # (https://wxpython.org/Phoenix/docs/html/wx.ComboBox.html) widget . Bind ( wx . EVT_COMBOBOX_DROPDOWN , self . OnCombo ) return widget def Dropdown_newOnCombo ( self , event ): def get_choices ( input_file ): try : # specify engine use 'openpyxl' to avoid not found xlrd error new_choices = list ( pd . read_excel ( input_file , sheet_name = \"document_label\" , index_col = 0 , nrows = 0 , engine = \"openpyxl\" , ) ) message = \"\" self . setErrorString ( message ) self . showErrorString ( False ) # force refresh parent screen # python - Update/Refresh Dynamically\u2013Created WxPython Widgets - Stack Overflow # https://stackoverflow.com/questions/10368948/update-refresh-dynamically-created-wxpython-widgets self . GetParent () . Layout () except Exception as e : # message = \"No sheet named 'document_label'\" # show actual exception message for easier debug message = repr ( e ) # print(message) self . setErrorString ( message ) self . showErrorString ( True ) # force refresh parent screen # python - Update/Refresh Dynamically\u2013Created WxPython Widgets - Stack Overflow # https://stackoverflow.com/questions/10368948/update-refresh-dynamically-created-wxpython-widgets self . GetParent () . Layout () new_choices = [] return new_choices current_input_file = global_args [ \"input_file\" ] try : self . previous_input_file except Exception : self . previous_input_file = \"\" if self . previous_input_file != current_input_file : self . new_choices = get_choices ( current_input_file ) self . previous_input_file = current_input_file # save self.new_choices into sqlite db for later access mydict [ \"global_choies\" ] = self . new_choices # [python - Dynamically change the choices in a wx.ComboBox() - Stack Overflow] # (https://stackoverflow.com/questions/682923/dynamically-change-the-choices-in-a-wx-combobox) self . setOptions ( self . new_choices ) Dropdown . getWidget = Dropdown_newGetWidget Dropdown . OnCombo = Dropdown_newOnCombo # Dropdown.setValue = newSetValue # Dropdown.getWidgetValue = newGetWidgetValue # Dropdown.formatOutput = newFormatOutput # [Gooey/choosers.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/choosers.py) # [Gooey/chooser.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/core/chooser.py#L65) # [Gooey/chooser.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/core/chooser.py#L13) # [Gooey/text_input.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/core/text_input.py#L7) # [Gooey/bases.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/bases.py#L170) from gooey.gui.components.widgets.core.chooser import FileChooser FileChooser_old_init = FileChooser . __init__ ## monkey patch __init__ def FileChooser_new_init ( self , parent , * args , ** kwargs ): FileChooser_old_init ( self , parent , * args , ** kwargs ) # bind event wx.EVT_TEXT to trigger self.OnFileChooser when text change # [wx.TextCtrl \u2014 wxPython Phoenix 4.1.1a1 documentation] # (https://wxpython.org/Phoenix/docs/html/wx.TextCtrl.html) # [wxPython - TextCtrl Class - Tutorialspoint] # (https://www.tutorialspoint.com/wxpython/wx_textctrl_class.htm) self . widget . Bind ( wx . EVT_TEXT , self . OnFileChooser ) ## monkey patch OnFileChooser def FileChooser_newOnFileChooser ( self , event ): # read text area value to global_args global_args [ \"input_file\" ] = self . widget . getValue () # print(global_args) FileChooser . __init__ = FileChooser_new_init FileChooser . OnFileChooser = FileChooser_newOnFileChooser # [Gooey/application.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/containers/application.py#L29) from gooey.gui.containers.application import GooeyApplication ## monkey patch onClose def newOnClose ( self , * args , ** kwargs ): \"\"\"Cleanup the top level WxFrame and shutdown the process\"\"\" self . Destroy () # print(\"onClose\") # remove db file when close # [sqlite - Python PermissionError: [WinError 32] The process cannot access the file..... but my file is closed - Stack Overflow] # (https://stackoverflow.com/questions/59482990/python-permissionerror-winerror-32-the-process-cannot-access-the-file-bu) mydict . close () os . remove ( MY_DB_FILE ) sys . exit () GooeyApplication . onClose = newOnClose # navigation option must be upper cased 'TABBED', instead of 'Tabbed' @Gooey ( program_name = \"DataTag Helper (\u6a19\u8a3b\u8f49\u6a94\u5c0f\u5e6b\u624b) v0.8.6\" , navigation = \"TABBED\" , tabbed_groups = False , default_size = ( 525 , 670 ), ) def parse_args ( mydict , args = None ): if args is None : args = sys . argv [ 1 :] # parser = argparse.ArgumentParser() parser = GooeyParser () subs = parser . add_subparsers ( help = \"commands\" , dest = \"command\" ) ### for original file sub_parser1 = subs . add_parser ( \"original\" , prog = \"\u672a\u6a19\u8a3b\u539f\u59cb\u6a94\u6848\" , help = \"\u672a\u6a19\u8a3b\u539f\u59cb\u6a94\u6848\" ) sub_parser1_1 = sub_parser1 . add_argument_group ( \"input file(s)\" , \"choose unlabeled file(s)\" , gooey_options = { \"show_border\" : True , \"show_underline\" : True , \"columns\" : 1 }, ) # add default selection option # https://github.com/chriskiehl/Gooey/issues/590#issue-650474511 mutex_sub_parser1 = sub_parser1_1 . add_mutually_exclusive_group ( required = True , gooey_options = { \"show_border\" : True , \"show_underline\" : True , \"columns\" : 1 , 'initial_selection' : 0 }, ) #### input txt files mutex_sub_parser1 . add_argument ( \"-d\" , \"--input-dir\" , help = \"dir that contains input files(.txt)\" , dest = \"input_dir\" , default = None , widget = \"DirChooser\" , ) #### input excel files mutex_sub_parser1 . add_argument ( \"-i\" , \"--input_file\" , help = \"input filename (excel)\" , dest = \"input_file\" , default = None , widget = \"FileChooser\" , ) sub_parser1_2 = sub_parser1 . add_argument_group ( \"options\" , \"only works for input excel file\" , gooey_options = { \"show_border\" : True , \"show_underline\" : True , \"columns\" : 2 }, ) sub_parser1_2 . add_argument ( \"--emojilize\" , help = \"turn text to emoji (uncheck to reverse)\" , dest = \"emojilize\" , action = \"store_true\" , ) sub_parser1_2 . set_defaults ( emojilize = False ) sub_parser1_2 . add_argument ( \"--to-excel\" , help = \"output excel file (uncheck to output json)\" , dest = \"to_excel\" , action = \"store_true\" , ) sub_parser1_2 . set_defaults ( to_excel = False ) ### for labeled file sub_parser2 = subs . add_parser ( \"labeled\" , prog = \"\u5df2\u6a19\u8a3b\u6a94\u6848\" , help = \"\u5df2\u6a19\u8a3b\u6a94\u6848\" ) sub_parser2 = sub_parser2 . add_argument_group ( \"labeled file to excel\" , \"choose the labeled file which want to be convert to Excel file(s)\" , gooey_options = { \"show_border\" : True , \"show_underline\" : True , \"columns\" : 1 }, ) sub_parser2 . add_argument ( \"-i\" , \"--input_file\" , help = \"input filename (json)\" , dest = \"input_file\" , default = None , widget = \"FileChooser\" , ) ### for labeled file want to second upload sub_parser2_1 = subs . add_parser ( \"second_upload\" , prog = \"\u6a19\u8a3b\u4e8c\u6b21\u4e0a\u50b3\" , help = \"\u5df2\u6a19\u8a3b\u6a94\u6848\u4e8c\u6b21\u4e0a\u50b3\" ) sub_parser2_1 = sub_parser2_1 . add_argument_group ( \"second upload\" , \"choose the labeled file which want to be second upload (for double check purpose)\" , gooey_options = { \"show_border\" : True , \"show_underline\" : True , \"columns\" : 1 }, ) sub_parser2_1 . add_argument ( \"-i\" , \"--input_file\" , help = \"input filename (json)\" , dest = \"input_file\" , default = None , widget = \"FileChooser\" , ) ### for second labeled file convert sub_parser2_2 = subs . add_parser ( \"second_labeled\" , prog = \"\u4e8c\u6b21\u6a19\u8a3b\u8f49\u63db\" , help = \"\u4e8c\u6b21\u6a19\u8a3b\u8f49\u63db\" ) sub_parser2_2 = sub_parser2_2 . add_argument_group ( \"second labeled convertion\" , \"choose the first and second labeled files which wants to be converted to final json\" , gooey_options = { \"show_border\" : True , \"show_underline\" : True , \"columns\" : 1 }, ) sub_parser2_2 . add_argument ( \"-i1\" , \"--input_file_1\" , nargs = \"*\" , help = \"choose multiple files (first labeled json)\" , dest = \"input_file_1\" , default = None , widget = \"MultiFileChooser\" , ) sub_parser2_2 . add_argument ( \"-i2\" , \"--input_file_2\" , help = \"input filename (second labeled json)\" , dest = \"input_file_2\" , default = None , widget = \"FileChooser\" , ) ### concat files sub_parser3 = subs . add_parser ( \"concat\" , prog = \"\u5408\u4f75\u6a94\u6848\" , help = \"\u5408\u4f75\u6a94\u6848\" ) sub_parser3 = sub_parser3 . add_argument_group ( \"\" ) sub_parser3 . add_argument ( \"-i\" , \"--input_file\" , help = \"input filenames (excel)\" , dest = \"input_files\" , default = None , widget = \"MultiFileChooser\" , ) ### for random tran/test split sub_parser4 = subs . add_parser ( \"split\" , prog = \"\u5206\u5272\u6a94\u6848\" , help = \"\u5206\u5272\u6a94\u6848\" ) sub_parser4 = sub_parser4 . add_argument_group ( \"\" ) sub_parser4 . add_argument ( \"-i\" , \"--input_file\" , help = \"input filename (excel)\" , dest = \"input_file\" , default = None , widget = \"FileChooser\" , ) sub_parser4 . add_argument ( \"-y\" , \"--y_column\" , help = \"y column\" , dest = \"y_col\" , default = None , widget = \"Dropdown\" , choices = mydict [ \"global_choies\" ], ) # parser.add_argument('--type', '-t', choices=getLob()) # args, unknown = parser.parse_known_args() args = parser . parse_args ( args ) return args def to_AI_clerk_batch_upload_json ( dataframe , save_path ): def to_article_dict ( x ): return { \"Title\" : x . Title . tolist ()[ 0 ], \"Content\" : x . Content . tolist ()[ 0 ], \"Author\" : x . Author . tolist ()[ 0 ], \"Time\" : x . Time . tolist ()[ 0 ], } print ( \"number of entries: {} \" . format ( len ( dataframe ))) dup_id = dataframe . duplicated ([ \"TextID\" ], keep = False ) print ( \"duplicated entries: {} \" . format ( len ( dataframe [ dup_id ]))) print ( dataframe [ dup_id ]) samples_dict = dataframe . groupby ([ \"TextID\" ]) . apply ( to_article_dict ) . to_dict () print ( \"keep first, drop duplicated!\" ) content_length_lower_threshold = 100 long_id = dataframe [ \"Content\" ] . apply ( lambda x : True if len ( x ) < content_length_lower_threshold else False ) print ( \"number of entries which Content shorter then {} words: {} \" . format ( content_length_lower_threshold , len ( dataframe [ long_id ]) ) ) print ( \"no drop, just show information.\" ) sample_articles = defaultdict ( defaultdict ) sample_articles [ \"Articles\" ] . update ( samples_dict ) print ( \"number of remaining entries: {} \" . format ( len ( sample_articles [ \"Articles\" ]))) # output articles.json with open ( save_path , \"w\" , encoding = \"utf-8\" ) as outfile : json . dump ( sample_articles , outfile , ensure_ascii = False , indent = 4 ) # read ouputed samples to test # with open('./suicide_text_sample.json', 'r') as outfile: # temp_dict = json.load(outfile) # try: # display(temp_dict) # except: # pass def get_TextID ( df ): return df . apply ( lambda x : hashlib . md5 ( x [ 0 ] . encode ( \"utf-8\" )) . hexdigest ()[: 10 ], axis = 1 ) # ### \u6e05\u7406\u8cc7\u6599\u683c\u5f0f def clean_data ( df ): empty_entries = df [ \"Content\" ] . isnull () print ( \"number of empty content entries: {} \" . format ( len ( df [ empty_entries ]))) df_cleaned = df [ ~ empty_entries ] . copy () if len ( df [ empty_entries ]): print ( \"drop empty!\" ) drop_columns = df_cleaned . columns . str . contains ( \"Unnamed\" ) # print(any(df_cleaned.columns.str.contains(\"^ID$\"))) # if not any(df_cleaned.columns.str.contains(\"^TextID$\")): leave_columns = df_cleaned . columns [ ~ drop_columns ] . tolist () # df_cleaned['ID'] = df_cleaned[[\"Content\"]].apply(lambda x: hashlib.md5(x[0].encode('utf-8')).hexdigest()[:10],axis=1) df_cleaned = df_cleaned [ leave_columns ] # print(df_cleaned.head()) df_cleaned = df_cleaned . sort_values ( \"TextID\" ) . reset_index ( drop = True ) df_cleaned [ \"Author\" ] = df_cleaned . apply ( lambda x : x . Poster + \"/\" + x . Gender , axis = 1 ) df_cleaned [ \"Time\" ] = df_cleaned . apply ( lambda x : str ( x . Date ) + \"/\" + str ( x . Time ), axis = 1 ) return df_cleaned def emoji_to_text ( df ): df_deemojilized = df . copy () ## \u8f49\u63db emoji \u683c\u5f0f\u6210 :emoji: ## python - How to replace emoji to word in a text? - Stack Overflow ## https://stackoverflow.com/questions/57580288/how-to-replace-emoji-to-word-in-a-text df_deemojilized [ \"Content\" ] = df [[ \"Content\" ]] . apply ( lambda x : emoji . demojize ( x [ 0 ]), axis = 1 ) df_deemojilized [ \"Title\" ] = df [[ \"Title\" ]] . apply ( lambda x : emoji . demojize ( x [ 0 ]), axis = 1 ) return df_deemojilized def text_to_emoji ( df ): df_emojilized = df . copy () ## \u5c07:emoji: \u63db\u56de unicode character df_emojilized [ \"Content\" ] = df [[ \"Content\" ]] . apply ( lambda x : emoji . emojize ( x [ 0 ]), axis = 1 ) df_emojilized [ \"Title\" ] = df [[ \"Title\" ]] . apply ( lambda x : emoji . emojize ( x [ 0 ]), axis = 1 ) return df_emojilized def reorder_column ( columns_list , selected_column_name , insert_before_column_name = None ): \"\"\" columns_list: the list of columns to be reordered selected_column_name: the column name which wants to be inserted to the point before column `insert_before_column_name` insert_before_column_name: the column name which act as fix point relative to the `selected_column_name` \"\"\" columns_list = copy . copy ( columns_list ) selected_index = columns_list . index ( selected_column_name ) selected_item = columns_list . pop ( selected_index ) # drop selected column when insert_before_column_name is infinity if insert_before_column_name is np . inf : return columns_list # print(insert_before_column_name is float('inf')) # insert to the end of column list when insert_before_column_name is None if insert_before_column_name is None : insert_point_index = len ( columns_list ) else : insert_point_index = columns_list . index ( insert_before_column_name ) columns_list . insert ( insert_point_index , selected_item ) return columns_list def extract_dict ( df , id_column_list , dict_column ): df_tmp = df [ id_column_list + [ dict_column ]] . set_index ( id_column_list ) df_tmp = pd . DataFrame ( df_tmp . apply ( lambda x : { \"empty\" : \"nan\" } if len ( x [ 0 ]) == 0 else x [ 0 ], axis = 1 ) ) df_tmp = df_tmp . apply ( lambda x : pd . DataFrame . from_dict ( x [ 0 ], orient = \"index\" ) . stack (), axis = 1 ) df_tmp = df_tmp . reset_index ( level = id_column_list ) return df_tmp # these illegal characters is represented by octal escape # [Regular Expressions Reference: Special and Non-Printable Characters] # (https://www.regular-expressions.info/refcharacters.html) # [(1\u6761\u6d88\u606f)openpyxl.utils.exceptions.IllegalCharacterError \u9519\u8bef\u539f\u56e0\u5206\u6790\u53ca\u89e3\u51b3\u529e\u6cd5_\u6751\u4e2d\u5c11\u5e74\u7684\u4e13\u680f-CSDN\u535a\u5ba2] # (https://blog.csdn.net/javajiawei/article/details/97147219) ILLEGAL_CHARACTERS_RE = re . compile ( r \"[\\000-\\010]|[\\013-\\014]|[\\016-\\037]\" ) # [openpyxl.utils.escape \u2014 openpyxl 3.0.5 documentation] # (https://openpyxl.readthedocs.io/en/stable/_modules/openpyxl/utils/escape.html) ESCAPED_REGEX = re . compile ( \"_x([0-9A-Fa-f] {4} )_\" ) def unescape_OOXML ( string ): def remove_character ( char ): print ( \"removed illegal char!\" ) return r \"\" def _sub ( match ): \"\"\" Callback to unescape chars \"\"\" char = chr ( int ( match . group ( 1 ), 16 )) # [Convert regular Python string to raw string - Stack Overflow] # (https://stackoverflow.com/questions/4415259/convert-regular-python-string-to-raw-string) # [python - Pythonic way to do base conversion - Stack Overflow] # (https://stackoverflow.com/questions/28824874/pythonic-way-to-do-base-conversion) print ( \"found char {} , which int in octal number is: {} \" . format ( char . encode ( \"unicode_escape\" ), oct ( ord ( char )) ) ) # remove carriage return if char == \" \\r \" : print ( \"removed!\" ) char = \"\" else : # remove illegal characters char = ILLEGAL_CHARACTERS_RE . sub ( remove_character , char ) return char string = ESCAPED_REGEX . sub ( _sub , string ) return string ## [pandas - How to remove illegal characters so a dataframe can write to Excel - Stack Overflow] ## (https://stackoverflow.com/questions/42306755/how-to-remove-illegal-characters-so-a-dataframe-can-write-to-excel) def remove_illegal_characters ( dataframe ): # dataframe = dataframe.applymap(lambda x: x.encode('unicode_escape').decode('utf-8') if isinstance(x, str) else x) dataframe = dataframe . applymap ( lambda x : ILLEGAL_CHARACTERS_RE . sub ( r \"\" , x ) if isinstance ( x , str ) else x ) return dataframe def to_excel_AI_clerk_labeled_data ( dataframe , save_path ): ## unescape OOXML string dataframe = dataframe . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) ## remove illegal characters dataframe = remove_illegal_characters ( dataframe ) df1 = ( dataframe . T . sort_values ([ \"TextID\" , \"Annotator\" ]) . rename_axis ( \"SerialID\" ) . reset_index () ) df1 = df1 [ sorted ( df1 . columns )] columns_list = list ( df1 . columns ) print ( columns_list ) columns_list = reorder_column ( columns_list , \"TextID\" , \"Annotator\" ) columns_list = reorder_column ( columns_list , \"SerialID\" , \"TextID\" ) columns_list = reorder_column ( columns_list , \"Title\" , \"Content\" ) columns_list = reorder_column ( columns_list , \"Author\" , \"Title\" ) columns_list = reorder_column ( columns_list , \"TextTime\" , \"Comment\" ) print ( columns_list ) df2 = df1 [ columns_list ] ########### extract document label ############# df_document_label = extract_dict ( df2 , [ \"TextID\" , \"Annotator\" ], \"Summary\" ) ## reduce multi-selection option into string def multi_selection_to_string ( option_columns ): # print(option_columns) option_columns_list = list ( filter ( lambda y : pd . notnull ( y ), option_columns )) # check if option_columns_list is empty or [''] if len ( option_columns_list ) == 0 : result = np . nan elif len ( option_columns_list ) == 1 and option_columns_list [ 0 ] == \"\" : result = np . nan else : result = reduce ( lambda a , b : a + \", \" + b , option_columns_list ) if result == \"\" : # print(list(option_columns)) # print(len(option_columns_list)) result = np . nan return result ### use ordered set to keep columns order od = OrderedDict ( df_document_label . columns . to_flat_index ()) option_columns_list = list ( od . keys ()) df_document_label_tmp = pd . DataFrame ( columns = option_columns_list ) df_document_label_tmp [ \"TextID\" ] = df_document_label [ \"TextID\" ] df_document_label_tmp [ \"Annotator\" ] = df_document_label [ \"Annotator\" ] option_columns_list . remove ( \"TextID\" ) option_columns_list . remove ( \"Annotator\" ) ### flatten all option columns for option_column in option_columns_list : df_document_label_tmp [ option_column ] = df_document_label [ option_column ] . apply ( lambda x : multi_selection_to_string ( x ), axis = 1 ) df_document_label = pd . merge ( df2 [[ \"TextID\" , \"Annotator\" ]], df_document_label_tmp , how = \"left\" , on = [ \"TextID\" , \"Annotator\" ], ) ########## create doc label compare view ########## df_doc_label_cmp = pd . pivot_table ( df_document_label , values = option_columns_list , index = [ \"TextID\" ], columns = [ \"Annotator\" ], aggfunc = lambda x : x . iloc [ 0 ], ) df_doc_label_cmp = df_doc_label_cmp . reset_index () ########## extract sentence label ############ df_sentence_label_tmp = extract_dict ( df2 , [ \"TextID\" , \"Annotator\" ], \"TermTab\" ) sentence_label_index_dict = OrderedDict ( df_sentence_label_tmp . columns . to_flat_index () ) sent_label_column_list = list ( sentence_label_index_dict . keys ()) # print(sent_label_column_list) sent_label_column_list . remove ( \"TextID\" ) sent_label_column_list . remove ( \"Annotator\" ) ## drop unused level of multi index to avoid KeyError df_sentence_label_tmp = df_sentence_label_tmp . droplevel ( 1 , axis = 1 ) df_sentence_label_tmp = df_sentence_label_tmp . melt ( id_vars = [ \"TextID\" , \"Annotator\" ], value_vars = sent_label_column_list , var_name = \"Sent_Label\" , value_name = \"Sentence\" , ) df_sentence_label_tmp = df_sentence_label_tmp . dropna () df_sentence_label_tmp [ \"Sent_Label\" ] = df_sentence_label_tmp [ \"Sent_Label\" ] . apply ( lambda x : x . split ( \"_\" )[ 0 ] ) df_sentence_label_tmp . reset_index ( drop = True , inplace = True ) df_sentence_label = pd . merge ( df_document_label , df_sentence_label_tmp , how = \"left\" , on = [ \"TextID\" , \"Annotator\" ] ) df_sentence_label = df_sentence_label . sort_values ( [ \"TextID\" , \"Annotator\" , \"Sent_Label\" ] ) ######### create sent label cmp long view ######## # this will group sentence by 'TextID', 'Annotator' and 'Sent_Label' df_sentence_sector = df_sentence_label_tmp . groupby ( [ \"TextID\" , \"Annotator\" , \"Sent_Label\" ] ) # because there may be many sentences belong to one Sent_Label, # when arragate, save these sentence into a list df_sent_label_cmp_long_tmp = df_sentence_sector . agg ( lambda x : [ y for y in x ]) # this will separate each sentence into columns, # so if there are 21 sentence, column's name will be a list of 0-20 df_sent_label_cmp_long_tmp = df_sent_label_cmp_long_tmp [ \"Sentence\" ] . apply ( lambda x : pd . Series ( x ) ) # add new column level: Sentence column_level_list = [[ \"Sentence\" ], df_sent_label_cmp_long_tmp . columns ] df_sent_label_cmp_long_tmp . columns = pd . MultiIndex . from_product ( column_level_list , names = [ \"\" , \"Sent_num\" ] ) # stack 'Sent_num' column as row index df_sent_label_cmp_long_tmp = df_sent_label_cmp_long_tmp . stack () # reset_index will turn all row index into columns df_sent_label_cmp_long_tmp = df_sent_label_cmp_long_tmp . reset_index () # set multilevel index with this order: 'TextID', 'Annotator', 'Sent_Label', 'Sent_num' df_sent_label_cmp_long_tmp = df_sent_label_cmp_long_tmp . set_index ( [ \"TextID\" , \"Annotator\" , \"Sent_Label\" , \"Sent_num\" ] ) def merge ( x , y ): if isinstance ( x , list ): new_x = x + y else : new_x = \"error\" return new_x # use 'TextID', 'Sent_Label', 'Sent_num' as index, # and turn 'Annotator''s value into columns, eg. # if there were four possible values of Annotator: A,B,C,D # then use A,B,C,B as new column names, pivot under value column 'Sentence' # in case there are multiple items with same index, aggfunc will be used. # it will pass a pd.Series object into aggfunc, # we cae use reduce to return sum over the series, # if each item in series is a list object, # we can define a merge function to sum these list up into one list. df_sent_label_cmp_long = pd . pivot_table ( df_sent_label_cmp_long_tmp , values = [ \"Sentence\" ], index = [ \"TextID\" , \"Sent_Label\" , \"Sent_num\" ], columns = [ \"Annotator\" ], aggfunc = lambda x : reduce ( merge , x ), ) # add additional level in the multiindex: 'Sent' # for sent_doc_cmp use col_index_names = list ( df_sent_label_cmp_long . columns . names ) df_sent_label_cmp_long . columns = pd . MultiIndex . from_tuples ( map ( lambda x : ( x [ 0 ], \"Sent\" , x [ 1 ]), df_sent_label_cmp_long . columns ), names = [ col_index_names [ 0 ], \"\" , col_index_names [ 1 ]], ) ######### create sentence label wide view ########## df_sentence_label_wide = df_sent_label_cmp_long . unstack () . unstack () df_sentence_label_wide . columns = df_sentence_label_wide . columns . swaplevel ( 3 , 4 ) df_sentence_label_wide . sort_index ( axis = 1 , level = 3 , inplace = True ) df_sentence_label_wide . columns = pd . MultiIndex . from_tuples ( map ( lambda x : ( x [ 2 ], str ( x [ 3 ]) + \"_\" + \" {:0>2d} \" . format ( x [ 4 ])), df_sentence_label_wide . columns , ) ) df_sentence_label_wide = df_sentence_label_wide . stack ( level = 0 ) df_sentence_label_wide . index = df_sentence_label_wide . index . rename ( [ \"TextID\" , \"Annotator\" ] ) df_sentence_label_wide = df_sentence_label_wide . reset_index () df_sentence_label_wide = pd . merge ( df_document_label , df_sentence_label_wide , how = \"left\" , on = [ \"TextID\" , \"Annotator\" ], ) empty_cols_exclude_first = df_sentence_label_wide . columns [ df_sentence_label_wide . columns . str . contains ( \"empty_(?:[0][1-9]|[1-9][0-9])\" ) ] df_sentence_label_wide = df_sentence_label_wide . drop ( empty_cols_exclude_first , axis = 1 ) ######### create sent label cmp wide views ########## df_sent_label_cmp_wide = df_sent_label_cmp_long . unstack () df_sent_label_cmp_wide . columns = df_sent_label_cmp_wide . columns . swaplevel ( 2 , 3 ) df_sent_label_cmp_wide . sort_index ( axis = 1 , level = 2 , inplace = True ) ######## create sent_doc_cmp views ######### df_doc_tmp = df_doc_label_cmp . set_index ( \"TextID\" ) df_doc_tmp = pd . concat ({ \"Doc_Label\" : df_doc_tmp }, names = [ \"label_kind\" ], axis = 1 ) df_sent_tmp = df_sent_label_cmp_long . reset_index () # to prevent warning: PerformanceWarning: dropping on a non-lexsorted multi-index without a level parameter may impact performance. # need to sort multi-index # see: [python - What exactly is the lexsort_depth of a multi-index Dataframe? - Stack Overflow](https://stackoverflow.com/questions/27116739/what-exactly-is-the-lexsort-depth-of-a-multi-index-dataframe) df_sent_tmp . sort_index ( axis = 1 , level = 0 , inplace = True ) df_sent_doc_cmp_tmp = pd . merge ( df_doc_tmp , df_sent_tmp , how = \"left\" , on = [ \"TextID\" ]) df_sent_doc_cmp_tmp . columns = df_sent_doc_cmp_tmp . columns . swaplevel ( 1 , 2 ) df_sent_doc_cmp_tmp . columns = df_sent_doc_cmp_tmp . columns . swaplevel ( 0 , 1 ) df_sent_doc_cmp_tmp . sort_index ( axis = 1 , level = 0 , inplace = True ) sent_doc_cols = list ( df_sent_doc_cmp_tmp . columns ) new_sent_doc_cols = reorder_column ( sent_doc_cols , ( \"\" , \"TextID\" , \"\" ), ( \"\" , \"Sent_Label\" , \"\" ) ) df_sent_doc_cmp = df_sent_doc_cmp_tmp [ new_sent_doc_cols ] df_sent_doc_cmp = df_sent_doc_cmp . set_index ( [( \"\" , \"TextID\" , \"\" ), ( \"\" , \"Sent_Label\" , \"\" ), ( \"\" , \"Sent_num\" , \"\" )] ) df_sent_doc_cmp . index = df_sent_doc_cmp . index . rename ( [ \"TextID\" , \"Sent_Label\" , \"Sent_num\" ] ) ########## extract content ########## drop_columns_list = reorder_column ( columns_list , \"Summary\" , np . inf ) drop_columns_list = reorder_column ( drop_columns_list , \"TermTab\" , np . inf ) print ( drop_columns_list ) ## explicit copy to avoid SettingWithCopyWarning warning df_content = df2 [ drop_columns_list ] . copy () ## remove tags in content df_content [ \"Content(remove_tag)\" ] = df_content [ \"Content\" ] . apply ( lambda x : re . sub ( r \"(\uff1c(\uff0f)?\uff0a(.+?)_\\d{1,2}\uff0a\uff1e)\" , \"\" , x ) ) # write to excel with pd . ExcelWriter ( save_path , options = { \"strings_to_urls\" : False }, engine = \"openpyxl\" ) as writer : df_sent_doc_cmp . to_excel ( writer , sheet_name = \"sent_doc_cmp\" , index = True ) df_doc_label_cmp . to_excel ( writer , sheet_name = \"doc_label_cmp\" , index = True ) df_sent_label_cmp_long . to_excel ( writer , sheet_name = \"sent_label_cmp(long)\" , index = True ) df_sent_label_cmp_wide . to_excel ( writer , sheet_name = \"sent_label_cmp(wide)\" , index = True ) df_sentence_label_wide . to_excel ( writer , sheet_name = \"sentence_label(wide)\" , index = False ) df_content . to_excel ( writer , sheet_name = \"contents\" , index = False ) df_document_label . to_excel ( writer , sheet_name = \"document_label\" , index = False ) df_sentence_label . to_excel ( writer , sheet_name = \"sentence_label\" , index = False ) for ws in writer . sheets . values (): \"\"\" fix column headers and row headers no font name issue need to use engine='openpyxl' \"\"\" # row_level = df_sent_doc_cmp.index.nlevels # print(row_level) for row in ws . iter_rows ( min_row = 1 , max_row = 1 ): \"\"\" walk through each cell of first row to assign font name \"\"\" for cell in row : # print(cell) font_params = cell . font . __dict__ if font_params [ \"name\" ] is None : font_params [ \"name\" ] = \"Calibri\" cell . font = Font ( ** font_params ) return ( df_content , df_document_label , df_sentence_label , df_sentence_label_wide , df_doc_label_cmp , df_sent_label_cmp_long , df_sent_label_cmp_wide , df_sent_doc_cmp , ) def split_train_test_to_target ( X , y , target ): sss = StratifiedShuffleSplit ( n_splits = 5 , test_size = 0.2 , random_state = 1234 ) for index , ( train_index , test_index ) in enumerate ( sss . split ( X , y )): # print(\"TRAIN:\", train_index, \"TEST:\", test_index) X_train , X_test = X . iloc [ train_index ], X . iloc [ test_index ] y_train , y_test = y . iloc [ train_index ], y . iloc [ test_index ] print ( \"split {} \" . format ( index )) print ( \"train:\" , Counter ( y_train )) print ( \"test:\" , Counter ( y_test )) df_train = pd . DataFrame ({ \"TextID\" : X_train }) . reset_index ( drop = True ) df_test = pd . DataFrame ({ \"TextID\" : X_test }) . reset_index ( drop = True ) df_target_train = pd . merge ( df_train , target , how = \"left\" , on = [ \"TextID\" ]) df_target_test = pd . merge ( df_test , target , how = \"left\" , on = [ \"TextID\" ]) filename = \"train_test_split.xlsx\" # if file does not exist write header if index != 0 and os . path . isfile ( filename ): mode = \"a\" else : mode = \"w\" with pd . ExcelWriter ( filename , options = { \"strings_to_urls\" : False }, mode = mode , engine = \"openpyxl\" ) as writer : df_target_train . to_excel ( writer , sheet_name = \"train {:02} \" . format ( index ), index = False ) df_target_test . to_excel ( writer , sheet_name = \"test {:02} \" . format ( index ), index = False ) def concat_files ( files_list ): print ( files_list ) df_content = pd . read_excel ( files_list [ 0 ], sheet_name = \"contents\" , engine = \"openpyxl\" ) df_document_label = pd . read_excel ( files_list [ 0 ], sheet_name = \"document_label\" , engine = \"openpyxl\" ) df_sentence_label = pd . read_excel ( files_list [ 0 ], sheet_name = \"sentence_label\" , engine = \"openpyxl\" ) for filepath in files_list [ 1 :]: df_content = df_content . append ( pd . read_excel ( filepath , sheet_name = \"contents\" , engine = \"openpyxl\" ) ) df_document_label = df_document_label . append ( pd . read_excel ( filepath , sheet_name = \"document_label\" , engine = \"openpyxl\" ) ) df_sentence_label = df_sentence_label . append ( pd . read_excel ( filepath , sheet_name = \"sentence_label\" , engine = \"openpyxl\" ) ) ## sort data by TextID df_content = df_content . sort_values ( by = [ \"TextID\" ]) df_document_label = df_document_label . sort_values ( by = [ \"TextID\" ]) df_sentence_label = df_sentence_label . sort_values ( by = [ \"TextID\" ]) ## unescape OOXML string df_content = df_content . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) df_document_label = df_document_label . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) df_sentence_label = df_sentence_label . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) # write to excel ## remove illegal characters df_content = remove_illegal_characters ( df_content ) df_document_label = remove_illegal_characters ( df_document_label ) df_sentence_label = remove_illegal_characters ( df_sentence_label ) with pd . ExcelWriter ( \"all_data.xlsx\" , options = { \"strings_to_urls\" : False }, engine = \"openpyxl\" ) as writer : df_content . to_excel ( writer , sheet_name = \"contents\" , index = False ) df_document_label . to_excel ( writer , sheet_name = \"document_label\" , index = False ) df_sentence_label . to_excel ( writer , sheet_name = \"sentence_label\" , index = False ) return df_content , df_document_label , df_sentence_label def main ( args = None ): # Build and Test a Command Line Interface with Poetry, Python's argparse, and pytest - DEV Community \ud83d\udc69\u200d\ud83d\udcbb\ud83d\udc68\u200d\ud83d\udcbb # https://dev.to/bowmanjd/build-and-test-a-command-line-interface-with-poetry-python-s-argparse-and-pytest-4gab if args : mydict_test = { \"global_choies\" :[]} ## How to strip decorators from a function in Python - Stack Overflow ## https://stackoverflow.com/questions/1166118/how-to-strip-decorators-from-a-function-in-python args = parse_args . __closure__ [ 0 ] . cell_contents ( mydict = mydict_test , args = args ) # check if user pass any argument, if yes, use command line, otherwise use gooey ## python - Argparse: Check if any arguments have been passed - Stack Overflow ## https://stackoverflow.com/questions/10698468/argparse-check-if-any-arguments-have-been-passed else : mydict = SqliteDict ( MY_DB_FILE , autocommit = True ) try : mydict [ \"global_choies\" ] except KeyError : mydict [ \"global_choies\" ] = [] if len ( sys . argv ) > 1 : ## How to strip decorators from a function in Python - Stack Overflow ## https://stackoverflow.com/questions/1166118/how-to-strip-decorators-from-a-function-in-python args = parse_args . __closure__ [ 0 ] . cell_contents ( mydict = mydict ) else : # patch gooey component only when before entering GUI mode patch_gooey_gui_component ( mydict = mydict ) args = parse_args ( mydict = mydict ) # print(args.command) # try: # common_filename = Path(args.input_file) # # common_filename = \"\".join(args.input_file.split(\".\")[:-1]) # # print(common_filename) # except: # pass if args . command == \"original\" : if args . input_file : common_filename = Path ( args . input_file ) df = pd . read_excel ( args . input_file , engine = \"openpyxl\" ) df [ \"TextID\" ] = get_TextID ( df [[ \"Content\" ]]) if args . emojilize : # df = clean_data(df) df = text_to_emoji ( df ) new_filename = common_filename . with_name ( common_filename . stem + \"_emojilized\" ) print ( args . input_file . split ( \".\" )) else : new_filename = common_filename . with_name ( common_filename . stem + \"_demojilized\" ) # print(args.input_file.split(\".\")[:-1]) # df = clean_data(df) df = emoji_to_text ( df ) ## unescape OOXML string df = df . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) ## remove illegal characters df = remove_illegal_characters ( df ) ######## calculate processed TextID ######## ## remove emoji text for calculate TextID delimiters = ( \":\" , \":\" ) pattern = re . compile ( u \"( %s [a-zA-Z0-9 \\\\ + \\\\ -_&.\u00f4\u2019\u00c5\u00e9\u00e3\u00ed\u00e7()!#*]+ %s )\" % delimiters ) df_remove_emoji_text = df . applymap ( lambda x : pattern . sub ( \"\" , x ) if isinstance ( x , str ) else x ) ## replace strange characters for calculate TextID pattern2 = re . compile ( u \" \\\\\\\\\\\\\\\\ %\" ) df_remove_emoji_text = df_remove_emoji_text . applymap ( lambda x : pattern2 . sub ( \"%\" , x ) if isinstance ( x , str ) else x ) df [ \"TextID(processed)\" ] = get_TextID ( df_remove_emoji_text [[ \"Content\" ]]) if args . to_excel : output_filename = new_filename . with_suffix ( \".xlsx\" ) with pd . ExcelWriter ( output_filename , options = { \"strings_to_urls\" : False }, engine = \"openpyxl\" , ) as writer : df . to_excel ( writer , index = False ) else : output_filename = new_filename . with_suffix ( \".json\" ) # ### \u8f38\u51fa\u5de5\u7814\u9662\u6587\u7ae0 json\u6a94 df = clean_data ( df ) to_AI_clerk_batch_upload_json ( df , output_filename ) id_mapping_filename = common_filename . with_name ( common_filename . stem + \"_TextID_mapping\" ) . with_suffix ( \".xlsx\" ) with pd . ExcelWriter ( id_mapping_filename , options = { \"strings_to_urls\" : False }, engine = \"openpyxl\" , ) as writer : reserved_columns = df . columns . str . contains ( \"^TextID.*\" ) reserved_columns = df . columns [ reserved_columns ] . tolist () df [ reserved_columns ] . to_excel ( writer , index = False ) elif args . input_dir : common_path = Path ( args . input_dir ) print ( \"input path:\" , common_path ) filename_pattern = \"*/**/*.txt\" save_path = ( Path ( common_path ) . with_name ( Path ( common_path ) . stem ) . with_suffix ( \".json\" ) ) print ( \"output path:\" , save_path ) glob_path = Path ( common_path ) filepathes = glob_path . glob ( filename_pattern ) articles_dict = defaultdict ( dict ) for filepath in filepathes : content_dict = {} content_dict [ \"Title\" ] = str ( filepath . relative_to ( common_path )) content_dict [ \"Content\" ] = \"\" content_dict [ \"Author\" ] = \"\" content_dict [ \"Time\" ] = \"\" # guess encoding # Is there a Python library function which attempts to guess the character-encoding of some bytes? - Stack Overflow # https://stackoverflow.com/questions/269060/is-there-a-python-library-function-which-attempts-to-guess-the-character-encodin # Usage \u2014 chardet 5.0.0dev0 documentation # https://chardet.readthedocs.io/en/latest/usage.html detector = UniversalDetector () detector . reset () for line in open ( filepath , \"rb\" ): detector . feed ( line ) if detector . done : break detector . close () # print(detector.result) with open ( filepath , \"r\" , encoding = detector . result [ \"encoding\" ]) as f : content_dict [ \"Content\" ] = f . read () text_id = hashlib . md5 ( content_dict [ \"Content\" ] . encode ( \"utf-8\" ) ) . hexdigest ()[: 10 ] articles_dict [ \"Articles\" ] . update ({ text_id : content_dict }) # read into dataframe will automatically sort by index dataframe = pd . DataFrame . from_dict ( articles_dict ) # because articles_dict['Articles'] use text_id as key to update, # if there were duplicate text_id, it'll replace by later items. # so no need to check duplicate. ### # dataframe.reset_index(inplace=True) # dup_id = dataframe.duplicated(['index'], keep=False) # print(\"duplicated entries: {}\".format(len(dataframe[dup_id]))) # print(dataframe[dup_id]) # dataframe = dataframe.groupby(['index']).apply(lambda x: x.iloc[0]) # print(\"keep first, drop duplicated!\") # dataframe.set_index('index', inplace=True) with open ( save_path , \"w\" , encoding = \"utf-8\" ) as outfile : json . dump ( dataframe . to_dict (), outfile , ensure_ascii = False , indent = 4 ) elif args . command == \"labeled\" : common_filename = Path ( args . input_file ) df = pd . read_json ( args . input_file ) ### \u8f38\u51fa\u6a19\u8a18\u8cc7\u6599excel\u6a94 output_filename = common_filename . with_suffix ( \".xlsx\" ) to_excel_AI_clerk_labeled_data ( df , output_filename ) elif args . command == \"second_upload\" : ## \u4e8c\u6b21\u4e0a\u50b3\u6642\uff0c\u7531\u65bc\u5de5\u7814\u9662\u7cfb\u7d71\u7684\u9650\u5236\uff0c\u6703\u628a\u4ed6\u5011\u5167\u90e8\u7684 SerialID \u7576\u6210\u662f TextID ## \u56e0\u6b64\uff0c\u9019\u4e00\u6b65\u7684\u4f5c\u7528\u5c31\u662f\u5c07 TextID \u8907\u88fd\u5230\u539f\u672c SerialID \u7684\u6b04\u4f4d\uff0c ## \u518d\u6b21\u4e0a\u50b3\u5f8c\u4e0b\u8f09\u56de\u4f86\u624d\u6703\u662f\u6b63\u78ba\u7684 TextID common_filename = Path ( args . input_file ) # df = pd.read_json(args.input_file) with open ( common_filename , \"r\" , encoding = \"utf-8\" ) as f : data = json . load ( f ) data2 = {} for key , value in data . items (): # pprint(data[key]) data2 . update ({ data [ key ][ \"TextID\" ]: data [ key ]}) save_path = ( Path ( common_filename ) . with_name ( common_filename . stem + \"_second_upload\" ) . with_suffix ( \".json\" ) ) with open ( save_path , \"w\" , encoding = \"utf-8\" ) as outfile : json . dump ( data2 , outfile , ensure_ascii = False , indent = 4 ) elif args . command == \"second_labeled\" : ## \u4e8c\u6b21\u6a19\u8a3b\u7d50\u679c\u4e0b\u8f09\u5f8c\uff0c\u6703\u767c\u73fe\u6a94\u6848\u5927\u5c0f\u662f\u4e00\u6b21\u6a19\u8a3b\u7684\u5169\u500d\u5927\uff0c ## \u9019\u662f\u56e0\u70ba\u4e8c\u6b21\u6a19\u8a3b\u4e0b\u8f09\u56de\u4f86\u7684\u6a94\u6848\u9084\u5305\u542b\u4e00\u6b21\u6a19\u8a3b\u7684\u6a94\u6848\uff0c ## \u90a3\u4e9b\u6c92\u6709 Annotator \u7684\u8cc7\u6599\uff0c\u5373\u70ba\u4e00\u6b21\u6a19\u8a3b\u7684\u8cc7\u6599\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e1f\u68c4 ## \u53ea\u8981\u7559\u4e0b\u6709 Annotator \u7684\u8cc7\u6599\uff0c\u4e26\u4e14 assign \u6b63\u78ba\u7684 TextID \u4e0a\u53bb # print(args.input_file_1) # print(args.input_file_2) common_filename_1 = [ Path ( path ) for path in args . input_file_1 ] common_filename_2 = Path ( args . input_file_2 ) # df = pd.read_json(args.input_file) data1 = {} for path in common_filename_1 : with open ( path , \"r\" , encoding = \"utf-8\" ) as f : data1 . update ( json . load ( f )) with open ( common_filename_2 , \"r\" , encoding = \"utf-8\" ) as f : data2 = json . load ( f ) data3 = {} for key , value in data2 . items (): if value [ \"Annotator\" ] == \"\" : continue value [ \"TextID\" ] = data1 [ value [ \"TextID\" ]][ \"TextID\" ] data3 . update ({ key : value }) save_path = ( Path ( common_filename_2 ) . with_name ( common_filename_2 . stem + \"_second_labeled\" ) . with_suffix ( \".json\" ) ) with open ( save_path , \"w\" , encoding = \"utf-8\" ) as outfile : json . dump ( data3 , outfile , ensure_ascii = False , indent = 4 ) elif args . command == \"concat\" : os_type = platform . system () if os_type == \"Windows\" : files_list = args . input_files . split ( \";\" ) else : files_list = args . input_files . split ( \":\" ) concat_files ( files_list ) elif args . command == \"split\" : # df_content = pd.read_excel(args.input_file, sheet_name='contents', engine='openpyxl') df_document = pd . read_excel ( args . input_file , sheet_name = \"document_label\" , engine = \"openpyxl\" ) df_sentence = pd . read_excel ( args . input_file , sheet_name = \"sentence_label\" , engine = \"openpyxl\" ) ## unescape OOXML string # df_content = df_content.applymap(lambda x: unescape_OOXML(x) if isinstance(x, str) else x) df_document = df_document . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) df_sentence = df_sentence . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) ## remove illegal characters # df_content = remove_illegal_characters(df_content) df_document = remove_illegal_characters ( df_document ) df_sentence = remove_illegal_characters ( df_sentence ) X = df_document [ \"TextID\" ] y = df_document [ args . y_col ] target = df_sentence split_train_test_to_target ( X , y , target ) if __name__ == \"__main__\" : main ()","title":"Module DataTag_helper"},{"location":"reference/DataTag_helper/#variables","text":"ESCAPED_REGEX ILLEGAL_CHARACTERS_RE MY_DB_FILE global_args","title":"Variables"},{"location":"reference/DataTag_helper/#functions","text":"","title":"Functions"},{"location":"reference/DataTag_helper/#clean_data","text":"def clean_data ( df ) View Source def clean_data ( df ) : empty_entries = df [ \"Content\" ] . isnull () print ( \"number of empty content entries: {}\" . format ( len ( df [ empty_entries ] ))) df_cleaned = df [ ~empty_entries ] . copy () if len ( df [ empty_entries ] ) : print ( \"drop empty!\" ) drop_columns = df_cleaned . columns . str . contains ( \"Unnamed\" ) # print ( any ( df_cleaned . columns . str . contains ( \"^ID$\" ))) # if not any ( df_cleaned . columns . str . contains ( \"^TextID$\" )) : leave_columns = df_cleaned . columns [ ~drop_columns ] . tolist () # df_cleaned [ 'ID' ] = df_cleaned [ [\"Content\" ] ] . apply ( lambda x : hashlib . md5 ( x [ 0 ] . encode ( 'utf-8' )). hexdigest () [ :10 ] , axis = 1 ) df_cleaned = df_cleaned [ leave_columns ] # print ( df_cleaned . head ()) df_cleaned = df_cleaned . sort_values ( \"TextID\" ). reset_index ( drop = True ) df_cleaned [ \"Author\" ] = df_cleaned . apply ( lambda x : x . Poster + \"/\" + x . Gender , axis = 1 ) df_cleaned [ \"Time\" ] = df_cleaned . apply ( lambda x : str ( x . Date ) + \"/\" + str ( x . Time ), axis = 1 ) return df_cleaned","title":"clean_data"},{"location":"reference/DataTag_helper/#concat_files","text":"def concat_files ( files_list ) View Source def concat_files ( files_list ) : print ( files_list ) df_content = pd . read_excel ( files_list [ 0 ], sheet_name = \" contents \" , engine = \" openpyxl \" ) df_document_label = pd . read_excel ( files_list [ 0 ], sheet_name = \" document_label \" , engine = \" openpyxl \" ) df_sentence_label = pd . read_excel ( files_list [ 0 ], sheet_name = \" sentence_label \" , engine = \" openpyxl \" ) for filepath in files_list [ 1 :]: df_content = df_content . append ( pd . read_excel ( filepath , sheet_name = \" contents \" , engine = \" openpyxl \" ) ) df_document_label = df_document_label . append ( pd . read_excel ( filepath , sheet_name = \" document_label \" , engine = \" openpyxl \" ) ) df_sentence_label = df_sentence_label . append ( pd . read_excel ( filepath , sheet_name = \" sentence_label \" , engine = \" openpyxl \" ) ) ## sort data by TextID df_content = df_content . sort_values ( by = [ \" TextID \" ] ) df_document_label = df_document_label . sort_values ( by = [ \" TextID \" ] ) df_sentence_label = df_sentence_label . sort_values ( by = [ \" TextID \" ] ) ## unescape OOXML string df_content = df_content . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) df_document_label = df_document_label . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) df_sentence_label = df_sentence_label . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) # write to excel ## remove illegal characters df_content = remove_illegal_characters ( df_content ) df_document_label = remove_illegal_characters ( df_document_label ) df_sentence_label = remove_illegal_characters ( df_sentence_label ) with pd . ExcelWriter ( \" all_data.xlsx \" , options = { \" strings_to_urls \" : False }, engine = \" openpyxl \" ) as writer : df_content . to_excel ( writer , sheet_name = \" contents \" , index = False ) df_document_label . to_excel ( writer , sheet_name = \" document_label \" , index = False ) df_sentence_label . to_excel ( writer , sheet_name = \" sentence_label \" , index = False ) return df_content , df_document_label , df_sentence_label","title":"concat_files"},{"location":"reference/DataTag_helper/#emoji_to_text","text":"def emoji_to_text ( df ) View Source def emoji_to_text ( df ) : df_deemojilized = df . copy () ## \u8f49\u63db emoji \u683c\u5f0f\u6210 : emoji : ## python - How to replace emoji to word in a text ? - Stack Overflow ## https : // stackoverflow . com / questions / 57580288 / how - to - replace - emoji - to - word - in - a - text df_deemojilized [ \" Content \" ] = df [[ \" Content \" ]]. apply ( lambda x : emoji . demojize ( x [ 0 ] ) , axis = 1 ) df_deemojilized [ \" Title \" ] = df [[ \" Title \" ]]. apply ( lambda x : emoji . demojize ( x [ 0 ] ) , axis = 1 ) return df_deemojilized","title":"emoji_to_text"},{"location":"reference/DataTag_helper/#extract_dict","text":"def extract_dict ( df , id_column_list , dict_column ) View Source def extract_dict ( df , id_column_list , dict_column ) : df_tmp = df [ id_column_list + [dict_column ] ] . set_index ( id_column_list ) df_tmp = pd . DataFrame ( df_tmp . apply ( lambda x : { \"empty\" : \"nan\" } if len ( x [ 0 ] ) == 0 else x [ 0 ] , axis = 1 ) ) df_tmp = df_tmp . apply ( lambda x : pd . DataFrame . from_dict ( x [ 0 ] , orient = \"index\" ). stack (), axis = 1 ) df_tmp = df_tmp . reset_index ( level = id_column_list ) return df_tmp","title":"extract_dict"},{"location":"reference/DataTag_helper/#get_textid","text":"def get_TextID ( df ) View Source def get_TextID ( df ) : return df . apply ( lambda x : hashlib . md5 ( x [ 0 ]. encode ( \" utf-8 \" )) . hexdigest () [: 10 ], axis = 1 )","title":"get_TextID"},{"location":"reference/DataTag_helper/#main","text":"def main ( args = None ) View Source def main ( args = None ) : # Build and Test a Command Line Interface with Poetry , Python 's argparse, and pytest - DEV Community \ud83d\udc69\u200d\ud83d\udcbb\ud83d\udc68\u200d\ud83d\udcbb # https://dev.to/bowmanjd/build-and-test-a-command-line-interface-with-poetry-python-s-argparse-and-pytest-4gab if args: mydict_test = {\"global_choies\":[]} ## How to strip decorators from a function in Python - Stack Overflow ## https://stackoverflow.com/questions/1166118/how-to-strip-decorators-from-a-function-in-python args = parse_args.__closure__[0].cell_contents(mydict=mydict_test, args=args) # check if user pass any argument, if yes, use command line, otherwise use gooey ## python - Argparse: Check if any arguments have been passed - Stack Overflow ## https://stackoverflow.com/questions/10698468/argparse-check-if-any-arguments-have-been-passed else: mydict = SqliteDict(MY_DB_FILE, autocommit=True) try: mydict[\"global_choies\"] except KeyError: mydict[\"global_choies\"] = [] if len(sys.argv) > 1: ## How to strip decorators from a function in Python - Stack Overflow ## https://stackoverflow.com/questions/1166118/how-to-strip-decorators-from-a-function-in-python args = parse_args.__closure__[0].cell_contents(mydict=mydict) else: # patch gooey component only when before entering GUI mode patch_gooey_gui_component(mydict=mydict) args = parse_args(mydict=mydict) # print(args.command) # try: # common_filename = Path(args.input_file) # # common_filename = \"\".join(args.input_file.split(\".\")[:-1]) # # print(common_filename) # except: # pass if args.command == \"original\": if args.input_file: common_filename = Path(args.input_file) df = pd.read_excel(args.input_file, engine=\"openpyxl\") df[\"TextID\"] = get_TextID(df[[\"Content\"]]) if args.emojilize: # df = clean_data(df) df = text_to_emoji(df) new_filename = common_filename.with_name( common_filename.stem + \"_emojilized\" ) print(args.input_file.split(\".\")) else: new_filename = common_filename.with_name( common_filename.stem + \"_demojilized\" ) # print(args.input_file.split(\".\")[:-1]) # df = clean_data(df) df = emoji_to_text(df) ## unescape OOXML string df = df.applymap(lambda x: unescape_OOXML(x) if isinstance(x, str) else x) ## remove illegal characters df = remove_illegal_characters(df) ######## calculate processed TextID ######## ## remove emoji text for calculate TextID delimiters = (\":\", \":\") pattern = re.compile( u\"(%s[a-zA-Z0-9\\\\+\\\\-_&.\u00f4\u2019\u00c5\u00e9\u00e3\u00ed\u00e7()!#*]+%s)\" % delimiters ) df_remove_emoji_text = df.applymap( lambda x: pattern.sub(\"\", x) if isinstance(x, str) else x ) ## replace strange characters for calculate TextID pattern2 = re.compile(u\"\\\\\\\\\\\\\\\\%\") df_remove_emoji_text = df_remove_emoji_text.applymap( lambda x: pattern2.sub(\"%\", x) if isinstance(x, str) else x ) df[\"TextID(processed)\"] = get_TextID(df_remove_emoji_text[[\"Content\"]]) if args.to_excel: output_filename = new_filename.with_suffix(\".xlsx\") with pd.ExcelWriter( output_filename, options={\"strings_to_urls\": False}, engine=\"openpyxl\", ) as writer: df.to_excel(writer, index=False) else: output_filename = new_filename.with_suffix(\".json\") # ### \u8f38\u51fa\u5de5\u7814\u9662\u6587\u7ae0 json\u6a94 df = clean_data(df) to_AI_clerk_batch_upload_json(df, output_filename) id_mapping_filename = common_filename.with_name( common_filename.stem + \"_TextID_mapping\" ).with_suffix(\".xlsx\") with pd.ExcelWriter( id_mapping_filename, options={\"strings_to_urls\": False}, engine=\"openpyxl\", ) as writer: reserved_columns = df.columns.str.contains(\"^TextID.*\") reserved_columns = df.columns[reserved_columns].tolist() df[reserved_columns].to_excel(writer, index=False) elif args.input_dir: common_path = Path(args.input_dir) print(\"input path:\", common_path) filename_pattern = \"*/**/*.txt\" save_path = ( Path(common_path).with_name(Path(common_path).stem).with_suffix(\".json\") ) print(\"output path:\", save_path) glob_path = Path(common_path) filepathes = glob_path.glob(filename_pattern) articles_dict = defaultdict(dict) for filepath in filepathes: content_dict = {} content_dict[\"Title\"] = str(filepath.relative_to(common_path)) content_dict[\"Content\"] = \"\" content_dict[\"Author\"] = \"\" content_dict[\"Time\"] = \"\" # guess encoding # Is there a Python library function which attempts to guess the character-encoding of some bytes? - Stack Overflow # https://stackoverflow.com/questions/269060/is-there-a-python-library-function-which-attempts-to-guess-the-character-encodin # Usage \u2014 chardet 5.0.0dev0 documentation # https://chardet.readthedocs.io/en/latest/usage.html detector = UniversalDetector() detector.reset() for line in open(filepath, \"rb\"): detector.feed(line) if detector.done: break detector.close() # print(detector.result) with open(filepath, \"r\", encoding=detector.result[\"encoding\"]) as f: content_dict[\"Content\"] = f.read() text_id = hashlib.md5( content_dict[\"Content\"].encode(\"utf-8\") ).hexdigest()[:10] articles_dict[\"Articles\"].update({text_id: content_dict}) # read into dataframe will automatically sort by index dataframe = pd.DataFrame.from_dict(articles_dict) # because articles_dict[' Articles '] use text_id as key to update, # if there were duplicate text_id, it'll replace by later items . # so no need to check duplicate . ### # dataframe . reset_index ( inplace = True ) # dup_id = dataframe . duplicated ([ 'index' ], keep = False ) # print ( \"duplicated entries: {}\" . format ( len ( dataframe [ dup_id ]))) # print ( dataframe [ dup_id ]) # dataframe = dataframe . groupby ([ 'index' ]). apply ( lambda x : x . iloc [ 0 ]) # print ( \"keep first, drop duplicated!\" ) # dataframe . set_index ( 'index' , inplace = True ) with open ( save_path , \"w\" , encoding= \"utf-8\" ) as outfile : json . dump ( dataframe . to_dict (), outfile , ensure_ascii = False , indent = 4 ) elif args . command == \"labeled\" : common_filename = Path ( args . input_file ) df = pd . read_json ( args . input_file ) ### \u8f38\u51fa\u6a19\u8a18\u8cc7\u6599excel\u6a94 output_filename = common_filename . with_suffix ( \".xlsx\" ) to_excel_AI_clerk_labeled_data ( df , output_filename ) elif args . command == \"second_upload\" : ## \u4e8c\u6b21\u4e0a\u50b3\u6642\uff0c\u7531\u65bc\u5de5\u7814\u9662\u7cfb\u7d71\u7684\u9650\u5236\uff0c\u6703\u628a\u4ed6\u5011\u5167\u90e8\u7684 SerialID \u7576\u6210\u662f TextID ## \u56e0\u6b64\uff0c\u9019\u4e00\u6b65\u7684\u4f5c\u7528\u5c31\u662f\u5c07 TextID \u8907\u88fd\u5230\u539f\u672c SerialID \u7684\u6b04\u4f4d\uff0c ## \u518d\u6b21\u4e0a\u50b3\u5f8c\u4e0b\u8f09\u56de\u4f86\u624d\u6703\u662f\u6b63\u78ba\u7684 TextID common_filename = Path ( args . input_file ) # df = pd . read_json ( args . input_file ) with open ( common_filename , \"r\" , encoding= \"utf-8\" ) as f : data = json . load ( f ) data2 = {} for key , value in data . items () : # pprint ( data [ key ]) data2 . update ({ data [ key ][ \"TextID\" ] : data [ key ]}) save_path = ( Path ( common_filename ) . with_name ( common_filename . stem + \"_second_upload\" ) . with_suffix ( \".json\" ) ) with open ( save_path , \"w\" , encoding= \"utf-8\" ) as outfile : json . dump ( data2 , outfile , ensure_ascii = False , indent = 4 ) elif args . command == \"second_labeled\" : ## \u4e8c\u6b21\u6a19\u8a3b\u7d50\u679c\u4e0b\u8f09\u5f8c\uff0c\u6703\u767c\u73fe\u6a94\u6848\u5927\u5c0f\u662f\u4e00\u6b21\u6a19\u8a3b\u7684\u5169\u500d\u5927\uff0c ## \u9019\u662f\u56e0\u70ba\u4e8c\u6b21\u6a19\u8a3b\u4e0b\u8f09\u56de\u4f86\u7684\u6a94\u6848\u9084\u5305\u542b\u4e00\u6b21\u6a19\u8a3b\u7684\u6a94\u6848\uff0c ## \u90a3\u4e9b\u6c92\u6709 Annotator \u7684\u8cc7\u6599\uff0c\u5373\u70ba\u4e00\u6b21\u6a19\u8a3b\u7684\u8cc7\u6599\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e1f\u68c4 ## \u53ea\u8981\u7559\u4e0b\u6709 Annotator \u7684\u8cc7\u6599\uff0c\u4e26\u4e14 assign \u6b63\u78ba\u7684 TextID \u4e0a\u53bb # print ( args . input_file_1 ) # print ( args . input_file_2 ) common_filename_1 = [ Path ( path ) for path in args . input_file_1 ] common_filename_2 = Path ( args . input_file_2 ) # df = pd . read_json ( args . input_file ) data1 = {} for path in common_filename_1: with open ( path , \"r\" , encoding= \"utf-8\" ) as f : data1 . update ( json . load ( f )) with open ( common_filename_2 , \"r\" , encoding= \"utf-8\" ) as f : data2 = json . load ( f ) data3 = {} for key , value in data2 . items () : if value [ \"Annotator\" ] == \"\" : continue value [ \"TextID\" ] = data1 [ value [ \"TextID\" ]][ \"TextID\" ] data3 . update ({ key : value }) save_path = ( Path ( common_filename_2 ) . with_name ( common_filename_2 . stem + \"_second_labeled\" ) . with_suffix ( \".json\" ) ) with open ( save_path , \"w\" , encoding= \"utf-8\" ) as outfile : json . dump ( data3 , outfile , ensure_ascii = False , indent = 4 ) elif args . command == \"concat\" : os_type = platform . system () if os_type == \"Windows\" : files_list = args . input_files . split ( \";\" ) else : files_list = args . input_files . split ( \":\" ) concat_files ( files_list ) elif args . command == \"split\" : # df_content = pd . read_excel ( args . input_file , sheet_name='contents' , engine='openpyxl' ) df_document = pd . read_excel ( args . input_file , sheet_name= \"document_label\" , engine= \"openpyxl\" ) df_sentence = pd . read_excel ( args . input_file , sheet_name= \"sentence_label\" , engine= \"openpyxl\" ) ## unescape OOXML string # df_content = df_content . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) df_document = df_document . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) df_sentence = df_sentence . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) ## remove illegal characters # df_content = remove_illegal_characters ( df_content ) df_document = remove_illegal_characters ( df_document ) df_sentence = remove_illegal_characters ( df_sentence ) X = df_document [ \"TextID\" ] y = df_document [ args . y_col ] target = df_sentence split_train_test_to_target ( X , y , target )","title":"main"},{"location":"reference/DataTag_helper/#patch_gooey_gui_component","text":"def patch_gooey_gui_component ( mydict ) Monkey patch gooey's gui components, like: Dropdown, FileChooser, GooeyApplication,...etc. To avoid ImportError: libXxf86vm.so.1 while import, we enclose patch code into a function, and call it when we are going into GUI mode. Returns: Type Description [type] [description] View Source def patch_gooey_gui_component ( mydict ): \"\"\"Monkey patch gooey's gui components, like: Dropdown, FileChooser, GooeyApplication,...etc. To avoid `ImportError: libXxf86vm.so.1` while import, we enclose patch code into a function, and call it when we are going into GUI mode. Returns: [type]: [description] \"\"\" import wx # from gooey.gui.lang.i18n import _ ###### ## [Feature request: Allow general callbacks for validation \u00b7 Issue #293 \u00b7 chriskiehl/Gooey] ## (https://github.com/chriskiehl/Gooey/issues/293) # from gooey.gui.components.widgets.bases import TextContainer # oldGetValue = TextContainer.getValue # # def newGetValue(self): # result = oldGetValue(self) # userValidator = self._options['validator']['callback'] # message = self._options['validator']['message'] # value = self.getWidgetValue() # validates = userValidator(value) # result['test'] = False # result['error'] = 'test' # return result # # TextContainer.getValue = newGetValue ###### # [Gooey/dropdown.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/dropdown.py) from gooey.gui.components.widgets.dropdown import Dropdown Dropdown_oldGetWidget = Dropdown . getWidget # from gooey.gui import formatters # def newFormatOutput(self, metadata, value): # print(\"debug2\") # print(\"metadata\", metadata) # print(\"value\", value) # return formatters.dropdown(metadata, value) # def newSetValue(self, value): # ## +1 to offset the default placeholder value # index = self._meta['choices'].index(value) + 1 # print(\"debug\", self._meta['choices']) # self.widget.SetSelection(index) # def newGetWidgetValue(self): # value = self.widget.GetValue() # # filter out the extra default option that's # # appended during creation # print(value) # if value == _('select_option'): # return None # return value def Dropdown_newGetWidget ( self , parent , * args , ** options ): widget = Dropdown_oldGetWidget ( self , parent , * args , ** options ) # [wxPython ComboBox & Choice\u7c7b - WxPython\u6559\u7a0b\u2122] # (https://www.yiibai.com/wxpython/wx_combobox_choice_class.html) # [wx.ComboBox \u2014 wxPython Phoenix 4.1.1a1 documentation] # (https://wxpython.org/Phoenix/docs/html/wx.ComboBox.html) widget . Bind ( wx . EVT_COMBOBOX_DROPDOWN , self . OnCombo ) return widget def Dropdown_newOnCombo ( self , event ): def get_choices ( input_file ): try : # specify engine use 'openpyxl' to avoid not found xlrd error new_choices = list ( pd . read_excel ( input_file , sheet_name = \"document_label\" , index_col = 0 , nrows = 0 , engine = \"openpyxl\" , ) ) message = \"\" self . setErrorString ( message ) self . showErrorString ( False ) # force refresh parent screen # python - Update/Refresh Dynamically\u2013Created WxPython Widgets - Stack Overflow # https://stackoverflow.com/questions/10368948/update-refresh-dynamically-created-wxpython-widgets self . GetParent () . Layout () except Exception as e : # message = \"No sheet named 'document_label'\" # show actual exception message for easier debug message = repr ( e ) # print(message) self . setErrorString ( message ) self . showErrorString ( True ) # force refresh parent screen # python - Update/Refresh Dynamically\u2013Created WxPython Widgets - Stack Overflow # https://stackoverflow.com/questions/10368948/update-refresh-dynamically-created-wxpython-widgets self . GetParent () . Layout () new_choices = [] return new_choices current_input_file = global_args [ \"input_file\" ] try : self . previous_input_file except Exception : self . previous_input_file = \"\" if self . previous_input_file != current_input_file : self . new_choices = get_choices ( current_input_file ) self . previous_input_file = current_input_file # save self.new_choices into sqlite db for later access mydict [ \"global_choies\" ] = self . new_choices # [python - Dynamically change the choices in a wx.ComboBox() - Stack Overflow] # (https://stackoverflow.com/questions/682923/dynamically-change-the-choices-in-a-wx-combobox) self . setOptions ( self . new_choices ) Dropdown . getWidget = Dropdown_newGetWidget Dropdown . OnCombo = Dropdown_newOnCombo # Dropdown.setValue = newSetValue # Dropdown.getWidgetValue = newGetWidgetValue # Dropdown.formatOutput = newFormatOutput # [Gooey/choosers.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/choosers.py) # [Gooey/chooser.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/core/chooser.py#L65) # [Gooey/chooser.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/core/chooser.py#L13) # [Gooey/text_input.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/core/text_input.py#L7) # [Gooey/bases.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/components/widgets/bases.py#L170) from gooey.gui.components.widgets.core.chooser import FileChooser FileChooser_old_init = FileChooser . __init__ ## monkey patch __init__ def FileChooser_new_init ( self , parent , * args , ** kwargs ): FileChooser_old_init ( self , parent , * args , ** kwargs ) # bind event wx.EVT_TEXT to trigger self.OnFileChooser when text change # [wx.TextCtrl \u2014 wxPython Phoenix 4.1.1a1 documentation] # (https://wxpython.org/Phoenix/docs/html/wx.TextCtrl.html) # [wxPython - TextCtrl Class - Tutorialspoint] # (https://www.tutorialspoint.com/wxpython/wx_textctrl_class.htm) self . widget . Bind ( wx . EVT_TEXT , self . OnFileChooser ) ## monkey patch OnFileChooser def FileChooser_newOnFileChooser ( self , event ): # read text area value to global_args global_args [ \"input_file\" ] = self . widget . getValue () # print(global_args) FileChooser . __init__ = FileChooser_new_init FileChooser . OnFileChooser = FileChooser_newOnFileChooser # [Gooey/application.py at 8c88980e12a968430df5cfd0779fab37db287680 \u00b7 chriskiehl/Gooey] # (https://github.com/chriskiehl/Gooey/blob/8c88980e12a968430df5cfd0779fab37db287680/gooey/gui/containers/application.py#L29) from gooey.gui.containers.application import GooeyApplication ## monkey patch onClose def newOnClose ( self , * args , ** kwargs ): \"\"\"Cleanup the top level WxFrame and shutdown the process\"\"\" self . Destroy () # print(\"onClose\") # remove db file when close # [sqlite - Python PermissionError: [WinError 32] The process cannot access the file..... but my file is closed - Stack Overflow] # (https://stackoverflow.com/questions/59482990/python-permissionerror-winerror-32-the-process-cannot-access-the-file-bu) mydict . close () os . remove ( MY_DB_FILE ) sys . exit () GooeyApplication . onClose = newOnClose","title":"patch_gooey_gui_component"},{"location":"reference/DataTag_helper/#remove_illegal_characters","text":"def remove_illegal_characters ( dataframe ) View Source def remove_illegal_characters ( dataframe ) : # dataframe = dataframe . applymap ( lambda x : x . encode ( ' unicode_escape ' ) . decode ( ' utf-8 ' ) if isinstance ( x , str ) else x ) dataframe = dataframe . applymap ( lambda x : ILLEGAL_CHARACTERS_RE . sub ( r \"\" , x ) if isinstance ( x , str ) else x ) return dataframe","title":"remove_illegal_characters"},{"location":"reference/DataTag_helper/#reorder_column","text":"def reorder_column ( columns_list , selected_column_name , insert_before_column_name = None ) columns_list: the list of columns to be reordered selected_column_name: the column name which wants to be inserted to the point before column insert_before_column_name insert_before_column_name: the column name which act as fix point relative to the selected_column_name View Source def reorder_column ( columns_list , selected_column_name , insert_before_column_name = None ) : \" \"\" columns_list: the list of columns to be reordered selected_column_name: the column name which wants to be inserted to the point before column `insert_before_column_name` insert_before_column_name: the column name which act as fix point relative to the `selected_column_name` \"\" \" columns_list = copy . copy ( columns_list ) selected_index = columns_list . index ( selected_column_name ) selected_item = columns_list . pop ( selected_index ) # drop selected column when insert_before_column_name is infinity if insert_before_column_name is np . inf : return columns_list # print(insert_before_column_name is float('inf')) # insert to the end of column list when insert_before_column_name is None if insert_before_column_name is None : insert_point_index = len ( columns_list ) else : insert_point_index = columns_list . index ( insert_before_column_name ) columns_list . insert ( insert_point_index , selected_item ) return columns_list","title":"reorder_column"},{"location":"reference/DataTag_helper/#split_train_test_to_target","text":"def split_train_test_to_target ( X , y , target ) View Source def split_train_test_to_target ( X , y , target ) : sss = StratifiedShuffleSplit ( n_splits = 5 , test_size = 0.2 , random_state = 1234 ) for index , ( train_index , test_index ) in enumerate ( sss . split ( X , y )) : # print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) X_train , X_test = X . iloc [ train_index ] , X . iloc [ test_index ] y_train , y_test = y . iloc [ train_index ] , y . iloc [ test_index ] print ( \"split {}\" . format ( index )) print ( \"train:\" , Counter ( y_train )) print ( \"test:\" , Counter ( y_test )) df_train = pd . DataFrame ( { \"TextID\" : X_train } ). reset_index ( drop = True ) df_test = pd . DataFrame ( { \"TextID\" : X_test } ). reset_index ( drop = True ) df_target_train = pd . merge ( df_train , target , how = \"left\" , on =[ \"TextID\" ] ) df_target_test = pd . merge ( df_test , target , how = \"left\" , on =[ \"TextID\" ] ) filename = \"train_test_split.xlsx\" # if file does not exist write header if index != 0 and os . path . isfile ( filename ) : mode = \"a\" else : mode = \"w\" with pd . ExcelWriter ( filename , options = { \"strings_to_urls\" : False } , mode = mode , engine = \"openpyxl\" ) as writer : df_target_train . to_excel ( writer , sheet_name = \"train{:02}\" . format ( index ), index = False ) df_target_test . to_excel ( writer , sheet_name = \"test{:02}\" . format ( index ), index = False )","title":"split_train_test_to_target"},{"location":"reference/DataTag_helper/#text_to_emoji","text":"def text_to_emoji ( df ) View Source def text_to_emoji ( df ) : df_emojilized = df . copy () ## \u5c07: emoji : \u63db\u56de unicode character df_emojilized [ \" Content \" ] = df [[ \" Content \" ]]. apply ( lambda x : emoji . emojize ( x [ 0 ] ) , axis = 1 ) df_emojilized [ \" Title \" ] = df [[ \" Title \" ]]. apply ( lambda x : emoji . emojize ( x [ 0 ] ) , axis = 1 ) return df_emojilized","title":"text_to_emoji"},{"location":"reference/DataTag_helper/#to_ai_clerk_batch_upload_json","text":"def to_AI_clerk_batch_upload_json ( dataframe , save_path ) View Source def to_AI_clerk_batch_upload_json ( dataframe , save_path ) : def to_article_dict ( x ) : return { \"Title\" : x . Title . tolist () [ 0 ] , \"Content\" : x . Content . tolist () [ 0 ] , \"Author\" : x . Author . tolist () [ 0 ] , \"Time\" : x . Time . tolist () [ 0 ] , } print ( \"number of entries: {}\" . format ( len ( dataframe ))) dup_id = dataframe . duplicated ( [ \"TextID\" ] , keep = False ) print ( \"duplicated entries: {}\" . format ( len ( dataframe [ dup_id ] ))) print ( dataframe [ dup_id ] ) samples_dict = dataframe . groupby ( [ \"TextID\" ] ). apply ( to_article_dict ). to_dict () print ( \"keep first, drop duplicated!\" ) content_length_lower_threshold = 100 long_id = dataframe [ \"Content\" ] . apply ( lambda x : True if len ( x ) < content_length_lower_threshold else False ) print ( \"number of entries which Content shorter then {} words: {}\" . format ( content_length_lower_threshold , len ( dataframe [ long_id ] ) ) ) print ( \"no drop, just show information.\" ) sample_articles = defaultdict ( defaultdict ) sample_articles [ \"Articles\" ] . update ( samples_dict ) print ( \"number of remaining entries: {}\" . format ( len ( sample_articles [ \"Articles\" ] ))) # output articles . json with open ( save_path , \"w\" , encoding = \"utf-8\" ) as outfile : json . dump ( sample_articles , outfile , ensure_ascii = False , indent = 4 )","title":"to_AI_clerk_batch_upload_json"},{"location":"reference/DataTag_helper/#to_excel_ai_clerk_labeled_data","text":"def to_excel_AI_clerk_labeled_data ( dataframe , save_path ) View Source def to_excel_AI_clerk_labeled_data ( dataframe , save_path ): ## unescape OOXML string dataframe = dataframe . applymap ( lambda x : unescape_OOXML ( x ) if isinstance ( x , str ) else x ) ## remove illegal characters dataframe = remove_illegal_characters ( dataframe ) df1 = ( dataframe . T . sort_values ([ \"TextID\" , \"Annotator\" ]) . rename_axis ( \"SerialID\" ) . reset_index () ) df1 = df1 [ sorted ( df1 . columns )] columns_list = list ( df1 . columns ) print ( columns_list ) columns_list = reorder_column ( columns_list , \"TextID\" , \"Annotator\" ) columns_list = reorder_column ( columns_list , \"SerialID\" , \"TextID\" ) columns_list = reorder_column ( columns_list , \"Title\" , \"Content\" ) columns_list = reorder_column ( columns_list , \"Author\" , \"Title\" ) columns_list = reorder_column ( columns_list , \"TextTime\" , \"Comment\" ) print ( columns_list ) df2 = df1 [ columns_list ] ########### extract document label ############# df_document_label = extract_dict ( df2 , [ \"TextID\" , \"Annotator\" ], \"Summary\" ) ## reduce multi-selection option into string def multi_selection_to_string ( option_columns ): # print(option_columns) option_columns_list = list ( filter ( lambda y : pd . notnull ( y ), option_columns )) # check if option_columns_list is empty or [''] if len ( option_columns_list ) == 0 : result = np . nan elif len ( option_columns_list ) == 1 and option_columns_list [ 0 ] == \"\" : result = np . nan else : result = reduce ( lambda a , b : a + \", \" + b , option_columns_list ) if result == \"\" : # print(list(option_columns)) # print(len(option_columns_list)) result = np . nan return result ### use ordered set to keep columns order od = OrderedDict ( df_document_label . columns . to_flat_index ()) option_columns_list = list ( od . keys ()) df_document_label_tmp = pd . DataFrame ( columns = option_columns_list ) df_document_label_tmp [ \"TextID\" ] = df_document_label [ \"TextID\" ] df_document_label_tmp [ \"Annotator\" ] = df_document_label [ \"Annotator\" ] option_columns_list . remove ( \"TextID\" ) option_columns_list . remove ( \"Annotator\" ) ### flatten all option columns for option_column in option_columns_list : df_document_label_tmp [ option_column ] = df_document_label [ option_column ] . apply ( lambda x : multi_selection_to_string ( x ), axis = 1 ) df_document_label = pd . merge ( df2 [[ \"TextID\" , \"Annotator\" ]], df_document_label_tmp , how = \"left\" , on = [ \"TextID\" , \"Annotator\" ], ) ########## create doc label compare view ########## df_doc_label_cmp = pd . pivot_table ( df_document_label , values = option_columns_list , index = [ \"TextID\" ], columns = [ \"Annotator\" ], aggfunc = lambda x : x . iloc [ 0 ], ) df_doc_label_cmp = df_doc_label_cmp . reset_index () ########## extract sentence label ############ df_sentence_label_tmp = extract_dict ( df2 , [ \"TextID\" , \"Annotator\" ], \"TermTab\" ) sentence_label_index_dict = OrderedDict ( df_sentence_label_tmp . columns . to_flat_index () ) sent_label_column_list = list ( sentence_label_index_dict . keys ()) # print(sent_label_column_list) sent_label_column_list . remove ( \"TextID\" ) sent_label_column_list . remove ( \"Annotator\" ) ## drop unused level of multi index to avoid KeyError df_sentence_label_tmp = df_sentence_label_tmp . droplevel ( 1 , axis = 1 ) df_sentence_label_tmp = df_sentence_label_tmp . melt ( id_vars = [ \"TextID\" , \"Annotator\" ], value_vars = sent_label_column_list , var_name = \"Sent_Label\" , value_name = \"Sentence\" , ) df_sentence_label_tmp = df_sentence_label_tmp . dropna () df_sentence_label_tmp [ \"Sent_Label\" ] = df_sentence_label_tmp [ \"Sent_Label\" ] . apply ( lambda x : x . split ( \"_\" )[ 0 ] ) df_sentence_label_tmp . reset_index ( drop = True , inplace = True ) df_sentence_label = pd . merge ( df_document_label , df_sentence_label_tmp , how = \"left\" , on = [ \"TextID\" , \"Annotator\" ] ) df_sentence_label = df_sentence_label . sort_values ( [ \"TextID\" , \"Annotator\" , \"Sent_Label\" ] ) ######### create sent label cmp long view ######## # this will group sentence by 'TextID', 'Annotator' and 'Sent_Label' df_sentence_sector = df_sentence_label_tmp . groupby ( [ \"TextID\" , \"Annotator\" , \"Sent_Label\" ] ) # because there may be many sentences belong to one Sent_Label, # when arragate, save these sentence into a list df_sent_label_cmp_long_tmp = df_sentence_sector . agg ( lambda x : [ y for y in x ]) # this will separate each sentence into columns, # so if there are 21 sentence, column's name will be a list of 0-20 df_sent_label_cmp_long_tmp = df_sent_label_cmp_long_tmp [ \"Sentence\" ] . apply ( lambda x : pd . Series ( x ) ) # add new column level: Sentence column_level_list = [[ \"Sentence\" ], df_sent_label_cmp_long_tmp . columns ] df_sent_label_cmp_long_tmp . columns = pd . MultiIndex . from_product ( column_level_list , names = [ \"\" , \"Sent_num\" ] ) # stack 'Sent_num' column as row index df_sent_label_cmp_long_tmp = df_sent_label_cmp_long_tmp . stack () # reset_index will turn all row index into columns df_sent_label_cmp_long_tmp = df_sent_label_cmp_long_tmp . reset_index () # set multilevel index with this order: 'TextID', 'Annotator', 'Sent_Label', 'Sent_num' df_sent_label_cmp_long_tmp = df_sent_label_cmp_long_tmp . set_index ( [ \"TextID\" , \"Annotator\" , \"Sent_Label\" , \"Sent_num\" ] ) def merge ( x , y ): if isinstance ( x , list ): new_x = x + y else : new_x = \"error\" return new_x # use 'TextID', 'Sent_Label', 'Sent_num' as index, # and turn 'Annotator''s value into columns, eg. # if there were four possible values of Annotator: A,B,C,D # then use A,B,C,B as new column names, pivot under value column 'Sentence' # in case there are multiple items with same index, aggfunc will be used. # it will pass a pd.Series object into aggfunc, # we cae use reduce to return sum over the series, # if each item in series is a list object, # we can define a merge function to sum these list up into one list. df_sent_label_cmp_long = pd . pivot_table ( df_sent_label_cmp_long_tmp , values = [ \"Sentence\" ], index = [ \"TextID\" , \"Sent_Label\" , \"Sent_num\" ], columns = [ \"Annotator\" ], aggfunc = lambda x : reduce ( merge , x ), ) # add additional level in the multiindex: 'Sent' # for sent_doc_cmp use col_index_names = list ( df_sent_label_cmp_long . columns . names ) df_sent_label_cmp_long . columns = pd . MultiIndex . from_tuples ( map ( lambda x : ( x [ 0 ], \"Sent\" , x [ 1 ]), df_sent_label_cmp_long . columns ), names = [ col_index_names [ 0 ], \"\" , col_index_names [ 1 ]], ) ######### create sentence label wide view ########## df_sentence_label_wide = df_sent_label_cmp_long . unstack () . unstack () df_sentence_label_wide . columns = df_sentence_label_wide . columns . swaplevel ( 3 , 4 ) df_sentence_label_wide . sort_index ( axis = 1 , level = 3 , inplace = True ) df_sentence_label_wide . columns = pd . MultiIndex . from_tuples ( map ( lambda x : ( x [ 2 ], str ( x [ 3 ]) + \"_\" + \"{:0>2d}\" . format ( x [ 4 ])), df_sentence_label_wide . columns , ) ) df_sentence_label_wide = df_sentence_label_wide . stack ( level = 0 ) df_sentence_label_wide . index = df_sentence_label_wide . index . rename ( [ \"TextID\" , \"Annotator\" ] ) df_sentence_label_wide = df_sentence_label_wide . reset_index () df_sentence_label_wide = pd . merge ( df_document_label , df_sentence_label_wide , how = \"left\" , on = [ \"TextID\" , \"Annotator\" ], ) empty_cols_exclude_first = df_sentence_label_wide . columns [ df_sentence_label_wide . columns . str . contains ( \"empty_(?:[0][1-9]|[1-9][0-9])\" ) ] df_sentence_label_wide = df_sentence_label_wide . drop ( empty_cols_exclude_first , axis = 1 ) ######### create sent label cmp wide views ########## df_sent_label_cmp_wide = df_sent_label_cmp_long . unstack () df_sent_label_cmp_wide . columns = df_sent_label_cmp_wide . columns . swaplevel ( 2 , 3 ) df_sent_label_cmp_wide . sort_index ( axis = 1 , level = 2 , inplace = True ) ######## create sent_doc_cmp views ######### df_doc_tmp = df_doc_label_cmp . set_index ( \"TextID\" ) df_doc_tmp = pd . concat ({ \"Doc_Label\" : df_doc_tmp }, names = [ \"label_kind\" ], axis = 1 ) df_sent_tmp = df_sent_label_cmp_long . reset_index () # to prevent warning: PerformanceWarning: dropping on a non-lexsorted multi-index without a level parameter may impact performance. # need to sort multi-index # see: [python - What exactly is the lexsort_depth of a multi-index Dataframe? - Stack Overflow](https://stackoverflow.com/questions/27116739/what-exactly-is-the-lexsort-depth-of-a-multi-index-dataframe) df_sent_tmp . sort_index ( axis = 1 , level = 0 , inplace = True ) df_sent_doc_cmp_tmp = pd . merge ( df_doc_tmp , df_sent_tmp , how = \"left\" , on = [ \"TextID\" ]) df_sent_doc_cmp_tmp . columns = df_sent_doc_cmp_tmp . columns . swaplevel ( 1 , 2 ) df_sent_doc_cmp_tmp . columns = df_sent_doc_cmp_tmp . columns . swaplevel ( 0 , 1 ) df_sent_doc_cmp_tmp . sort_index ( axis = 1 , level = 0 , inplace = True ) sent_doc_cols = list ( df_sent_doc_cmp_tmp . columns ) new_sent_doc_cols = reorder_column ( sent_doc_cols , ( \"\" , \"TextID\" , \"\" ), ( \"\" , \"Sent_Label\" , \"\" ) ) df_sent_doc_cmp = df_sent_doc_cmp_tmp [ new_sent_doc_cols ] df_sent_doc_cmp = df_sent_doc_cmp . set_index ( [( \"\" , \"TextID\" , \"\" ), ( \"\" , \"Sent_Label\" , \"\" ), ( \"\" , \"Sent_num\" , \"\" )] ) df_sent_doc_cmp . index = df_sent_doc_cmp . index . rename ( [ \"TextID\" , \"Sent_Label\" , \"Sent_num\" ] ) ########## extract content ########## drop_columns_list = reorder_column ( columns_list , \"Summary\" , np . inf ) drop_columns_list = reorder_column ( drop_columns_list , \"TermTab\" , np . inf ) print ( drop_columns_list ) ## explicit copy to avoid SettingWithCopyWarning warning df_content = df2 [ drop_columns_list ] . copy () ## remove tags in content df_content [ \"Content(remove_tag)\" ] = df_content [ \"Content\" ] . apply ( lambda x : re . sub ( r \"(\uff1c(\uff0f)?\uff0a(.+?)_\\d{1,2}\uff0a\uff1e)\" , \"\" , x ) ) # write to excel with pd . ExcelWriter ( save_path , options = { \"strings_to_urls\" : False }, engine = \"openpyxl\" ) as writer : df_sent_doc_cmp . to_excel ( writer , sheet_name = \"sent_doc_cmp\" , index = True ) df_doc_label_cmp . to_excel ( writer , sheet_name = \"doc_label_cmp\" , index = True ) df_sent_label_cmp_long . to_excel ( writer , sheet_name = \"sent_label_cmp(long)\" , index = True ) df_sent_label_cmp_wide . to_excel ( writer , sheet_name = \"sent_label_cmp(wide)\" , index = True ) df_sentence_label_wide . to_excel ( writer , sheet_name = \"sentence_label(wide)\" , index = False ) df_content . to_excel ( writer , sheet_name = \"contents\" , index = False ) df_document_label . to_excel ( writer , sheet_name = \"document_label\" , index = False ) df_sentence_label . to_excel ( writer , sheet_name = \"sentence_label\" , index = False ) for ws in writer . sheets . values (): \"\"\" fix column headers and row headers no font name issue need to use engine='openpyxl' \"\"\" # row_level = df_sent_doc_cmp.index.nlevels # print(row_level) for row in ws . iter_rows ( min_row = 1 , max_row = 1 ): \"\"\" walk through each cell of first row to assign font name \"\"\" for cell in row : # print(cell) font_params = cell . font . __dict__ if font_params [ \"name\" ] is None : font_params [ \"name\" ] = \"Calibri\" cell . font = Font ( ** font_params ) return ( df_content , df_document_label , df_sentence_label , df_sentence_label_wide , df_doc_label_cmp , df_sent_label_cmp_long , df_sent_label_cmp_wide , df_sent_doc_cmp , )","title":"to_excel_AI_clerk_labeled_data"},{"location":"reference/DataTag_helper/#unescape_ooxml","text":"def unescape_OOXML ( string ) View Source def unescape_OOXML ( string ) : def remove_character ( char ) : print ( \"removed illegal char!\" ) return r \"\" def _sub ( match ) : \"\"\" Callback to unescape chars \"\"\" char = chr ( int ( match . group ( 1 ), 16 )) # [ Convert regular Python string to raw string - Stack Overflow ] # ( https: //stackoverflow.com/questions/4415259/convert-regular-python-string-to-raw-string) # [ python - Pythonic way to do base conversion - Stack Overflow ] # ( https: //stackoverflow.com/questions/28824874/pythonic-way-to-do-base-conversion) print ( \"found char {}, which int in octal number is: {}\" . format ( char . encode ( \"unicode_escape\" ), oct ( ord ( char )) ) ) # remove carriage return if char == \" \\r \" : print ( \"removed!\" ) char = \"\" else : # remove illegal characters char = ILLEGAL_CHARACTERS_RE . sub ( remove_character , char ) return char string = ESCAPED_REGEX . sub ( _sub , string ) return string","title":"unescape_OOXML"}]}